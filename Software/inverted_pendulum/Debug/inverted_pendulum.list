
inverted_pendulum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
<<<<<<< HEAD
  1 .text         000045e8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004770  08004770  00014770  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004788  08004788  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004790  08004790  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004790  08004790  00014790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004794  08004794  00014794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004798  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000268  2000000c  080047a4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  080047a4  00020274  2**0
=======
  1 .text         000044e0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004668  08004668  00014668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004680  08004680  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004680  08004680  00014680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004688  08004688  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004688  08004688  00014688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800468c  0800468c  0001468c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004690  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  0800469c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  0800469c  00020268  2**0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000977c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001705  00000000  00000000  000297b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a58  00000000  00000000  0002aec0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000990  00000000  00000000  0002b918  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001eb0d  00000000  00000000  0002c2a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008674  00000000  00000000  0004adb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c3361  00000000  00000000  00053429  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011678a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb8  00000000  00000000  00116808  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
<<<<<<< HEAD
 80001a8:	08004758 	.word	0x08004758
=======
 80001a8:	08004650 	.word	0x08004650
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
<<<<<<< HEAD
 80001c4:	08004758 	.word	0x08004758
=======
 80001c4:	08004650 	.word	0x08004650
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <__aeabi_uldivmod>:
 8000a54:	b953      	cbnz	r3, 8000a6c <__aeabi_uldivmod+0x18>
 8000a56:	b94a      	cbnz	r2, 8000a6c <__aeabi_uldivmod+0x18>
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	bf08      	it	eq
 8000a5c:	2800      	cmpeq	r0, #0
 8000a5e:	bf1c      	itt	ne
 8000a60:	f04f 31ff 	movne.w	r1, #4294967295
 8000a64:	f04f 30ff 	movne.w	r0, #4294967295
 8000a68:	f000 b972 	b.w	8000d50 <__aeabi_idiv0>
 8000a6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a74:	f000 f806 	bl	8000a84 <__udivmoddi4>
 8000a78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a80:	b004      	add	sp, #16
 8000a82:	4770      	bx	lr

08000a84 <__udivmoddi4>:
 8000a84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a88:	9e08      	ldr	r6, [sp, #32]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	4688      	mov	r8, r1
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d14b      	bne.n	8000b2a <__udivmoddi4+0xa6>
 8000a92:	428a      	cmp	r2, r1
 8000a94:	4615      	mov	r5, r2
 8000a96:	d967      	bls.n	8000b68 <__udivmoddi4+0xe4>
 8000a98:	fab2 f282 	clz	r2, r2
 8000a9c:	b14a      	cbz	r2, 8000ab2 <__udivmoddi4+0x2e>
 8000a9e:	f1c2 0720 	rsb	r7, r2, #32
 8000aa2:	fa01 f302 	lsl.w	r3, r1, r2
 8000aa6:	fa20 f707 	lsr.w	r7, r0, r7
 8000aaa:	4095      	lsls	r5, r2
 8000aac:	ea47 0803 	orr.w	r8, r7, r3
 8000ab0:	4094      	lsls	r4, r2
 8000ab2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ab6:	0c23      	lsrs	r3, r4, #16
 8000ab8:	fbb8 f7fe 	udiv	r7, r8, lr
 8000abc:	fa1f fc85 	uxth.w	ip, r5
 8000ac0:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ac4:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ac8:	fb07 f10c 	mul.w	r1, r7, ip
 8000acc:	4299      	cmp	r1, r3
 8000ace:	d909      	bls.n	8000ae4 <__udivmoddi4+0x60>
 8000ad0:	18eb      	adds	r3, r5, r3
 8000ad2:	f107 30ff 	add.w	r0, r7, #4294967295
 8000ad6:	f080 811b 	bcs.w	8000d10 <__udivmoddi4+0x28c>
 8000ada:	4299      	cmp	r1, r3
 8000adc:	f240 8118 	bls.w	8000d10 <__udivmoddi4+0x28c>
 8000ae0:	3f02      	subs	r7, #2
 8000ae2:	442b      	add	r3, r5
 8000ae4:	1a5b      	subs	r3, r3, r1
 8000ae6:	b2a4      	uxth	r4, r4
 8000ae8:	fbb3 f0fe 	udiv	r0, r3, lr
 8000aec:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000af4:	fb00 fc0c 	mul.w	ip, r0, ip
 8000af8:	45a4      	cmp	ip, r4
 8000afa:	d909      	bls.n	8000b10 <__udivmoddi4+0x8c>
 8000afc:	192c      	adds	r4, r5, r4
 8000afe:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b02:	f080 8107 	bcs.w	8000d14 <__udivmoddi4+0x290>
 8000b06:	45a4      	cmp	ip, r4
 8000b08:	f240 8104 	bls.w	8000d14 <__udivmoddi4+0x290>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	442c      	add	r4, r5
 8000b10:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b14:	eba4 040c 	sub.w	r4, r4, ip
 8000b18:	2700      	movs	r7, #0
 8000b1a:	b11e      	cbz	r6, 8000b24 <__udivmoddi4+0xa0>
 8000b1c:	40d4      	lsrs	r4, r2
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e9c6 4300 	strd	r4, r3, [r6]
 8000b24:	4639      	mov	r1, r7
 8000b26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b2a:	428b      	cmp	r3, r1
 8000b2c:	d909      	bls.n	8000b42 <__udivmoddi4+0xbe>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	f000 80eb 	beq.w	8000d0a <__udivmoddi4+0x286>
 8000b34:	2700      	movs	r7, #0
 8000b36:	e9c6 0100 	strd	r0, r1, [r6]
 8000b3a:	4638      	mov	r0, r7
 8000b3c:	4639      	mov	r1, r7
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	fab3 f783 	clz	r7, r3
 8000b46:	2f00      	cmp	r7, #0
 8000b48:	d147      	bne.n	8000bda <__udivmoddi4+0x156>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d302      	bcc.n	8000b54 <__udivmoddi4+0xd0>
 8000b4e:	4282      	cmp	r2, r0
 8000b50:	f200 80fa 	bhi.w	8000d48 <__udivmoddi4+0x2c4>
 8000b54:	1a84      	subs	r4, r0, r2
 8000b56:	eb61 0303 	sbc.w	r3, r1, r3
 8000b5a:	2001      	movs	r0, #1
 8000b5c:	4698      	mov	r8, r3
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d0e0      	beq.n	8000b24 <__udivmoddi4+0xa0>
 8000b62:	e9c6 4800 	strd	r4, r8, [r6]
 8000b66:	e7dd      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000b68:	b902      	cbnz	r2, 8000b6c <__udivmoddi4+0xe8>
 8000b6a:	deff      	udf	#255	; 0xff
 8000b6c:	fab2 f282 	clz	r2, r2
 8000b70:	2a00      	cmp	r2, #0
 8000b72:	f040 808f 	bne.w	8000c94 <__udivmoddi4+0x210>
 8000b76:	1b49      	subs	r1, r1, r5
 8000b78:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7c:	fa1f f885 	uxth.w	r8, r5
 8000b80:	2701      	movs	r7, #1
 8000b82:	fbb1 fcfe 	udiv	ip, r1, lr
 8000b86:	0c23      	lsrs	r3, r4, #16
 8000b88:	fb0e 111c 	mls	r1, lr, ip, r1
 8000b8c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b90:	fb08 f10c 	mul.w	r1, r8, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d907      	bls.n	8000ba8 <__udivmoddi4+0x124>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b9e:	d202      	bcs.n	8000ba6 <__udivmoddi4+0x122>
 8000ba0:	4299      	cmp	r1, r3
 8000ba2:	f200 80cd 	bhi.w	8000d40 <__udivmoddi4+0x2bc>
 8000ba6:	4684      	mov	ip, r0
 8000ba8:	1a59      	subs	r1, r3, r1
 8000baa:	b2a3      	uxth	r3, r4
 8000bac:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bb0:	fb0e 1410 	mls	r4, lr, r0, r1
 8000bb4:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000bb8:	fb08 f800 	mul.w	r8, r8, r0
 8000bbc:	45a0      	cmp	r8, r4
 8000bbe:	d907      	bls.n	8000bd0 <__udivmoddi4+0x14c>
 8000bc0:	192c      	adds	r4, r5, r4
 8000bc2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bc6:	d202      	bcs.n	8000bce <__udivmoddi4+0x14a>
 8000bc8:	45a0      	cmp	r8, r4
 8000bca:	f200 80b6 	bhi.w	8000d3a <__udivmoddi4+0x2b6>
 8000bce:	4618      	mov	r0, r3
 8000bd0:	eba4 0408 	sub.w	r4, r4, r8
 8000bd4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bd8:	e79f      	b.n	8000b1a <__udivmoddi4+0x96>
 8000bda:	f1c7 0c20 	rsb	ip, r7, #32
 8000bde:	40bb      	lsls	r3, r7
 8000be0:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000be4:	ea4e 0e03 	orr.w	lr, lr, r3
 8000be8:	fa01 f407 	lsl.w	r4, r1, r7
 8000bec:	fa20 f50c 	lsr.w	r5, r0, ip
 8000bf0:	fa21 f30c 	lsr.w	r3, r1, ip
 8000bf4:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000bf8:	4325      	orrs	r5, r4
 8000bfa:	fbb3 f9f8 	udiv	r9, r3, r8
 8000bfe:	0c2c      	lsrs	r4, r5, #16
 8000c00:	fb08 3319 	mls	r3, r8, r9, r3
 8000c04:	fa1f fa8e 	uxth.w	sl, lr
 8000c08:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000c0c:	fb09 f40a 	mul.w	r4, r9, sl
 8000c10:	429c      	cmp	r4, r3
 8000c12:	fa02 f207 	lsl.w	r2, r2, r7
 8000c16:	fa00 f107 	lsl.w	r1, r0, r7
 8000c1a:	d90b      	bls.n	8000c34 <__udivmoddi4+0x1b0>
 8000c1c:	eb1e 0303 	adds.w	r3, lr, r3
 8000c20:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c24:	f080 8087 	bcs.w	8000d36 <__udivmoddi4+0x2b2>
 8000c28:	429c      	cmp	r4, r3
 8000c2a:	f240 8084 	bls.w	8000d36 <__udivmoddi4+0x2b2>
 8000c2e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c32:	4473      	add	r3, lr
 8000c34:	1b1b      	subs	r3, r3, r4
 8000c36:	b2ad      	uxth	r5, r5
 8000c38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c40:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000c44:	fb00 fa0a 	mul.w	sl, r0, sl
 8000c48:	45a2      	cmp	sl, r4
 8000c4a:	d908      	bls.n	8000c5e <__udivmoddi4+0x1da>
 8000c4c:	eb1e 0404 	adds.w	r4, lr, r4
 8000c50:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c54:	d26b      	bcs.n	8000d2e <__udivmoddi4+0x2aa>
 8000c56:	45a2      	cmp	sl, r4
 8000c58:	d969      	bls.n	8000d2e <__udivmoddi4+0x2aa>
 8000c5a:	3802      	subs	r0, #2
 8000c5c:	4474      	add	r4, lr
 8000c5e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c62:	fba0 8902 	umull	r8, r9, r0, r2
 8000c66:	eba4 040a 	sub.w	r4, r4, sl
 8000c6a:	454c      	cmp	r4, r9
 8000c6c:	46c2      	mov	sl, r8
 8000c6e:	464b      	mov	r3, r9
 8000c70:	d354      	bcc.n	8000d1c <__udivmoddi4+0x298>
 8000c72:	d051      	beq.n	8000d18 <__udivmoddi4+0x294>
 8000c74:	2e00      	cmp	r6, #0
 8000c76:	d069      	beq.n	8000d4c <__udivmoddi4+0x2c8>
 8000c78:	ebb1 050a 	subs.w	r5, r1, sl
 8000c7c:	eb64 0403 	sbc.w	r4, r4, r3
 8000c80:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000c84:	40fd      	lsrs	r5, r7
 8000c86:	40fc      	lsrs	r4, r7
 8000c88:	ea4c 0505 	orr.w	r5, ip, r5
 8000c8c:	e9c6 5400 	strd	r5, r4, [r6]
 8000c90:	2700      	movs	r7, #0
 8000c92:	e747      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000c94:	f1c2 0320 	rsb	r3, r2, #32
 8000c98:	fa20 f703 	lsr.w	r7, r0, r3
 8000c9c:	4095      	lsls	r5, r2
 8000c9e:	fa01 f002 	lsl.w	r0, r1, r2
 8000ca2:	fa21 f303 	lsr.w	r3, r1, r3
 8000ca6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000caa:	4338      	orrs	r0, r7
 8000cac:	0c01      	lsrs	r1, r0, #16
 8000cae:	fbb3 f7fe 	udiv	r7, r3, lr
 8000cb2:	fa1f f885 	uxth.w	r8, r5
 8000cb6:	fb0e 3317 	mls	r3, lr, r7, r3
 8000cba:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cbe:	fb07 f308 	mul.w	r3, r7, r8
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	fa04 f402 	lsl.w	r4, r4, r2
 8000cc8:	d907      	bls.n	8000cda <__udivmoddi4+0x256>
 8000cca:	1869      	adds	r1, r5, r1
 8000ccc:	f107 3cff 	add.w	ip, r7, #4294967295
 8000cd0:	d22f      	bcs.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d92d      	bls.n	8000d32 <__udivmoddi4+0x2ae>
 8000cd6:	3f02      	subs	r7, #2
 8000cd8:	4429      	add	r1, r5
 8000cda:	1acb      	subs	r3, r1, r3
 8000cdc:	b281      	uxth	r1, r0
 8000cde:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce2:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cea:	fb00 f308 	mul.w	r3, r0, r8
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d907      	bls.n	8000d02 <__udivmoddi4+0x27e>
 8000cf2:	1869      	adds	r1, r5, r1
 8000cf4:	f100 3cff 	add.w	ip, r0, #4294967295
 8000cf8:	d217      	bcs.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfa:	428b      	cmp	r3, r1
 8000cfc:	d915      	bls.n	8000d2a <__udivmoddi4+0x2a6>
 8000cfe:	3802      	subs	r0, #2
 8000d00:	4429      	add	r1, r5
 8000d02:	1ac9      	subs	r1, r1, r3
 8000d04:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000d08:	e73b      	b.n	8000b82 <__udivmoddi4+0xfe>
 8000d0a:	4637      	mov	r7, r6
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	e709      	b.n	8000b24 <__udivmoddi4+0xa0>
 8000d10:	4607      	mov	r7, r0
 8000d12:	e6e7      	b.n	8000ae4 <__udivmoddi4+0x60>
 8000d14:	4618      	mov	r0, r3
 8000d16:	e6fb      	b.n	8000b10 <__udivmoddi4+0x8c>
 8000d18:	4541      	cmp	r1, r8
 8000d1a:	d2ab      	bcs.n	8000c74 <__udivmoddi4+0x1f0>
 8000d1c:	ebb8 0a02 	subs.w	sl, r8, r2
 8000d20:	eb69 020e 	sbc.w	r2, r9, lr
 8000d24:	3801      	subs	r0, #1
 8000d26:	4613      	mov	r3, r2
 8000d28:	e7a4      	b.n	8000c74 <__udivmoddi4+0x1f0>
 8000d2a:	4660      	mov	r0, ip
 8000d2c:	e7e9      	b.n	8000d02 <__udivmoddi4+0x27e>
 8000d2e:	4618      	mov	r0, r3
 8000d30:	e795      	b.n	8000c5e <__udivmoddi4+0x1da>
 8000d32:	4667      	mov	r7, ip
 8000d34:	e7d1      	b.n	8000cda <__udivmoddi4+0x256>
 8000d36:	4681      	mov	r9, r0
 8000d38:	e77c      	b.n	8000c34 <__udivmoddi4+0x1b0>
 8000d3a:	3802      	subs	r0, #2
 8000d3c:	442c      	add	r4, r5
 8000d3e:	e747      	b.n	8000bd0 <__udivmoddi4+0x14c>
 8000d40:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d44:	442b      	add	r3, r5
 8000d46:	e72f      	b.n	8000ba8 <__udivmoddi4+0x124>
 8000d48:	4638      	mov	r0, r7
 8000d4a:	e708      	b.n	8000b5e <__udivmoddi4+0xda>
 8000d4c:	4637      	mov	r7, r6
 8000d4e:	e6e9      	b.n	8000b24 <__udivmoddi4+0xa0>

08000d50 <__aeabi_idiv0>:
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop

08000d54 <HAL_GPIO_EXTI_Callback>:
static void MX_TIM10_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */

/* Interrupts */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == START_POS_Pin){
 8000d5e:	88fb      	ldrh	r3, [r7, #6]
 8000d60:	2b80      	cmp	r3, #128	; 0x80
 8000d62:	d103      	bne.n	8000d6c <HAL_GPIO_EXTI_Callback+0x18>
		START_POSITION_FLAG=1;
 8000d64:	4b07      	ldr	r3, [pc, #28]	; (8000d84 <HAL_GPIO_EXTI_Callback+0x30>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	701a      	strb	r2, [r3, #0]
	}
	else if(GPIO_Pin == Button_Pin){
		START_BALANCING = 1;
	}
}
 8000d6a:	e005      	b.n	8000d78 <HAL_GPIO_EXTI_Callback+0x24>
	else if(GPIO_Pin == Button_Pin){
 8000d6c:	88fb      	ldrh	r3, [r7, #6]
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d102      	bne.n	8000d78 <HAL_GPIO_EXTI_Callback+0x24>
		START_BALANCING = 1;
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_GPIO_EXTI_Callback+0x34>)
 8000d74:	2201      	movs	r2, #1
 8000d76:	701a      	strb	r2, [r3, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	370c      	adds	r7, #12
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	20000028 	.word	0x20000028
 8000d88:	20000029 	.word	0x20000029

08000d8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d8c:	b480      	push	{r7}
 8000d8e:	b083      	sub	sp, #12
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
	if(htim==&htim10){
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	4a09      	ldr	r2, [pc, #36]	; (8000dbc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	d102      	bne.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x16>
		LED_FLAG = 1;
 8000d9c:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
	}
	if(htim==&htim11){
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a07      	ldr	r2, [pc, #28]	; (8000dc4 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d102      	bne.n	8000db0 <HAL_TIM_PeriodElapsedCallback+0x24>
		PID_FLAG = 1;
 8000daa:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000dac:	2201      	movs	r2, #1
 8000dae:	701a      	strb	r2, [r3, #0]
	}
}
 8000db0:	bf00      	nop
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	200000c0 	.word	0x200000c0
 8000dc0:	20000036 	.word	0x20000036
 8000dc4:	20000184 	.word	0x20000184
 8000dc8:	20000038 	.word	0x20000038

08000dcc <motor_speed>:

void motor_speed(int16_t speed){
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	80fb      	strh	r3, [r7, #6]
	if(speed < 0){
 8000dd6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	da2b      	bge.n	8000e36 <motor_speed+0x6a>
		if(cart_position > 5){
 8000dde:	4b36      	ldr	r3, [pc, #216]	; (8000eb8 <motor_speed+0xec>)
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	b21b      	sxth	r3, r3
 8000de4:	2b05      	cmp	r3, #5
 8000de6:	dd18      	ble.n	8000e1a <motor_speed+0x4e>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8000de8:	2200      	movs	r2, #0
 8000dea:	2120      	movs	r1, #32
 8000dec:	4833      	ldr	r0, [pc, #204]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000dee:	f001 feef 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000dee:	f001 fe6b 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000df2:	2201      	movs	r2, #1
 8000df4:	2110      	movs	r1, #16
 8000df6:	4831      	ldr	r0, [pc, #196]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000df8:	f001 feea 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000df8:	f001 fe66 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			if(cart_position > 20){
 8000dfc:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <motor_speed+0xec>)
 8000dfe:	881b      	ldrh	r3, [r3, #0]
 8000e00:	b21b      	sxth	r3, r3
 8000e02:	2b14      	cmp	r3, #20
 8000e04:	dd05      	ble.n	8000e12 <motor_speed+0x46>
				motor_pwm_duty=-speed;
 8000e06:	88fb      	ldrh	r3, [r7, #6]
 8000e08:	425b      	negs	r3, r3
 8000e0a:	b29a      	uxth	r2, r3
 8000e0c:	4b2c      	ldr	r3, [pc, #176]	; (8000ec0 <motor_speed+0xf4>)
 8000e0e:	801a      	strh	r2, [r3, #0]
	else{
		HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
		motor_pwm_duty = 0;
	}
}
 8000e10:	e04e      	b.n	8000eb0 <motor_speed+0xe4>
				motor_pwm_duty=45;
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <motor_speed+0xf4>)
 8000e14:	222d      	movs	r2, #45	; 0x2d
 8000e16:	801a      	strh	r2, [r3, #0]
}
 8000e18:	e04a      	b.n	8000eb0 <motor_speed+0xe4>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2120      	movs	r1, #32
 8000e1e:	4827      	ldr	r0, [pc, #156]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000e20:	f001 fed6 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000e20:	f001 fe52 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	2110      	movs	r1, #16
 8000e28:	4824      	ldr	r0, [pc, #144]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000e2a:	f001 fed1 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000e2a:	f001 fe4d 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			motor_pwm_duty = 100;
 8000e2e:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <motor_speed+0xf4>)
 8000e30:	2264      	movs	r2, #100	; 0x64
 8000e32:	801a      	strh	r2, [r3, #0]
}
 8000e34:	e03c      	b.n	8000eb0 <motor_speed+0xe4>
	else if(speed > 0){
 8000e36:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	dd2b      	ble.n	8000e96 <motor_speed+0xca>
		if(cart_position < 428){
 8000e3e:	4b1e      	ldr	r3, [pc, #120]	; (8000eb8 <motor_speed+0xec>)
 8000e40:	881b      	ldrh	r3, [r3, #0]
 8000e42:	b21b      	sxth	r3, r3
 8000e44:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 8000e48:	da17      	bge.n	8000e7a <motor_speed+0xae>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000e4a:	2201      	movs	r2, #1
 8000e4c:	2120      	movs	r1, #32
 8000e4e:	481b      	ldr	r0, [pc, #108]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000e50:	f001 febe 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000e50:	f001 fe3a 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000e54:	2200      	movs	r2, #0
 8000e56:	2110      	movs	r1, #16
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000e5a:	f001 feb9 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000e5a:	f001 fe35 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			if(cart_position < 413){
 8000e5e:	4b16      	ldr	r3, [pc, #88]	; (8000eb8 <motor_speed+0xec>)
 8000e60:	881b      	ldrh	r3, [r3, #0]
 8000e62:	b21b      	sxth	r3, r3
 8000e64:	f5b3 7fce 	cmp.w	r3, #412	; 0x19c
 8000e68:	dc03      	bgt.n	8000e72 <motor_speed+0xa6>
				motor_pwm_duty=speed;
 8000e6a:	88fa      	ldrh	r2, [r7, #6]
 8000e6c:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <motor_speed+0xf4>)
 8000e6e:	801a      	strh	r2, [r3, #0]
}
 8000e70:	e01e      	b.n	8000eb0 <motor_speed+0xe4>
				motor_pwm_duty=45;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <motor_speed+0xf4>)
 8000e74:	222d      	movs	r2, #45	; 0x2d
 8000e76:	801a      	strh	r2, [r3, #0]
}
 8000e78:	e01a      	b.n	8000eb0 <motor_speed+0xe4>
			HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2120      	movs	r1, #32
 8000e7e:	480f      	ldr	r0, [pc, #60]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000e80:	f001 fea6 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000e80:	f001 fe22 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2110      	movs	r1, #16
 8000e88:	480c      	ldr	r0, [pc, #48]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000e8a:	f001 fea1 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000e8a:	f001 fe1d 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			motor_pwm_duty = 100;
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <motor_speed+0xf4>)
 8000e90:	2264      	movs	r2, #100	; 0x64
 8000e92:	801a      	strh	r2, [r3, #0]
}
 8000e94:	e00c      	b.n	8000eb0 <motor_speed+0xe4>
		HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000e96:	2201      	movs	r2, #1
 8000e98:	2120      	movs	r1, #32
 8000e9a:	4808      	ldr	r0, [pc, #32]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000e9c:	f001 fe98 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000e9c:	f001 fe14 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
		HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	2110      	movs	r1, #16
 8000ea4:	4805      	ldr	r0, [pc, #20]	; (8000ebc <motor_speed+0xf0>)
<<<<<<< HEAD
 8000ea6:	f001 fe93 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000ea6:	f001 fe0f 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
		motor_pwm_duty = 0;
 8000eaa:	4b05      	ldr	r3, [pc, #20]	; (8000ec0 <motor_speed+0xf4>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	801a      	strh	r2, [r3, #0]
}
 8000eb0:	bf00      	nop
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}
 8000eb8:	20000032 	.word	0x20000032
 8000ebc:	40020400 	.word	0x40020400
 8000ec0:	20000034 	.word	0x20000034

08000ec4 <motor_stop>:
//		HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
//	}
//}

void motor_stop(){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2120      	movs	r1, #32
 8000ecc:	4806      	ldr	r0, [pc, #24]	; (8000ee8 <motor_stop+0x24>)
<<<<<<< HEAD
 8000ece:	f001 fe7f 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000ece:	f001 fdfb 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	2110      	movs	r1, #16
 8000ed6:	4804      	ldr	r0, [pc, #16]	; (8000ee8 <motor_stop+0x24>)
<<<<<<< HEAD
 8000ed8:	f001 fe7a 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000ed8:	f001 fdf6 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	motor_pwm_duty=100;
 8000edc:	4b03      	ldr	r3, [pc, #12]	; (8000eec <motor_stop+0x28>)
 8000ede:	2264      	movs	r2, #100	; 0x64
 8000ee0:	801a      	strh	r2, [r3, #0]
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020400 	.word	0x40020400
 8000eec:	20000034 	.word	0x20000034

08000ef0 <motor_init>:

void motor_init(){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	2120      	movs	r1, #32
 8000ef8:	480e      	ldr	r0, [pc, #56]	; (8000f34 <motor_init+0x44>)
<<<<<<< HEAD
 8000efa:	f001 fe69 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000efa:	f001 fde5 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8000efe:	2200      	movs	r2, #0
 8000f00:	2110      	movs	r1, #16
 8000f02:	480c      	ldr	r0, [pc, #48]	; (8000f34 <motor_init+0x44>)
<<<<<<< HEAD
 8000f04:	f001 fe64 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000f04:	f001 fde0 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	motor_pwm_duty=45;
 8000f08:	4b0b      	ldr	r3, [pc, #44]	; (8000f38 <motor_init+0x48>)
 8000f0a:	222d      	movs	r2, #45	; 0x2d
 8000f0c:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 8000f0e:	2064      	movs	r0, #100	; 0x64
<<<<<<< HEAD
 8000f10:	f001 f822 	bl	8001f58 <HAL_Delay>
=======
 8000f10:	f000 ff9e 	bl	8001e50 <HAL_Delay>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8000f14:	2200      	movs	r2, #0
 8000f16:	2120      	movs	r1, #32
 8000f18:	4806      	ldr	r0, [pc, #24]	; (8000f34 <motor_init+0x44>)
<<<<<<< HEAD
 8000f1a:	f001 fe59 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000f1a:	f001 fdd5 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8000f1e:	2201      	movs	r2, #1
 8000f20:	2110      	movs	r1, #16
 8000f22:	4804      	ldr	r0, [pc, #16]	; (8000f34 <motor_init+0x44>)
<<<<<<< HEAD
 8000f24:	f001 fe54 	bl	8002bd0 <HAL_GPIO_WritePin>
=======
 8000f24:	f001 fdd0 	bl	8002ac8 <HAL_GPIO_WritePin>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	motor_pwm_duty=45;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <motor_init+0x48>)
 8000f2a:	222d      	movs	r2, #45	; 0x2d
 8000f2c:	801a      	strh	r2, [r3, #0]
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40020400 	.word	0x40020400
 8000f38:	20000034 	.word	0x20000034
 8000f3c:	00000000 	.word	0x00000000

08000f40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f40:	b598      	push	{r3, r4, r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
<<<<<<< HEAD
 800101c:	f000 ff2a 	bl	8001e74 <HAL_Init>
=======
 8000f44:	f000 ff12 	bl	8001d6c <HAL_Init>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
<<<<<<< HEAD
 8001020:	f000 f940 	bl	80012a4 <SystemClock_Config>
=======
 8000f48:	f000 f930 	bl	80011ac <SystemClock_Config>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
<<<<<<< HEAD
 8001024:	f000 fb32 	bl	800168c <MX_GPIO_Init>
  MX_DMA_Init();
 8001028:	f000 fb10 	bl	800164c <MX_DMA_Init>
  MX_TIM4_Init();
 800102c:	f000 fa50 	bl	80014d0 <MX_TIM4_Init>
  MX_TIM1_Init();
 8001030:	f000 f9a2 	bl	8001378 <MX_TIM1_Init>
  MX_TIM3_Init();
 8001034:	f000 f9f8 	bl	8001428 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001038:	f000 fac0 	bl	80015bc <MX_TIM10_Init>
  MX_TIM11_Init();
 800103c:	f000 fae2 	bl	8001604 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001040:	213c      	movs	r1, #60	; 0x3c
 8001042:	487d      	ldr	r0, [pc, #500]	; (8001238 <main+0x220>)
 8001044:	f002 fc40 	bl	80038c8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001048:	213c      	movs	r1, #60	; 0x3c
 800104a:	487c      	ldr	r0, [pc, #496]	; (800123c <main+0x224>)
 800104c:	f002 fc3c 	bl	80038c8 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 8001050:	487b      	ldr	r0, [pc, #492]	; (8001240 <main+0x228>)
 8001052:	f002 fa3c 	bl	80034ce <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8001056:	487b      	ldr	r0, [pc, #492]	; (8001244 <main+0x22c>)
 8001058:	f002 fa39 	bl	80034ce <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &motor_pwm_duty, 1);
 800105c:	2301      	movs	r3, #1
 800105e:	4a7a      	ldr	r2, [pc, #488]	; (8001248 <main+0x230>)
 8001060:	2100      	movs	r1, #0
 8001062:	487a      	ldr	r0, [pc, #488]	; (800124c <main+0x234>)
 8001064:	f002 fa8c 	bl	8003580 <HAL_TIM_PWM_Start_DMA>
=======
 8000f4c:	f000 fb22 	bl	8001594 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f50:	f000 fb00 	bl	8001554 <MX_DMA_Init>
  MX_TIM4_Init();
 8000f54:	f000 fa40 	bl	80013d8 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000f58:	f000 f992 	bl	8001280 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f5c:	f000 f9e8 	bl	8001330 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000f60:	f000 fab0 	bl	80014c4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000f64:	f000 fad2 	bl	800150c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000f68:	213c      	movs	r1, #60	; 0x3c
 8000f6a:	4877      	ldr	r0, [pc, #476]	; (8001148 <main+0x208>)
 8000f6c:	f002 fc28 	bl	80037c0 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f70:	213c      	movs	r1, #60	; 0x3c
 8000f72:	4876      	ldr	r0, [pc, #472]	; (800114c <main+0x20c>)
 8000f74:	f002 fc24 	bl	80037c0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start_IT(&htim10);
 8000f78:	4875      	ldr	r0, [pc, #468]	; (8001150 <main+0x210>)
 8000f7a:	f002 fa24 	bl	80033c6 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 8000f7e:	4875      	ldr	r0, [pc, #468]	; (8001154 <main+0x214>)
 8000f80:	f002 fa21 	bl	80033c6 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &motor_pwm_duty, 1);
 8000f84:	2301      	movs	r3, #1
 8000f86:	4a74      	ldr	r2, [pc, #464]	; (8001158 <main+0x218>)
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4874      	ldr	r0, [pc, #464]	; (800115c <main+0x21c>)
 8000f8c:	f002 fa74 	bl	8003478 <HAL_TIM_PWM_Start_DMA>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  motor_init();
 8000f90:	f7ff ffae 	bl	8000ef0 <motor_init>


	pid_init(&motor_pid, 1.f, 20.f, 1.f, 10);
<<<<<<< HEAD
 800106c:	210a      	movs	r1, #10
 800106e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8001072:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001076:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800107a:	4875      	ldr	r0, [pc, #468]	; (8001250 <main+0x238>)
 800107c:	f000 fbcf 	bl	800181e <pid_init>
=======
 8000f94:	210a      	movs	r1, #10
 8000f96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8000f9a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8000f9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000fa2:	486f      	ldr	r0, [pc, #444]	; (8001160 <main+0x220>)
 8000fa4:	f000 fbbf 	bl	8001726 <pid_init>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
	motor_pid.p_max = 4095;
 8000fa8:	4b6d      	ldr	r3, [pc, #436]	; (8001160 <main+0x220>)
 8000faa:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fae:	60da      	str	r2, [r3, #12]
	motor_pid.p_min = -4095;
 8000fb0:	4b6b      	ldr	r3, [pc, #428]	; (8001160 <main+0x220>)
 8000fb2:	4a6c      	ldr	r2, [pc, #432]	; (8001164 <main+0x224>)
 8000fb4:	619a      	str	r2, [r3, #24]
	motor_pid.i_max = 4095;
 8000fb6:	4b6a      	ldr	r3, [pc, #424]	; (8001160 <main+0x220>)
 8000fb8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fbc:	611a      	str	r2, [r3, #16]
	motor_pid.i_min = -4095;
 8000fbe:	4b68      	ldr	r3, [pc, #416]	; (8001160 <main+0x220>)
 8000fc0:	4a68      	ldr	r2, [pc, #416]	; (8001164 <main+0x224>)
 8000fc2:	61da      	str	r2, [r3, #28]
	motor_pid.d_max = 4095;
 8000fc4:	4b66      	ldr	r3, [pc, #408]	; (8001160 <main+0x220>)
 8000fc6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000fca:	615a      	str	r2, [r3, #20]
	motor_pid.d_min = -4095;
 8000fcc:	4b64      	ldr	r3, [pc, #400]	; (8001160 <main+0x220>)
 8000fce:	4a65      	ldr	r2, [pc, #404]	; (8001164 <main+0x224>)
 8000fd0:	621a      	str	r2, [r3, #32]
	motor_pid.total_max = 100;
 8000fd2:	4b63      	ldr	r3, [pc, #396]	; (8001160 <main+0x220>)
 8000fd4:	2264      	movs	r2, #100	; 0x64
 8000fd6:	635a      	str	r2, [r3, #52]	; 0x34
	motor_pid.total_min = -100;
<<<<<<< HEAD
 80010b0:	4b67      	ldr	r3, [pc, #412]	; (8001250 <main+0x238>)
 80010b2:	f06f 0263 	mvn.w	r2, #99	; 0x63
 80010b6:	639a      	str	r2, [r3, #56]	; 0x38

	pid_init(&pendulum_pid, 70.f, 0.f, 0.f, 10);
 80010b8:	210a      	movs	r1, #10
 80010ba:	ed9f 1a67 	vldr	s2, [pc, #412]	; 8001258 <main+0x240>
 80010be:	eddf 0a66 	vldr	s1, [pc, #408]	; 8001258 <main+0x240>
 80010c2:	ed9f 0a66 	vldr	s0, [pc, #408]	; 800125c <main+0x244>
 80010c6:	4866      	ldr	r0, [pc, #408]	; (8001260 <main+0x248>)
 80010c8:	f000 fba9 	bl	800181e <pid_init>
	pendulum_pid.p_max = 4095;
 80010cc:	4b64      	ldr	r3, [pc, #400]	; (8001260 <main+0x248>)
 80010ce:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010d2:	60da      	str	r2, [r3, #12]
	pendulum_pid.p_min = -4095;
 80010d4:	4b62      	ldr	r3, [pc, #392]	; (8001260 <main+0x248>)
 80010d6:	4a5f      	ldr	r2, [pc, #380]	; (8001254 <main+0x23c>)
 80010d8:	619a      	str	r2, [r3, #24]
	pendulum_pid.i_max = 4095;
 80010da:	4b61      	ldr	r3, [pc, #388]	; (8001260 <main+0x248>)
 80010dc:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010e0:	611a      	str	r2, [r3, #16]
	pendulum_pid.i_min = -4095;
 80010e2:	4b5f      	ldr	r3, [pc, #380]	; (8001260 <main+0x248>)
 80010e4:	4a5b      	ldr	r2, [pc, #364]	; (8001254 <main+0x23c>)
 80010e6:	61da      	str	r2, [r3, #28]
	pendulum_pid.d_max = 4095;
 80010e8:	4b5d      	ldr	r3, [pc, #372]	; (8001260 <main+0x248>)
 80010ea:	f640 72ff 	movw	r2, #4095	; 0xfff
 80010ee:	615a      	str	r2, [r3, #20]
	pendulum_pid.d_min = -4095;
 80010f0:	4b5b      	ldr	r3, [pc, #364]	; (8001260 <main+0x248>)
 80010f2:	4a58      	ldr	r2, [pc, #352]	; (8001254 <main+0x23c>)
 80010f4:	621a      	str	r2, [r3, #32]
	pendulum_pid.total_max = 100;
 80010f6:	4b5a      	ldr	r3, [pc, #360]	; (8001260 <main+0x248>)
 80010f8:	2264      	movs	r2, #100	; 0x64
 80010fa:	635a      	str	r2, [r3, #52]	; 0x34
	pendulum_pid.total_min = -100;
 80010fc:	4b58      	ldr	r3, [pc, #352]	; (8001260 <main+0x248>)
 80010fe:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8001102:	639a      	str	r2, [r3, #56]	; 0x38
=======
 8000fd8:	4b61      	ldr	r3, [pc, #388]	; (8001160 <main+0x220>)
 8000fda:	f06f 0263 	mvn.w	r2, #99	; 0x63
 8000fde:	639a      	str	r2, [r3, #56]	; 0x38

	//float a = 1.0;
	pid_init(&pendulum_pid, 40.f, 2.f, 30.f, 100);
 8000fe0:	2164      	movs	r1, #100	; 0x64
 8000fe2:	eeb3 1a0e 	vmov.f32	s2, #62	; 0x41f00000  30.0
 8000fe6:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000fea:	ed9f 0a5f 	vldr	s0, [pc, #380]	; 8001168 <main+0x228>
 8000fee:	485f      	ldr	r0, [pc, #380]	; (800116c <main+0x22c>)
 8000ff0:	f000 fb99 	bl	8001726 <pid_init>
	pendulum_pid.p_max = 4095;
 8000ff4:	4b5d      	ldr	r3, [pc, #372]	; (800116c <main+0x22c>)
 8000ff6:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000ffa:	60da      	str	r2, [r3, #12]
	pendulum_pid.p_min = -4095;
 8000ffc:	4b5b      	ldr	r3, [pc, #364]	; (800116c <main+0x22c>)
 8000ffe:	4a59      	ldr	r2, [pc, #356]	; (8001164 <main+0x224>)
 8001000:	619a      	str	r2, [r3, #24]
	pendulum_pid.i_max = 4095;
 8001002:	4b5a      	ldr	r3, [pc, #360]	; (800116c <main+0x22c>)
 8001004:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001008:	611a      	str	r2, [r3, #16]
	pendulum_pid.i_min = -4095;
 800100a:	4b58      	ldr	r3, [pc, #352]	; (800116c <main+0x22c>)
 800100c:	4a55      	ldr	r2, [pc, #340]	; (8001164 <main+0x224>)
 800100e:	61da      	str	r2, [r3, #28]
	pendulum_pid.d_max = 4095;
 8001010:	4b56      	ldr	r3, [pc, #344]	; (800116c <main+0x22c>)
 8001012:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001016:	615a      	str	r2, [r3, #20]
	pendulum_pid.d_min = -4095;
 8001018:	4b54      	ldr	r3, [pc, #336]	; (800116c <main+0x22c>)
 800101a:	4a52      	ldr	r2, [pc, #328]	; (8001164 <main+0x224>)
 800101c:	621a      	str	r2, [r3, #32]
	pendulum_pid.total_max = 100;
 800101e:	4b53      	ldr	r3, [pc, #332]	; (800116c <main+0x22c>)
 8001020:	2264      	movs	r2, #100	; 0x64
 8001022:	635a      	str	r2, [r3, #52]	; 0x34
	pendulum_pid.total_min = -100;
 8001024:	4b51      	ldr	r3, [pc, #324]	; (800116c <main+0x22c>)
 8001026:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800102a:	639a      	str	r2, [r3, #56]	; 0x38
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(START_POSITION_FLAG){
<<<<<<< HEAD
 8001104:	4b57      	ldr	r3, [pc, #348]	; (8001264 <main+0x24c>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d007      	beq.n	800111c <main+0x104>
=======
 800102c:	4b50      	ldr	r3, [pc, #320]	; (8001170 <main+0x230>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <main+0x104>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
		  motor_stop();
 8001034:	f7ff ff46 	bl	8000ec4 <motor_stop>
//		  FLAG_READY=1;
		  TIM1->CNT=0;
<<<<<<< HEAD
 8001110:	4b55      	ldr	r3, [pc, #340]	; (8001268 <main+0x250>)
 8001112:	2200      	movs	r2, #0
 8001114:	625a      	str	r2, [r3, #36]	; 0x24
		 // HAL_Delay(2000);
		  START_POSITION_FLAG=0;
 8001116:	4b53      	ldr	r3, [pc, #332]	; (8001264 <main+0x24c>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
=======
 8001038:	4b4e      	ldr	r3, [pc, #312]	; (8001174 <main+0x234>)
 800103a:	2200      	movs	r2, #0
 800103c:	625a      	str	r2, [r3, #36]	; 0x24
		 // HAL_Delay(2000);
		  START_POSITION_FLAG=0;
 800103e:	4b4c      	ldr	r3, [pc, #304]	; (8001170 <main+0x230>)
 8001040:	2200      	movs	r2, #0
 8001042:	701a      	strb	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
		 // TIM3->CNT = 0;
	  }

	  pendulum_pulse_count = TIM3->CNT;
<<<<<<< HEAD
 800111c:	4b53      	ldr	r3, [pc, #332]	; (800126c <main+0x254>)
 800111e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001120:	b21a      	sxth	r2, r3
 8001122:	4b53      	ldr	r3, [pc, #332]	; (8001270 <main+0x258>)
 8001124:	801a      	strh	r2, [r3, #0]
	  pendulum_degree = pendulum_pulse_count*360.0/800.0;
 8001126:	4b52      	ldr	r3, [pc, #328]	; (8001270 <main+0x258>)
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff f99d 	bl	800046c <__aeabi_i2d>
 8001132:	f04f 0200 	mov.w	r2, #0
 8001136:	4b4f      	ldr	r3, [pc, #316]	; (8001274 <main+0x25c>)
 8001138:	f7ff fa02 	bl	8000540 <__aeabi_dmul>
 800113c:	4603      	mov	r3, r0
 800113e:	460c      	mov	r4, r1
 8001140:	4618      	mov	r0, r3
 8001142:	4621      	mov	r1, r4
 8001144:	f04f 0200 	mov.w	r2, #0
 8001148:	4b4b      	ldr	r3, [pc, #300]	; (8001278 <main+0x260>)
 800114a:	f7ff fb23 	bl	8000794 <__aeabi_ddiv>
 800114e:	4603      	mov	r3, r0
 8001150:	460c      	mov	r4, r1
 8001152:	4618      	mov	r0, r3
 8001154:	4621      	mov	r1, r4
 8001156:	f7ff fc2d 	bl	80009b4 <__aeabi_d2f>
 800115a:	4602      	mov	r2, r0
 800115c:	4b47      	ldr	r3, [pc, #284]	; (800127c <main+0x264>)
 800115e:	601a      	str	r2, [r3, #0]

	  motor_pulse_count = TIM1->CNT;
 8001160:	4b41      	ldr	r3, [pc, #260]	; (8001268 <main+0x250>)
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b46      	ldr	r3, [pc, #280]	; (8001280 <main+0x268>)
 8001168:	801a      	strh	r2, [r3, #0]
	  cart_position = motor_pulse_count*POSITION_RATIO;
 800116a:	4b45      	ldr	r3, [pc, #276]	; (8001280 <main+0x268>)
 800116c:	881b      	ldrh	r3, [r3, #0]
 800116e:	b21b      	sxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f7ff f97b 	bl	800046c <__aeabi_i2d>
 8001176:	a32e      	add	r3, pc, #184	; (adr r3, 8001230 <main+0x218>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	f7ff f9e0 	bl	8000540 <__aeabi_dmul>
 8001180:	4603      	mov	r3, r0
 8001182:	460c      	mov	r4, r1
 8001184:	4618      	mov	r0, r3
 8001186:	4621      	mov	r1, r4
 8001188:	f7ff fbec 	bl	8000964 <__aeabi_d2iz>
 800118c:	4603      	mov	r3, r0
 800118e:	b21a      	sxth	r2, r3
 8001190:	4b3c      	ldr	r3, [pc, #240]	; (8001284 <main+0x26c>)
 8001192:	801a      	strh	r2, [r3, #0]

	  if(LED_FLAG){
 8001194:	4b3c      	ldr	r3, [pc, #240]	; (8001288 <main+0x270>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	2b00      	cmp	r3, #0
 800119a:	d007      	beq.n	80011ac <main+0x194>
		  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800119c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80011a0:	483a      	ldr	r0, [pc, #232]	; (800128c <main+0x274>)
 80011a2:	f001 fd2e 	bl	8002c02 <HAL_GPIO_TogglePin>
		  LED_FLAG = 0;
 80011a6:	4b38      	ldr	r3, [pc, #224]	; (8001288 <main+0x270>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	701a      	strb	r2, [r3, #0]
	  }
	  if(FLAG_READY){
 80011ac:	4b38      	ldr	r3, [pc, #224]	; (8001290 <main+0x278>)
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d023      	beq.n	80011fc <main+0x1e4>
		  if(PID_FLAG){
 80011b4:	4b37      	ldr	r3, [pc, #220]	; (8001294 <main+0x27c>)
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d01f      	beq.n	80011fc <main+0x1e4>
			  filter = alfa_beta();
 80011bc:	f7ff febe 	bl	8000f3c <alfa_beta>
 80011c0:	4603      	mov	r3, r0
 80011c2:	ee07 3a90 	vmov	s15, r3
 80011c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ca:	4b33      	ldr	r3, [pc, #204]	; (8001298 <main+0x280>)
 80011cc:	edc3 7a00 	vstr	s15, [r3]
			  pendulum_pid_controll = -pid_calc(&pendulum_pid, pendulum_pulse_count, 400);
 80011d0:	4b27      	ldr	r3, [pc, #156]	; (8001270 <main+0x258>)
 80011d2:	881b      	ldrh	r3, [r3, #0]
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80011da:	4619      	mov	r1, r3
 80011dc:	4820      	ldr	r0, [pc, #128]	; (8001260 <main+0x248>)
 80011de:	f000 fb71 	bl	80018c4 <pid_calc>
 80011e2:	4603      	mov	r3, r0
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	425b      	negs	r3, r3
 80011e8:	b29b      	uxth	r3, r3
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <main+0x284>)
 80011ee:	801a      	strh	r2, [r3, #0]
			  motor_speed(pendulum_pid_controll);
 80011f0:	4b2a      	ldr	r3, [pc, #168]	; (800129c <main+0x284>)
 80011f2:	881b      	ldrh	r3, [r3, #0]
 80011f4:	b21b      	sxth	r3, r3
 80011f6:	4618      	mov	r0, r3
 80011f8:	f7ff fde8 	bl	8000dcc <motor_speed>
=======
 8001044:	4b4c      	ldr	r3, [pc, #304]	; (8001178 <main+0x238>)
 8001046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001048:	b21a      	sxth	r2, r3
 800104a:	4b4c      	ldr	r3, [pc, #304]	; (800117c <main+0x23c>)
 800104c:	801a      	strh	r2, [r3, #0]
	  pendulum_degree = pendulum_pulse_count*360.0/800.0;
 800104e:	4b4b      	ldr	r3, [pc, #300]	; (800117c <main+0x23c>)
 8001050:	881b      	ldrh	r3, [r3, #0]
 8001052:	b21b      	sxth	r3, r3
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fa09 	bl	800046c <__aeabi_i2d>
 800105a:	f04f 0200 	mov.w	r2, #0
 800105e:	4b48      	ldr	r3, [pc, #288]	; (8001180 <main+0x240>)
 8001060:	f7ff fa6e 	bl	8000540 <__aeabi_dmul>
 8001064:	4603      	mov	r3, r0
 8001066:	460c      	mov	r4, r1
 8001068:	4618      	mov	r0, r3
 800106a:	4621      	mov	r1, r4
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	4b44      	ldr	r3, [pc, #272]	; (8001184 <main+0x244>)
 8001072:	f7ff fb8f 	bl	8000794 <__aeabi_ddiv>
 8001076:	4603      	mov	r3, r0
 8001078:	460c      	mov	r4, r1
 800107a:	4618      	mov	r0, r3
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff fc99 	bl	80009b4 <__aeabi_d2f>
 8001082:	4602      	mov	r2, r0
 8001084:	4b40      	ldr	r3, [pc, #256]	; (8001188 <main+0x248>)
 8001086:	601a      	str	r2, [r3, #0]

	  motor_pulse_count = TIM1->CNT;
 8001088:	4b3a      	ldr	r3, [pc, #232]	; (8001174 <main+0x234>)
 800108a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800108c:	b21a      	sxth	r2, r3
 800108e:	4b3f      	ldr	r3, [pc, #252]	; (800118c <main+0x24c>)
 8001090:	801a      	strh	r2, [r3, #0]
	  cart_position = motor_pulse_count*POSITION_RATIO;
 8001092:	4b3e      	ldr	r3, [pc, #248]	; (800118c <main+0x24c>)
 8001094:	881b      	ldrh	r3, [r3, #0]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4618      	mov	r0, r3
 800109a:	f7ff f9e7 	bl	800046c <__aeabi_i2d>
 800109e:	a328      	add	r3, pc, #160	; (adr r3, 8001140 <main+0x200>)
 80010a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010a4:	f7ff fa4c 	bl	8000540 <__aeabi_dmul>
 80010a8:	4603      	mov	r3, r0
 80010aa:	460c      	mov	r4, r1
 80010ac:	4618      	mov	r0, r3
 80010ae:	4621      	mov	r1, r4
 80010b0:	f7ff fc58 	bl	8000964 <__aeabi_d2iz>
 80010b4:	4603      	mov	r3, r0
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	4b35      	ldr	r3, [pc, #212]	; (8001190 <main+0x250>)
 80010ba:	801a      	strh	r2, [r3, #0]

	  if(LED_FLAG){
 80010bc:	4b35      	ldr	r3, [pc, #212]	; (8001194 <main+0x254>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d007      	beq.n	80010d4 <main+0x194>
		  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 80010c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010c8:	4833      	ldr	r0, [pc, #204]	; (8001198 <main+0x258>)
 80010ca:	f001 fd16 	bl	8002afa <HAL_GPIO_TogglePin>
		  LED_FLAG = 0;
 80010ce:	4b31      	ldr	r3, [pc, #196]	; (8001194 <main+0x254>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
	  }
	  if(PID_FLAG){
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <main+0x25c>)
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d019      	beq.n	8001110 <main+0x1d0>
		  //filter = alfa_beta();
		  if(FLAG_READY){
 80010dc:	4b30      	ldr	r3, [pc, #192]	; (80011a0 <main+0x260>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d015      	beq.n	8001110 <main+0x1d0>
			  pendulum_pid_controll = -pid_calc(&pendulum_pid, pendulum_pulse_count, 400);
 80010e4:	4b25      	ldr	r3, [pc, #148]	; (800117c <main+0x23c>)
 80010e6:	881b      	ldrh	r3, [r3, #0]
 80010e8:	b21b      	sxth	r3, r3
 80010ea:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80010ee:	4619      	mov	r1, r3
 80010f0:	481e      	ldr	r0, [pc, #120]	; (800116c <main+0x22c>)
 80010f2:	f000 fb6b 	bl	80017cc <pid_calc>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29b      	uxth	r3, r3
 80010fa:	425b      	negs	r3, r3
 80010fc:	b29b      	uxth	r3, r3
 80010fe:	b21a      	sxth	r2, r3
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <main+0x264>)
 8001102:	801a      	strh	r2, [r3, #0]
			  //HAL_Delay(5);
			  motor_speed(pendulum_pid_controll);
 8001104:	4b27      	ldr	r3, [pc, #156]	; (80011a4 <main+0x264>)
 8001106:	881b      	ldrh	r3, [r3, #0]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe5e 	bl	8000dcc <motor_speed>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
//			  motor_pid_controll = pid_calc(&motor_pid, cart_position, 216);
//			  motor_speed(motor_pid_controll);
//		  }
	  }

	  if(START_BALANCING){
<<<<<<< HEAD
 80011fc:	4b28      	ldr	r3, [pc, #160]	; (80012a0 <main+0x288>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	f43f af7f 	beq.w	8001104 <main+0xec>
		  HAL_Delay(50);
 8001206:	2032      	movs	r0, #50	; 0x32
 8001208:	f000 fea6 	bl	8001f58 <HAL_Delay>
		  if(!FLAG_READY) FLAG_READY=1;
 800120c:	4b20      	ldr	r3, [pc, #128]	; (8001290 <main+0x278>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d103      	bne.n	800121c <main+0x204>
 8001214:	4b1e      	ldr	r3, [pc, #120]	; (8001290 <main+0x278>)
 8001216:	2201      	movs	r2, #1
 8001218:	701a      	strb	r2, [r3, #0]
 800121a:	e004      	b.n	8001226 <main+0x20e>
		  else{
			  FLAG_READY=0;
 800121c:	4b1c      	ldr	r3, [pc, #112]	; (8001290 <main+0x278>)
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
=======
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <main+0x268>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d089      	beq.n	800102c <main+0xec>
		  HAL_Delay(50);
 8001118:	2032      	movs	r0, #50	; 0x32
 800111a:	f000 fe99 	bl	8001e50 <HAL_Delay>
		  if(!FLAG_READY) FLAG_READY=1;
 800111e:	4b20      	ldr	r3, [pc, #128]	; (80011a0 <main+0x260>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d103      	bne.n	800112e <main+0x1ee>
 8001126:	4b1e      	ldr	r3, [pc, #120]	; (80011a0 <main+0x260>)
 8001128:	2201      	movs	r2, #1
 800112a:	701a      	strb	r2, [r3, #0]
 800112c:	e004      	b.n	8001138 <main+0x1f8>
		  else{
			  FLAG_READY=0;
 800112e:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <main+0x260>)
 8001130:	2200      	movs	r2, #0
 8001132:	701a      	strb	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
			  motor_stop();
 8001134:	f7ff fec6 	bl	8000ec4 <motor_stop>
		  }
		  START_BALANCING=0;
<<<<<<< HEAD
 8001226:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <main+0x288>)
 8001228:	2200      	movs	r2, #0
 800122a:	701a      	strb	r2, [r3, #0]
	  if(START_POSITION_FLAG){
 800122c:	e76a      	b.n	8001104 <main+0xec>
 800122e:	bf00      	nop
 8001230:	9999999a 	.word	0x9999999a
 8001234:	3fc99999 	.word	0x3fc99999
 8001238:	200001d0 	.word	0x200001d0
 800123c:	20000150 	.word	0x20000150
 8001240:	200000cc 	.word	0x200000cc
 8001244:	20000190 	.word	0x20000190
 8001248:	20000034 	.word	0x20000034
 800124c:	2000008c 	.word	0x2000008c
 8001250:	2000010c 	.word	0x2000010c
 8001254:	fffff001 	.word	0xfffff001
 8001258:	00000000 	.word	0x00000000
 800125c:	428c0000 	.word	0x428c0000
 8001260:	20000048 	.word	0x20000048
 8001264:	20000028 	.word	0x20000028
 8001268:	40010000 	.word	0x40010000
 800126c:	40000400 	.word	0x40000400
 8001270:	2000002a 	.word	0x2000002a
 8001274:	40768000 	.word	0x40768000
 8001278:	40890000 	.word	0x40890000
 800127c:	2000002c 	.word	0x2000002c
 8001280:	20000030 	.word	0x20000030
 8001284:	20000032 	.word	0x20000032
 8001288:	20000036 	.word	0x20000036
 800128c:	40020c00 	.word	0x40020c00
 8001290:	20000037 	.word	0x20000037
 8001294:	20000038 	.word	0x20000038
 8001298:	2000003c 	.word	0x2000003c
 800129c:	2000003a 	.word	0x2000003a
 80012a0:	20000029 	.word	0x20000029

080012a4 <SystemClock_Config>:
=======
 8001138:	4b1b      	ldr	r3, [pc, #108]	; (80011a8 <main+0x268>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
	  if(START_POSITION_FLAG){
 800113e:	e775      	b.n	800102c <main+0xec>
 8001140:	9999999a 	.word	0x9999999a
 8001144:	3fc99999 	.word	0x3fc99999
 8001148:	200001c4 	.word	0x200001c4
 800114c:	20000144 	.word	0x20000144
 8001150:	200000c0 	.word	0x200000c0
 8001154:	20000184 	.word	0x20000184
 8001158:	20000034 	.word	0x20000034
 800115c:	20000080 	.word	0x20000080
 8001160:	20000100 	.word	0x20000100
 8001164:	fffff001 	.word	0xfffff001
 8001168:	42200000 	.word	0x42200000
 800116c:	2000003c 	.word	0x2000003c
 8001170:	20000028 	.word	0x20000028
 8001174:	40010000 	.word	0x40010000
 8001178:	40000400 	.word	0x40000400
 800117c:	2000002a 	.word	0x2000002a
 8001180:	40768000 	.word	0x40768000
 8001184:	40890000 	.word	0x40890000
 8001188:	2000002c 	.word	0x2000002c
 800118c:	20000030 	.word	0x20000030
 8001190:	20000032 	.word	0x20000032
 8001194:	20000036 	.word	0x20000036
 8001198:	40020c00 	.word	0x40020c00
 800119c:	20000038 	.word	0x20000038
 80011a0:	20000037 	.word	0x20000037
 80011a4:	2000003a 	.word	0x2000003a
 80011a8:	20000029 	.word	0x20000029

080011ac <SystemClock_Config>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
<<<<<<< HEAD
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b094      	sub	sp, #80	; 0x50
 80012a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	2230      	movs	r2, #48	; 0x30
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f003 fa48 	bl	8004748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012b8:	f107 030c 	add.w	r3, r7, #12
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]
 80012c4:	60da      	str	r2, [r3, #12]
 80012c6:	611a      	str	r2, [r3, #16]
=======
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b094      	sub	sp, #80	; 0x50
 80011b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011b2:	f107 0320 	add.w	r3, r7, #32
 80011b6:	2230      	movs	r2, #48	; 0x30
 80011b8:	2100      	movs	r1, #0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f003 fa40 	bl	8004640 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
<<<<<<< HEAD
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	4b28      	ldr	r3, [pc, #160]	; (8001370 <SystemClock_Config+0xcc>)
 80012ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012d0:	4a27      	ldr	r2, [pc, #156]	; (8001370 <SystemClock_Config+0xcc>)
 80012d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d6:	6413      	str	r3, [r2, #64]	; 0x40
 80012d8:	4b25      	ldr	r3, [pc, #148]	; (8001370 <SystemClock_Config+0xcc>)
 80012da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e0:	60bb      	str	r3, [r7, #8]
 80012e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e4:	2300      	movs	r3, #0
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	4b22      	ldr	r3, [pc, #136]	; (8001374 <SystemClock_Config+0xd0>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a21      	ldr	r2, [pc, #132]	; (8001374 <SystemClock_Config+0xd0>)
 80012ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012f2:	6013      	str	r3, [r2, #0]
 80012f4:	4b1f      	ldr	r3, [pc, #124]	; (8001374 <SystemClock_Config+0xd0>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012fc:	607b      	str	r3, [r7, #4]
 80012fe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001300:	2301      	movs	r3, #1
 8001302:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130a:	2302      	movs	r3, #2
 800130c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800130e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001312:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001314:	2319      	movs	r3, #25
 8001316:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001318:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800131c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800131e:	2304      	movs	r3, #4
 8001320:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001322:	2304      	movs	r3, #4
 8001324:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001326:	f107 0320 	add.w	r3, r7, #32
 800132a:	4618      	mov	r0, r3
 800132c:	f001 fc9c 	bl	8002c68 <HAL_RCC_OscConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001336:	f000 fa6b 	bl	8001810 <Error_Handler>
=======
 80011d0:	2300      	movs	r3, #0
 80011d2:	60bb      	str	r3, [r7, #8]
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <SystemClock_Config+0xcc>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a27      	ldr	r2, [pc, #156]	; (8001278 <SystemClock_Config+0xcc>)
 80011da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <SystemClock_Config+0xcc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e8:	60bb      	str	r3, [r7, #8]
 80011ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ec:	2300      	movs	r3, #0
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	4b22      	ldr	r3, [pc, #136]	; (800127c <SystemClock_Config+0xd0>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a21      	ldr	r2, [pc, #132]	; (800127c <SystemClock_Config+0xd0>)
 80011f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011fa:	6013      	str	r3, [r2, #0]
 80011fc:	4b1f      	ldr	r3, [pc, #124]	; (800127c <SystemClock_Config+0xd0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001204:	607b      	str	r3, [r7, #4]
 8001206:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001208:	2301      	movs	r3, #1
 800120a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800120c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001212:	2302      	movs	r3, #2
 8001214:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001216:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800121a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800121c:	2319      	movs	r3, #25
 800121e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001220:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001224:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001226:	2304      	movs	r3, #4
 8001228:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800122a:	2304      	movs	r3, #4
 800122c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	4618      	mov	r0, r3
 8001234:	f001 fc94 	bl	8002b60 <HAL_RCC_OscConfig>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d001      	beq.n	8001242 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800123e:	f000 fa6b 	bl	8001718 <Error_Handler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
<<<<<<< HEAD
 800133a:	230f      	movs	r3, #15
 800133c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800133e:	2302      	movs	r3, #2
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001346:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800134a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	2103      	movs	r1, #3
 8001358:	4618      	mov	r0, r3
 800135a:	f001 fef5 	bl	8003148 <HAL_RCC_ClockConfig>
 800135e:	4603      	mov	r3, r0
 8001360:	2b00      	cmp	r3, #0
 8001362:	d001      	beq.n	8001368 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001364:	f000 fa54 	bl	8001810 <Error_Handler>
  }
}
 8001368:	bf00      	nop
 800136a:	3750      	adds	r7, #80	; 0x50
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	40023800 	.word	0x40023800
 8001374:	40007000 	.word	0x40007000

08001378 <MX_TIM1_Init>:
=======
 8001242:	230f      	movs	r3, #15
 8001244:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001246:	2302      	movs	r3, #2
 8001248:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800124a:	2300      	movs	r3, #0
 800124c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800124e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001252:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001254:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001258:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	2103      	movs	r1, #3
 8001260:	4618      	mov	r0, r3
 8001262:	f001 feed 	bl	8003040 <HAL_RCC_ClockConfig>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800126c:	f000 fa54 	bl	8001718 <Error_Handler>
  }
}
 8001270:	bf00      	nop
 8001272:	3750      	adds	r7, #80	; 0x50
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40023800 	.word	0x40023800
 800127c:	40007000 	.word	0x40007000

08001280 <MX_TIM1_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
<<<<<<< HEAD
 8001378:	b580      	push	{r7, lr}
 800137a:	b08c      	sub	sp, #48	; 0x30
 800137c:	af00      	add	r7, sp, #0
=======
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 800137e:	f107 030c 	add.w	r3, r7, #12
 8001382:	2224      	movs	r2, #36	; 0x24
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f003 f9de 	bl	8004748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
=======
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2224      	movs	r2, #36	; 0x24
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f003 f9d6 	bl	8004640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
<<<<<<< HEAD
 8001394:	4b22      	ldr	r3, [pc, #136]	; (8001420 <MX_TIM1_Init+0xa8>)
 8001396:	4a23      	ldr	r2, [pc, #140]	; (8001424 <MX_TIM1_Init+0xac>)
 8001398:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800139a:	4b21      	ldr	r3, [pc, #132]	; (8001420 <MX_TIM1_Init+0xa8>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a0:	4b1f      	ldr	r3, [pc, #124]	; (8001420 <MX_TIM1_Init+0xa8>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <MX_TIM1_Init+0xa8>)
 80013a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ae:	4b1c      	ldr	r3, [pc, #112]	; (8001420 <MX_TIM1_Init+0xa8>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013b4:	4b1a      	ldr	r3, [pc, #104]	; (8001420 <MX_TIM1_Init+0xa8>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <MX_TIM1_Init+0xa8>)
 80013bc:	2200      	movs	r2, #0
 80013be:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013c0:	2303      	movs	r3, #3
 80013c2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c8:	2301      	movs	r3, #1
 80013ca:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013cc:	2300      	movs	r3, #0
 80013ce:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013d0:	230a      	movs	r3, #10
 80013d2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d8:	2301      	movs	r3, #1
 80013da:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013dc:	2300      	movs	r3, #0
 80013de:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80013e0:	230a      	movs	r3, #10
 80013e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4619      	mov	r1, r3
 80013ea:	480d      	ldr	r0, [pc, #52]	; (8001420 <MX_TIM1_Init+0xa8>)
 80013ec:	f002 f9da 	bl	80037a4 <HAL_TIM_Encoder_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80013f6:	f000 fa0b 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013fa:	2300      	movs	r3, #0
 80013fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	4619      	mov	r1, r3
 8001406:	4806      	ldr	r0, [pc, #24]	; (8001420 <MX_TIM1_Init+0xa8>)
 8001408:	f003 f8ea 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001412:	f000 f9fd 	bl	8001810 <Error_Handler>
=======
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_TIM1_Init+0xa8>)
 800129e:	4a23      	ldr	r2, [pc, #140]	; (800132c <MX_TIM1_Init+0xac>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012c8:	2303      	movs	r3, #3
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80012d8:	230a      	movs	r3, #10
 80012da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80012e8:	230a      	movs	r3, #10
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012f4:	f002 f9d2 	bl	800369c <HAL_TIM_Encoder_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80012fe:	f000 fa0b 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_TIM1_Init+0xa8>)
 8001310:	f003 f8e2 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800131a:	f000 f9fd 	bl	8001718 <Error_Handler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
<<<<<<< HEAD
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	; 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	200001d0 	.word	0x200001d0
 8001424:	40010000 	.word	0x40010000

08001428 <MX_TIM3_Init>:
=======
 800131e:	bf00      	nop
 8001320:	3730      	adds	r7, #48	; 0x30
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	200001c4 	.word	0x200001c4
 800132c:	40010000 	.word	0x40010000

08001330 <MX_TIM3_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
<<<<<<< HEAD
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0
=======
 8001330:	b580      	push	{r7, lr}
 8001332:	b08c      	sub	sp, #48	; 0x30
 8001334:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
<<<<<<< HEAD
 800142e:	f107 030c 	add.w	r3, r7, #12
 8001432:	2224      	movs	r2, #36	; 0x24
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f003 f986 	bl	8004748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
=======
 8001336:	f107 030c 	add.w	r3, r7, #12
 800133a:	2224      	movs	r2, #36	; 0x24
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f003 f97e 	bl	8004640 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
<<<<<<< HEAD
 8001444:	4b20      	ldr	r3, [pc, #128]	; (80014c8 <MX_TIM3_Init+0xa0>)
 8001446:	4a21      	ldr	r2, [pc, #132]	; (80014cc <MX_TIM3_Init+0xa4>)
 8001448:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800144a:	4b1f      	ldr	r3, [pc, #124]	; (80014c8 <MX_TIM3_Init+0xa0>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001450:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <MX_TIM3_Init+0xa0>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001456:	4b1c      	ldr	r3, [pc, #112]	; (80014c8 <MX_TIM3_Init+0xa0>)
 8001458:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800145c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800145e:	4b1a      	ldr	r3, [pc, #104]	; (80014c8 <MX_TIM3_Init+0xa0>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001464:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <MX_TIM3_Init+0xa0>)
 8001466:	2200      	movs	r2, #0
 8001468:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 800146a:	2301      	movs	r3, #1
 800146c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001472:	2301      	movs	r3, #1
 8001474:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001476:	2300      	movs	r3, #0
 8001478:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001482:	2301      	movs	r3, #1
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001486:	2300      	movs	r3, #0
 8001488:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800148e:	f107 030c 	add.w	r3, r7, #12
 8001492:	4619      	mov	r1, r3
 8001494:	480c      	ldr	r0, [pc, #48]	; (80014c8 <MX_TIM3_Init+0xa0>)
 8001496:	f002 f985 	bl	80037a4 <HAL_TIM_Encoder_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014a0:	f000 f9b6 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014a4:	2300      	movs	r3, #0
 80014a6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	4619      	mov	r1, r3
 80014b0:	4805      	ldr	r0, [pc, #20]	; (80014c8 <MX_TIM3_Init+0xa0>)
 80014b2:	f003 f895 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014bc:	f000 f9a8 	bl	8001810 <Error_Handler>
=======
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_TIM3_Init+0xa0>)
 800134e:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <MX_TIM3_Init+0xa4>)
 8001350:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_TIM3_Init+0xa0>)
 8001354:	2200      	movs	r2, #0
 8001356:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_TIM3_Init+0xa0>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_TIM3_Init+0xa0>)
 8001360:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001364:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001366:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_TIM3_Init+0xa0>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_TIM3_Init+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001372:	2301      	movs	r3, #1
 8001374:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800137a:	2301      	movs	r3, #1
 800137c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800137e:	2300      	movs	r3, #0
 8001380:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001382:	2300      	movs	r3, #0
 8001384:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001386:	2300      	movs	r3, #0
 8001388:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800138a:	2301      	movs	r3, #1
 800138c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800138e:	2300      	movs	r3, #0
 8001390:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4619      	mov	r1, r3
 800139c:	480c      	ldr	r0, [pc, #48]	; (80013d0 <MX_TIM3_Init+0xa0>)
 800139e:	f002 f97d 	bl	800369c <HAL_TIM_Encoder_Init>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80013a8:	f000 f9b6 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ac:	2300      	movs	r3, #0
 80013ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b0:	2300      	movs	r3, #0
 80013b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80013b4:	1d3b      	adds	r3, r7, #4
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_TIM3_Init+0xa0>)
 80013ba:	f003 f88d 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80013c4:	f000 f9a8 	bl	8001718 <Error_Handler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
<<<<<<< HEAD
 80014c0:	bf00      	nop
 80014c2:	3730      	adds	r7, #48	; 0x30
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20000150 	.word	0x20000150
 80014cc:	40000400 	.word	0x40000400

080014d0 <MX_TIM4_Init>:
=======
 80013c8:	bf00      	nop
 80013ca:	3730      	adds	r7, #48	; 0x30
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000144 	.word	0x20000144
 80013d4:	40000400 	.word	0x40000400

080013d8 <MX_TIM4_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
<<<<<<< HEAD
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08e      	sub	sp, #56	; 0x38
 80014d4:	af00      	add	r7, sp, #0
=======
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
<<<<<<< HEAD
 80014d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	f107 0320 	add.w	r3, r7, #32
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
 80014ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ee:	1d3b      	adds	r3, r7, #4
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
 80014fc:	615a      	str	r2, [r3, #20]
 80014fe:	619a      	str	r2, [r3, #24]
=======
 80013de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ec:	f107 0320 	add.w	r3, r7, #32
 80013f0:	2200      	movs	r2, #0
 80013f2:	601a      	str	r2, [r3, #0]
 80013f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f6:	1d3b      	adds	r3, r7, #4
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
 80013fe:	609a      	str	r2, [r3, #8]
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	611a      	str	r2, [r3, #16]
 8001404:	615a      	str	r2, [r3, #20]
 8001406:	619a      	str	r2, [r3, #24]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
<<<<<<< HEAD
 8001500:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001502:	4a2d      	ldr	r2, [pc, #180]	; (80015b8 <MX_TIM4_Init+0xe8>)
 8001504:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001508:	22f9      	movs	r2, #249	; 0xf9
 800150a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800150c:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <MX_TIM4_Init+0xe4>)
 800150e:	2200      	movs	r2, #0
 8001510:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001512:	4b28      	ldr	r3, [pc, #160]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001514:	2263      	movs	r2, #99	; 0x63
 8001516:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001518:	4b26      	ldr	r3, [pc, #152]	; (80015b4 <MX_TIM4_Init+0xe4>)
 800151a:	2200      	movs	r2, #0
 800151c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800151e:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001524:	4823      	ldr	r0, [pc, #140]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001526:	f001 ffa7 	bl	8003478 <HAL_TIM_Base_Init>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001530:	f000 f96e 	bl	8001810 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800153a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800153e:	4619      	mov	r1, r3
 8001540:	481c      	ldr	r0, [pc, #112]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001542:	f002 fbc7 	bl	8003cd4 <HAL_TIM_ConfigClockSource>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 800154c:	f000 f960 	bl	8001810 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001550:	4818      	ldr	r0, [pc, #96]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001552:	f001 ffe0 	bl	8003516 <HAL_TIM_PWM_Init>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 800155c:	f000 f958 	bl	8001810 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001560:	2300      	movs	r3, #0
 8001562:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001568:	f107 0320 	add.w	r3, r7, #32
 800156c:	4619      	mov	r1, r3
 800156e:	4811      	ldr	r0, [pc, #68]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001570:	f003 f836 	bl	80045e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800157a:	f000 f949 	bl	8001810 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800157e:	2360      	movs	r3, #96	; 0x60
 8001580:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	2200      	movs	r2, #0
 8001592:	4619      	mov	r1, r3
 8001594:	4807      	ldr	r0, [pc, #28]	; (80015b4 <MX_TIM4_Init+0xe4>)
 8001596:	f002 fad7 	bl	8003b48 <HAL_TIM_PWM_ConfigChannel>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80015a0:	f000 f936 	bl	8001810 <Error_Handler>
=======
 8001408:	4b2c      	ldr	r3, [pc, #176]	; (80014bc <MX_TIM4_Init+0xe4>)
 800140a:	4a2d      	ldr	r2, [pc, #180]	; (80014c0 <MX_TIM4_Init+0xe8>)
 800140c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 800140e:	4b2b      	ldr	r3, [pc, #172]	; (80014bc <MX_TIM4_Init+0xe4>)
 8001410:	22f9      	movs	r2, #249	; 0xf9
 8001412:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001414:	4b29      	ldr	r3, [pc, #164]	; (80014bc <MX_TIM4_Init+0xe4>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 800141a:	4b28      	ldr	r3, [pc, #160]	; (80014bc <MX_TIM4_Init+0xe4>)
 800141c:	2263      	movs	r2, #99	; 0x63
 800141e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001420:	4b26      	ldr	r3, [pc, #152]	; (80014bc <MX_TIM4_Init+0xe4>)
 8001422:	2200      	movs	r2, #0
 8001424:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001426:	4b25      	ldr	r3, [pc, #148]	; (80014bc <MX_TIM4_Init+0xe4>)
 8001428:	2200      	movs	r2, #0
 800142a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800142c:	4823      	ldr	r0, [pc, #140]	; (80014bc <MX_TIM4_Init+0xe4>)
 800142e:	f001 ff9f 	bl	8003370 <HAL_TIM_Base_Init>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001438:	f000 f96e 	bl	8001718 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001440:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001442:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001446:	4619      	mov	r1, r3
 8001448:	481c      	ldr	r0, [pc, #112]	; (80014bc <MX_TIM4_Init+0xe4>)
 800144a:	f002 fbbf 	bl	8003bcc <HAL_TIM_ConfigClockSource>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	d001      	beq.n	8001458 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001454:	f000 f960 	bl	8001718 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001458:	4818      	ldr	r0, [pc, #96]	; (80014bc <MX_TIM4_Init+0xe4>)
 800145a:	f001 ffd8 	bl	800340e <HAL_TIM_PWM_Init>
 800145e:	4603      	mov	r3, r0
 8001460:	2b00      	cmp	r3, #0
 8001462:	d001      	beq.n	8001468 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001464:	f000 f958 	bl	8001718 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001468:	2300      	movs	r3, #0
 800146a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001470:	f107 0320 	add.w	r3, r7, #32
 8001474:	4619      	mov	r1, r3
 8001476:	4811      	ldr	r0, [pc, #68]	; (80014bc <MX_TIM4_Init+0xe4>)
 8001478:	f003 f82e 	bl	80044d8 <HAL_TIMEx_MasterConfigSynchronization>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001482:	f000 f949 	bl	8001718 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001486:	2360      	movs	r3, #96	; 0x60
 8001488:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800148a:	2300      	movs	r3, #0
 800148c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148e:	2300      	movs	r3, #0
 8001490:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001492:	2300      	movs	r3, #0
 8001494:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001496:	1d3b      	adds	r3, r7, #4
 8001498:	2200      	movs	r2, #0
 800149a:	4619      	mov	r1, r3
 800149c:	4807      	ldr	r0, [pc, #28]	; (80014bc <MX_TIM4_Init+0xe4>)
 800149e:	f002 facf 	bl	8003a40 <HAL_TIM_PWM_ConfigChannel>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d001      	beq.n	80014ac <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80014a8:	f000 f936 	bl	8001718 <Error_Handler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
<<<<<<< HEAD
 80015a4:	4803      	ldr	r0, [pc, #12]	; (80015b4 <MX_TIM4_Init+0xe4>)
 80015a6:	f000 fb7d 	bl	8001ca4 <HAL_TIM_MspPostInit>

}
 80015aa:	bf00      	nop
 80015ac:	3738      	adds	r7, #56	; 0x38
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	2000008c 	.word	0x2000008c
 80015b8:	40000800 	.word	0x40000800

080015bc <MX_TIM10_Init>:
=======
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <MX_TIM4_Init+0xe4>)
 80014ae:	f000 fb75 	bl	8001b9c <HAL_TIM_MspPostInit>

}
 80014b2:	bf00      	nop
 80014b4:	3738      	adds	r7, #56	; 0x38
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000080 	.word	0x20000080
 80014c0:	40000800 	.word	0x40000800

080014c4 <MX_TIM10_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
<<<<<<< HEAD
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
=======
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
<<<<<<< HEAD
 80015c0:	4b0e      	ldr	r3, [pc, #56]	; (80015fc <MX_TIM10_Init+0x40>)
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <MX_TIM10_Init+0x44>)
 80015c4:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80015c6:	4b0d      	ldr	r3, [pc, #52]	; (80015fc <MX_TIM10_Init+0x40>)
 80015c8:	f242 720f 	movw	r2, #9999	; 0x270f
 80015cc:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ce:	4b0b      	ldr	r3, [pc, #44]	; (80015fc <MX_TIM10_Init+0x40>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 80015d4:	4b09      	ldr	r3, [pc, #36]	; (80015fc <MX_TIM10_Init+0x40>)
 80015d6:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80015da:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015dc:	4b07      	ldr	r3, [pc, #28]	; (80015fc <MX_TIM10_Init+0x40>)
 80015de:	2200      	movs	r2, #0
 80015e0:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015e2:	4b06      	ldr	r3, [pc, #24]	; (80015fc <MX_TIM10_Init+0x40>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80015e8:	4804      	ldr	r0, [pc, #16]	; (80015fc <MX_TIM10_Init+0x40>)
 80015ea:	f001 ff45 	bl	8003478 <HAL_TIM_Base_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80015f4:	f000 f90c 	bl	8001810 <Error_Handler>
=======
 80014c8:	4b0e      	ldr	r3, [pc, #56]	; (8001504 <MX_TIM10_Init+0x40>)
 80014ca:	4a0f      	ldr	r2, [pc, #60]	; (8001508 <MX_TIM10_Init+0x44>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_TIM10_Init+0x40>)
 80014d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80014d4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_TIM10_Init+0x40>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_TIM10_Init+0x40>)
 80014de:	f640 12c3 	movw	r2, #2499	; 0x9c3
 80014e2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b07      	ldr	r3, [pc, #28]	; (8001504 <MX_TIM10_Init+0x40>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_TIM10_Init+0x40>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80014f0:	4804      	ldr	r0, [pc, #16]	; (8001504 <MX_TIM10_Init+0x40>)
 80014f2:	f001 ff3d 	bl	8003370 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 80014fc:	f000 f90c 	bl	8001718 <Error_Handler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
<<<<<<< HEAD
 80015f8:	bf00      	nop
 80015fa:	bd80      	pop	{r7, pc}
 80015fc:	200000cc 	.word	0x200000cc
 8001600:	40014400 	.word	0x40014400

08001604 <MX_TIM11_Init>:
=======
 8001500:	bf00      	nop
 8001502:	bd80      	pop	{r7, pc}
 8001504:	200000c0 	.word	0x200000c0
 8001508:	40014400 	.word	0x40014400

0800150c <MX_TIM11_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
<<<<<<< HEAD
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
=======
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
<<<<<<< HEAD
 8001608:	4b0e      	ldr	r3, [pc, #56]	; (8001644 <MX_TIM11_Init+0x40>)
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <MX_TIM11_Init+0x44>)
 800160c:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4999;
 800160e:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <MX_TIM11_Init+0x40>)
 8001610:	f241 3287 	movw	r2, #4999	; 0x1387
 8001614:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001616:	4b0b      	ldr	r3, [pc, #44]	; (8001644 <MX_TIM11_Init+0x40>)
 8001618:	2200      	movs	r2, #0
 800161a:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 99;
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <MX_TIM11_Init+0x40>)
 800161e:	2263      	movs	r2, #99	; 0x63
 8001620:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001622:	4b08      	ldr	r3, [pc, #32]	; (8001644 <MX_TIM11_Init+0x40>)
 8001624:	2200      	movs	r2, #0
 8001626:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001628:	4b06      	ldr	r3, [pc, #24]	; (8001644 <MX_TIM11_Init+0x40>)
 800162a:	2200      	movs	r2, #0
 800162c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800162e:	4805      	ldr	r0, [pc, #20]	; (8001644 <MX_TIM11_Init+0x40>)
 8001630:	f001 ff22 	bl	8003478 <HAL_TIM_Base_Init>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800163a:	f000 f8e9 	bl	8001810 <Error_Handler>
=======
 8001510:	4b0e      	ldr	r3, [pc, #56]	; (800154c <MX_TIM11_Init+0x40>)
 8001512:	4a0f      	ldr	r2, [pc, #60]	; (8001550 <MX_TIM11_Init+0x44>)
 8001514:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 4999;
 8001516:	4b0d      	ldr	r3, [pc, #52]	; (800154c <MX_TIM11_Init+0x40>)
 8001518:	f241 3287 	movw	r2, #4999	; 0x1387
 800151c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800151e:	4b0b      	ldr	r3, [pc, #44]	; (800154c <MX_TIM11_Init+0x40>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 999;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <MX_TIM11_Init+0x40>)
 8001526:	f240 32e7 	movw	r2, #999	; 0x3e7
 800152a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152c:	4b07      	ldr	r3, [pc, #28]	; (800154c <MX_TIM11_Init+0x40>)
 800152e:	2200      	movs	r2, #0
 8001530:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001532:	4b06      	ldr	r3, [pc, #24]	; (800154c <MX_TIM11_Init+0x40>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <MX_TIM11_Init+0x40>)
 800153a:	f001 ff19 	bl	8003370 <HAL_TIM_Base_Init>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d001      	beq.n	8001548 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001544:	f000 f8e8 	bl	8001718 <Error_Handler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
<<<<<<< HEAD
 800163e:	bf00      	nop
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	20000190 	.word	0x20000190
 8001648:	40014800 	.word	0x40014800

0800164c <MX_DMA_Init>:
=======
 8001548:	bf00      	nop
 800154a:	bd80      	pop	{r7, pc}
 800154c:	20000184 	.word	0x20000184
 8001550:	40014800 	.word	0x40014800

08001554 <MX_DMA_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
<<<<<<< HEAD
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001652:	2300      	movs	r3, #0
 8001654:	607b      	str	r3, [r7, #4]
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_DMA_Init+0x3c>)
 8001658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800165a:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <MX_DMA_Init+0x3c>)
 800165c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001660:	6313      	str	r3, [r2, #48]	; 0x30
 8001662:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_DMA_Init+0x3c>)
 8001664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800166a:	607b      	str	r3, [r7, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
=======
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <MX_DMA_Init+0x3c>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	4a0b      	ldr	r2, [pc, #44]	; (8001590 <MX_DMA_Init+0x3c>)
 8001564:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001568:	6313      	str	r3, [r2, #48]	; 0x30
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <MX_DMA_Init+0x3c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
<<<<<<< HEAD
 800166e:	2200      	movs	r2, #0
 8001670:	2100      	movs	r1, #0
 8001672:	200b      	movs	r0, #11
 8001674:	f000 fd6d 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001678:	200b      	movs	r0, #11
 800167a:	f000 fd86 	bl	800218a <HAL_NVIC_EnableIRQ>

}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800

0800168c <MX_GPIO_Init>:
=======
 8001576:	2200      	movs	r2, #0
 8001578:	2100      	movs	r1, #0
 800157a:	200b      	movs	r0, #11
 800157c:	f000 fd65 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001580:	200b      	movs	r0, #11
 8001582:	f000 fd7e 	bl	8002082 <HAL_NVIC_EnableIRQ>

}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40023800 	.word	0x40023800

08001594 <MX_GPIO_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
<<<<<<< HEAD
 800168c:	b580      	push	{r7, lr}
 800168e:	b08c      	sub	sp, #48	; 0x30
 8001690:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	2200      	movs	r2, #0
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	605a      	str	r2, [r3, #4]
 800169c:	609a      	str	r2, [r3, #8]
 800169e:	60da      	str	r2, [r3, #12]
 80016a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016a2:	2300      	movs	r3, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	4b53      	ldr	r3, [pc, #332]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	4a52      	ldr	r2, [pc, #328]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016b0:	6313      	str	r3, [r2, #48]	; 0x30
 80016b2:	4b50      	ldr	r3, [pc, #320]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016ba:	61bb      	str	r3, [r7, #24]
 80016bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	4b4c      	ldr	r3, [pc, #304]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016c6:	4a4b      	ldr	r2, [pc, #300]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016c8:	f043 0301 	orr.w	r3, r3, #1
 80016cc:	6313      	str	r3, [r2, #48]	; 0x30
 80016ce:	4b49      	ldr	r3, [pc, #292]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d2:	f003 0301 	and.w	r3, r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b45      	ldr	r3, [pc, #276]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a44      	ldr	r2, [pc, #272]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016e4:	f043 0310 	orr.w	r3, r3, #16
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b42      	ldr	r3, [pc, #264]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0310 	and.w	r3, r3, #16
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b3e      	ldr	r3, [pc, #248]	; (80017f4 <MX_GPIO_Init+0x168>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fe:	4a3d      	ldr	r2, [pc, #244]	; (80017f4 <MX_GPIO_Init+0x168>)
 8001700:	f043 0308 	orr.w	r3, r3, #8
 8001704:	6313      	str	r3, [r2, #48]	; 0x30
 8001706:	4b3b      	ldr	r3, [pc, #236]	; (80017f4 <MX_GPIO_Init+0x168>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	4b37      	ldr	r3, [pc, #220]	; (80017f4 <MX_GPIO_Init+0x168>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a36      	ldr	r2, [pc, #216]	; (80017f4 <MX_GPIO_Init+0x168>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b34      	ldr	r3, [pc, #208]	; (80017f4 <MX_GPIO_Init+0x168>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0304 	and.w	r3, r3, #4
 800172a:	60bb      	str	r3, [r7, #8]
 800172c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	4b30      	ldr	r3, [pc, #192]	; (80017f4 <MX_GPIO_Init+0x168>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	4a2f      	ldr	r2, [pc, #188]	; (80017f4 <MX_GPIO_Init+0x168>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	6313      	str	r3, [r2, #48]	; 0x30
 800173e:	4b2d      	ldr	r3, [pc, #180]	; (80017f4 <MX_GPIO_Init+0x168>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_G_Pin|LED_O_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001750:	4829      	ldr	r0, [pc, #164]	; (80017f8 <MX_GPIO_Init+0x16c>)
 8001752:	f001 fa3d 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001756:	2200      	movs	r2, #0
 8001758:	2130      	movs	r1, #48	; 0x30
 800175a:	4828      	ldr	r0, [pc, #160]	; (80017fc <MX_GPIO_Init+0x170>)
 800175c:	f001 fa38 	bl	8002bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001760:	2301      	movs	r3, #1
 8001762:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001764:	4b26      	ldr	r3, [pc, #152]	; (8001800 <MX_GPIO_Init+0x174>)
 8001766:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 800176c:	f107 031c 	add.w	r3, r7, #28
 8001770:	4619      	mov	r1, r3
 8001772:	4824      	ldr	r0, [pc, #144]	; (8001804 <MX_GPIO_Init+0x178>)
 8001774:	f001 f892 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_O_Pin LED_R_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_O_Pin|LED_R_Pin|LED_B_Pin;
 8001778:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800177e:	2301      	movs	r3, #1
 8001780:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001782:	2300      	movs	r3, #0
 8001784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001786:	2300      	movs	r3, #0
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800178a:	f107 031c 	add.w	r3, r7, #28
 800178e:	4619      	mov	r1, r3
 8001790:	4819      	ldr	r0, [pc, #100]	; (80017f8 <MX_GPIO_Init+0x16c>)
 8001792:	f001 f883 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pin : START_POS_Pin */
  GPIO_InitStruct.Pin = START_POS_Pin;
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800179a:	4b1b      	ldr	r3, [pc, #108]	; (8001808 <MX_GPIO_Init+0x17c>)
 800179c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(START_POS_GPIO_Port, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4818      	ldr	r0, [pc, #96]	; (800180c <MX_GPIO_Init+0x180>)
 80017aa:	f001 f877 	bl	800289c <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin;
 80017ae:	2330      	movs	r3, #48	; 0x30
 80017b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b2:	2301      	movs	r3, #1
 80017b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b6:	2300      	movs	r3, #0
 80017b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	2300      	movs	r3, #0
 80017bc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017be:	f107 031c 	add.w	r3, r7, #28
 80017c2:	4619      	mov	r1, r3
 80017c4:	480d      	ldr	r0, [pc, #52]	; (80017fc <MX_GPIO_Init+0x170>)
 80017c6:	f001 f869 	bl	800289c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80017ca:	2200      	movs	r2, #0
 80017cc:	2100      	movs	r1, #0
 80017ce:	2006      	movs	r0, #6
 80017d0:	f000 fcbf 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80017d4:	2006      	movs	r0, #6
 80017d6:	f000 fcd8 	bl	800218a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2017      	movs	r0, #23
 80017e0:	f000 fcb7 	bl	8002152 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80017e4:	2017      	movs	r0, #23
 80017e6:	f000 fcd0 	bl	800218a <HAL_NVIC_EnableIRQ>

}
 80017ea:	bf00      	nop
 80017ec:	3730      	adds	r7, #48	; 0x30
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020c00 	.word	0x40020c00
 80017fc:	40020400 	.word	0x40020400
 8001800:	10210000 	.word	0x10210000
 8001804:	40020000 	.word	0x40020000
 8001808:	10110000 	.word	0x10110000
 800180c:	40020800 	.word	0x40020800

08001810 <Error_Handler>:
=======
 8001594:	b580      	push	{r7, lr}
 8001596:	b08c      	sub	sp, #48	; 0x30
 8001598:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800159a:	f107 031c 	add.w	r3, r7, #28
 800159e:	2200      	movs	r2, #0
 80015a0:	601a      	str	r2, [r3, #0]
 80015a2:	605a      	str	r2, [r3, #4]
 80015a4:	609a      	str	r2, [r3, #8]
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
 80015ae:	4b53      	ldr	r3, [pc, #332]	; (80016fc <MX_GPIO_Init+0x168>)
 80015b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b2:	4a52      	ldr	r2, [pc, #328]	; (80016fc <MX_GPIO_Init+0x168>)
 80015b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ba:	4b50      	ldr	r3, [pc, #320]	; (80016fc <MX_GPIO_Init+0x168>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015c2:	61bb      	str	r3, [r7, #24]
 80015c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <MX_GPIO_Init+0x168>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a4b      	ldr	r2, [pc, #300]	; (80016fc <MX_GPIO_Init+0x168>)
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b49      	ldr	r3, [pc, #292]	; (80016fc <MX_GPIO_Init+0x168>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	617b      	str	r3, [r7, #20]
 80015e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
 80015e6:	4b45      	ldr	r3, [pc, #276]	; (80016fc <MX_GPIO_Init+0x168>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a44      	ldr	r2, [pc, #272]	; (80016fc <MX_GPIO_Init+0x168>)
 80015ec:	f043 0310 	orr.w	r3, r3, #16
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b42      	ldr	r3, [pc, #264]	; (80016fc <MX_GPIO_Init+0x168>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0310 	and.w	r3, r3, #16
 80015fa:	613b      	str	r3, [r7, #16]
 80015fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b3e      	ldr	r3, [pc, #248]	; (80016fc <MX_GPIO_Init+0x168>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a3d      	ldr	r2, [pc, #244]	; (80016fc <MX_GPIO_Init+0x168>)
 8001608:	f043 0308 	orr.w	r3, r3, #8
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b3b      	ldr	r3, [pc, #236]	; (80016fc <MX_GPIO_Init+0x168>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0308 	and.w	r3, r3, #8
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b37      	ldr	r3, [pc, #220]	; (80016fc <MX_GPIO_Init+0x168>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a36      	ldr	r2, [pc, #216]	; (80016fc <MX_GPIO_Init+0x168>)
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b34      	ldr	r3, [pc, #208]	; (80016fc <MX_GPIO_Init+0x168>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0304 	and.w	r3, r3, #4
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	4b30      	ldr	r3, [pc, #192]	; (80016fc <MX_GPIO_Init+0x168>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a2f      	ldr	r2, [pc, #188]	; (80016fc <MX_GPIO_Init+0x168>)
 8001640:	f043 0302 	orr.w	r3, r3, #2
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b2d      	ldr	r3, [pc, #180]	; (80016fc <MX_GPIO_Init+0x168>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_G_Pin|LED_O_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001652:	2200      	movs	r2, #0
 8001654:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001658:	4829      	ldr	r0, [pc, #164]	; (8001700 <MX_GPIO_Init+0x16c>)
 800165a:	f001 fa35 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin, GPIO_PIN_RESET);
 800165e:	2200      	movs	r2, #0
 8001660:	2130      	movs	r1, #48	; 0x30
 8001662:	4828      	ldr	r0, [pc, #160]	; (8001704 <MX_GPIO_Init+0x170>)
 8001664:	f001 fa30 	bl	8002ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001668:	2301      	movs	r3, #1
 800166a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166c:	4b26      	ldr	r3, [pc, #152]	; (8001708 <MX_GPIO_Init+0x174>)
 800166e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 031c 	add.w	r3, r7, #28
 8001678:	4619      	mov	r1, r3
 800167a:	4824      	ldr	r0, [pc, #144]	; (800170c <MX_GPIO_Init+0x178>)
 800167c:	f001 f88a 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_O_Pin LED_R_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_O_Pin|LED_R_Pin|LED_B_Pin;
 8001680:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001684:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001686:	2301      	movs	r3, #1
 8001688:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168e:	2300      	movs	r3, #0
 8001690:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	4819      	ldr	r0, [pc, #100]	; (8001700 <MX_GPIO_Init+0x16c>)
 800169a:	f001 f87b 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_POS_Pin */
  GPIO_InitStruct.Pin = START_POS_Pin;
 800169e:	2380      	movs	r3, #128	; 0x80
 80016a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a2:	4b1b      	ldr	r3, [pc, #108]	; (8001710 <MX_GPIO_Init+0x17c>)
 80016a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(START_POS_GPIO_Port, &GPIO_InitStruct);
 80016aa:	f107 031c 	add.w	r3, r7, #28
 80016ae:	4619      	mov	r1, r3
 80016b0:	4818      	ldr	r0, [pc, #96]	; (8001714 <MX_GPIO_Init+0x180>)
 80016b2:	f001 f86f 	bl	8002794 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin;
 80016b6:	2330      	movs	r3, #48	; 0x30
 80016b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016ba:	2301      	movs	r3, #1
 80016bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016be:	2300      	movs	r3, #0
 80016c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	480d      	ldr	r0, [pc, #52]	; (8001704 <MX_GPIO_Init+0x170>)
 80016ce:	f001 f861 	bl	8002794 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80016d2:	2200      	movs	r2, #0
 80016d4:	2100      	movs	r1, #0
 80016d6:	2006      	movs	r0, #6
 80016d8:	f000 fcb7 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80016dc:	2006      	movs	r0, #6
 80016de:	f000 fcd0 	bl	8002082 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016e2:	2200      	movs	r2, #0
 80016e4:	2100      	movs	r1, #0
 80016e6:	2017      	movs	r0, #23
 80016e8:	f000 fcaf 	bl	800204a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ec:	2017      	movs	r0, #23
 80016ee:	f000 fcc8 	bl	8002082 <HAL_NVIC_EnableIRQ>

}
 80016f2:	bf00      	nop
 80016f4:	3730      	adds	r7, #48	; 0x30
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020c00 	.word	0x40020c00
 8001704:	40020400 	.word	0x40020400
 8001708:	10210000 	.word	0x10210000
 800170c:	40020000 	.word	0x40020000
 8001710:	10110000 	.word	0x10110000
 8001714:	40020800 	.word	0x40020800

08001718 <Error_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
<<<<<<< HEAD
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
=======
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
<<<<<<< HEAD
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <pid_init>:
=======
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr

08001726 <pid_init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
 *  Created on: May 17, 2020
 *      Author: Mike
 */
#include "pid.h"

void pid_init(cpid_t *pid, float p, float i, float d, int32_t dt_ms) {
<<<<<<< HEAD
 800181e:	b480      	push	{r7}
 8001820:	b087      	sub	sp, #28
 8001822:	af00      	add	r7, sp, #0
 8001824:	6178      	str	r0, [r7, #20]
 8001826:	ed87 0a04 	vstr	s0, [r7, #16]
 800182a:	edc7 0a03 	vstr	s1, [r7, #12]
 800182e:	ed87 1a02 	vstr	s2, [r7, #8]
 8001832:	6079      	str	r1, [r7, #4]
	pid->p = p;
 8001834:	edd7 7a04 	vldr	s15, [r7, #16]
 8001838:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800183c:	ee17 2a90 	vmov	r2, s15
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	601a      	str	r2, [r3, #0]
	pid->i = i;
 8001844:	edd7 7a03 	vldr	s15, [r7, #12]
 8001848:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800184c:	ee17 2a90 	vmov	r2, s15
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	605a      	str	r2, [r3, #4]
	pid->d = d;
 8001854:	edd7 7a02 	vldr	s15, [r7, #8]
 8001858:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800185c:	ee17 2a90 	vmov	r2, s15
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	609a      	str	r2, [r3, #8]

	pid->p_max = INT32_MAX;
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800186a:	60da      	str	r2, [r3, #12]
	pid->p_min = INT32_MIN;
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001872:	619a      	str	r2, [r3, #24]

	pid->i_max = INT32_MAX;
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800187a:	611a      	str	r2, [r3, #16]
	pid->i_min = INT32_MIN;
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001882:	61da      	str	r2, [r3, #28]

	pid->d_max = INT32_MAX;
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 800188a:	615a      	str	r2, [r3, #20]
	pid->d_min = INT32_MIN;
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001892:	621a      	str	r2, [r3, #32]

	pid->e_last = 0;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	2200      	movs	r2, #0
 8001898:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_sum = 0;
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	2200      	movs	r2, #0
 800189e:	631a      	str	r2, [r3, #48]	; 0x30

	pid->total_max = INT32_MAX;
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80018a6:	635a      	str	r2, [r3, #52]	; 0x34
	pid->total_min = INT32_MIN;
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80018ae:	639a      	str	r2, [r3, #56]	; 0x38

	pid->dt_ms = dt_ms;
 80018b0:	697b      	ldr	r3, [r7, #20]
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018b6:	bf00      	nop
 80018b8:	371c      	adds	r7, #28
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
	...

080018c4 <pid_calc>:

int32_t pid_calc(cpid_t *pid, int32_t mv, int32_t dv) {
 80018c4:	b480      	push	{r7}
 80018c6:	b08b      	sub	sp, #44	; 0x2c
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
	int32_t p, i, d, e, total;
	pid->mv = mv;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	68ba      	ldr	r2, [r7, #8]
 80018d4:	629a      	str	r2, [r3, #40]	; 0x28
	pid->dv = dv;
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	625a      	str	r2, [r3, #36]	; 0x24

//WYLICZANIE BLEDU
	e = dv - mv;
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	68bb      	ldr	r3, [r7, #8]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	617b      	str	r3, [r7, #20]
	if(e > -3 && e < 3) return 0;
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	f113 0f02 	cmn.w	r3, #2
 80018ea:	db04      	blt.n	80018f6 <pid_calc+0x32>
 80018ec:	697b      	ldr	r3, [r7, #20]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	dc01      	bgt.n	80018f6 <pid_calc+0x32>
 80018f2:	2300      	movs	r3, #0
 80018f4:	e080      	b.n	80019f8 <pid_calc+0x134>

//CZLON PROPORCJONALNY
	p = pid->p * e;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	fb02 f303 	mul.w	r3, r2, r3
 8001900:	627b      	str	r3, [r7, #36]	; 0x24
	if (p > pid->p_max)
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001908:	429a      	cmp	r2, r3
 800190a:	dd03      	ble.n	8001914 <pid_calc+0x50>
		p = pid->p_max;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
 8001912:	e007      	b.n	8001924 <pid_calc+0x60>
	else if (p < pid->p_min)
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800191a:	429a      	cmp	r2, r3
 800191c:	da02      	bge.n	8001924 <pid_calc+0x60>
		p = pid->p_min;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	699b      	ldr	r3, [r3, #24]
 8001922:	627b      	str	r3, [r7, #36]	; 0x24

//CZLON CALKUJACY
	i=pid->e_sum;
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	623b      	str	r3, [r7, #32]
	i += pid->i * pid->dt_ms * e / 1000;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001932:	fb02 f303 	mul.w	r3, r2, r3
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	fb02 f303 	mul.w	r3, r2, r3
 800193c:	4a31      	ldr	r2, [pc, #196]	; (8001a04 <pid_calc+0x140>)
 800193e:	fb82 1203 	smull	r1, r2, r2, r3
 8001942:	1192      	asrs	r2, r2, #6
 8001944:	17db      	asrs	r3, r3, #31
 8001946:	1ad3      	subs	r3, r2, r3
 8001948:	6a3a      	ldr	r2, [r7, #32]
 800194a:	4413      	add	r3, r2
 800194c:	623b      	str	r3, [r7, #32]
	if (i > pid->i_max)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	6a3a      	ldr	r2, [r7, #32]
 8001954:	429a      	cmp	r2, r3
 8001956:	dd03      	ble.n	8001960 <pid_calc+0x9c>
		i = pid->i_max;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	691b      	ldr	r3, [r3, #16]
 800195c:	623b      	str	r3, [r7, #32]
 800195e:	e007      	b.n	8001970 <pid_calc+0xac>
	else if (i < pid->i_min)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	69db      	ldr	r3, [r3, #28]
 8001964:	6a3a      	ldr	r2, [r7, #32]
 8001966:	429a      	cmp	r2, r3
 8001968:	da02      	bge.n	8001970 <pid_calc+0xac>
		i = pid->i_min;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	69db      	ldr	r3, [r3, #28]
 800196e:	623b      	str	r3, [r7, #32]
	pid->e_sum=i;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	6a3a      	ldr	r2, [r7, #32]
 8001974:	631a      	str	r2, [r3, #48]	; 0x30

//CZLON ROZNICZKUJACEGO
	d = 1000 * pid->d * (e - pid->e_last) / pid->dt_ms;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800197e:	fb02 f303 	mul.w	r3, r2, r3
 8001982:	68fa      	ldr	r2, [r7, #12]
 8001984:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001986:	6979      	ldr	r1, [r7, #20]
 8001988:	1a8a      	subs	r2, r1, r2
 800198a:	fb02 f203 	mul.w	r2, r2, r3
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001992:	fb92 f3f3 	sdiv	r3, r2, r3
 8001996:	61fb      	str	r3, [r7, #28]
	if (d > pid->d_max)
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	695b      	ldr	r3, [r3, #20]
 800199c:	69fa      	ldr	r2, [r7, #28]
 800199e:	429a      	cmp	r2, r3
 80019a0:	dd03      	ble.n	80019aa <pid_calc+0xe6>
		d = pid->d_max;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	61fb      	str	r3, [r7, #28]
 80019a8:	e007      	b.n	80019ba <pid_calc+0xf6>
	else if (d < pid->d_min)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	6a1b      	ldr	r3, [r3, #32]
 80019ae:	69fa      	ldr	r2, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	da02      	bge.n	80019ba <pid_calc+0xf6>
		d = pid->d_min;
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	6a1b      	ldr	r3, [r3, #32]
 80019b8:	61fb      	str	r3, [r7, #28]

//Sumowanie
	total = p + i + d;
 80019ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019bc:	6a3b      	ldr	r3, [r7, #32]
 80019be:	4413      	add	r3, r2
 80019c0:	69fa      	ldr	r2, [r7, #28]
 80019c2:	4413      	add	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
	if (total > pid->total_max)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dd03      	ble.n	80019d8 <pid_calc+0x114>
		total = pid->total_max;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d4:	61bb      	str	r3, [r7, #24]
 80019d6:	e007      	b.n	80019e8 <pid_calc+0x124>
	else if (total < pid->total_min)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	429a      	cmp	r2, r3
 80019e0:	da02      	bge.n	80019e8 <pid_calc+0x124>
		total = pid->total_min;
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019e6:	61bb      	str	r3, [r7, #24]

	pid->control = total;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	69ba      	ldr	r2, [r7, #24]
 80019ec:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->e_last = e;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	62da      	str	r2, [r3, #44]	; 0x2c
	return pid->control;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80019f8:	4618      	mov	r0, r3
 80019fa:	372c      	adds	r7, #44	; 0x2c
 80019fc:	46bd      	mov	sp, r7
 80019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a02:	4770      	bx	lr
 8001a04:	10624dd3 	.word	0x10624dd3

08001a08 <HAL_MspInit>:
=======
 8001726:	b480      	push	{r7}
 8001728:	b087      	sub	sp, #28
 800172a:	af00      	add	r7, sp, #0
 800172c:	6178      	str	r0, [r7, #20]
 800172e:	ed87 0a04 	vstr	s0, [r7, #16]
 8001732:	edc7 0a03 	vstr	s1, [r7, #12]
 8001736:	ed87 1a02 	vstr	s2, [r7, #8]
 800173a:	6079      	str	r1, [r7, #4]
	pid->p = p;
 800173c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001744:	ee17 2a90 	vmov	r2, s15
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	601a      	str	r2, [r3, #0]
	pid->i = i;
 800174c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001750:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001754:	ee17 2a90 	vmov	r2, s15
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	605a      	str	r2, [r3, #4]
	pid->d = d;
 800175c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001760:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001764:	ee17 2a90 	vmov	r2, s15
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	609a      	str	r2, [r3, #8]

	pid->p_max = INT32_MAX;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001772:	60da      	str	r2, [r3, #12]
	pid->p_min = INT32_MIN;
 8001774:	697b      	ldr	r3, [r7, #20]
 8001776:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800177a:	619a      	str	r2, [r3, #24]

	pid->i_max = INT32_MAX;
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001782:	611a      	str	r2, [r3, #16]
	pid->i_min = INT32_MIN;
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800178a:	61da      	str	r2, [r3, #28]

	pid->d_max = INT32_MAX;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 8001792:	615a      	str	r2, [r3, #20]
	pid->d_min = INT32_MIN;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800179a:	621a      	str	r2, [r3, #32]

	pid->e_last = 0;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2200      	movs	r2, #0
 80017a0:	62da      	str	r2, [r3, #44]	; 0x2c
	pid->e_sum = 0;
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	2200      	movs	r2, #0
 80017a6:	631a      	str	r2, [r3, #48]	; 0x30

	pid->total_max = INT32_MAX;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
	pid->total_min = INT32_MIN;
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80017b6:	639a      	str	r2, [r3, #56]	; 0x38

	pid->dt_ms = dt_ms;
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	687a      	ldr	r2, [r7, #4]
 80017bc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80017be:	bf00      	nop
 80017c0:	371c      	adds	r7, #28
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
	...

080017cc <pid_calc>:

int32_t pid_calc(cpid_t *pid, int32_t mv, int32_t dv) {
 80017cc:	b480      	push	{r7}
 80017ce:	b08b      	sub	sp, #44	; 0x2c
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
	int32_t p, i, d, e, total;
	pid->mv = mv;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	68ba      	ldr	r2, [r7, #8]
 80017dc:	629a      	str	r2, [r3, #40]	; 0x28
	pid->dv = dv;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	625a      	str	r2, [r3, #36]	; 0x24

//WYLICZANIE BLEDU
	e = dv - mv;
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	617b      	str	r3, [r7, #20]
	//if(e > -3 && e < 3) return 0;

//CZLON PROPORCJONALNY
	p = pid->p * e;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681a      	ldr	r2, [r3, #0]
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	fb02 f303 	mul.w	r3, r2, r3
 80017f6:	627b      	str	r3, [r7, #36]	; 0x24
	if (p > pid->p_max)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	68db      	ldr	r3, [r3, #12]
 80017fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80017fe:	429a      	cmp	r2, r3
 8001800:	dd03      	ble.n	800180a <pid_calc+0x3e>
		p = pid->p_max;
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	68db      	ldr	r3, [r3, #12]
 8001806:	627b      	str	r3, [r7, #36]	; 0x24
 8001808:	e007      	b.n	800181a <pid_calc+0x4e>
	else if (p < pid->p_min)
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	699b      	ldr	r3, [r3, #24]
 800180e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001810:	429a      	cmp	r2, r3
 8001812:	da02      	bge.n	800181a <pid_calc+0x4e>
		p = pid->p_min;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	699b      	ldr	r3, [r3, #24]
 8001818:	627b      	str	r3, [r7, #36]	; 0x24

//CZLON CALKUJACY
	i=pid->e_sum;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	623b      	str	r3, [r7, #32]
	i += pid->i * pid->dt_ms * e / 1000;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	68fa      	ldr	r2, [r7, #12]
 8001826:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001828:	fb02 f303 	mul.w	r3, r2, r3
 800182c:	697a      	ldr	r2, [r7, #20]
 800182e:	fb02 f303 	mul.w	r3, r2, r3
 8001832:	4a32      	ldr	r2, [pc, #200]	; (80018fc <pid_calc+0x130>)
 8001834:	fb82 1203 	smull	r1, r2, r2, r3
 8001838:	1192      	asrs	r2, r2, #6
 800183a:	17db      	asrs	r3, r3, #31
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	6a3a      	ldr	r2, [r7, #32]
 8001840:	4413      	add	r3, r2
 8001842:	623b      	str	r3, [r7, #32]
	if (i > pid->i_max)
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	6a3a      	ldr	r2, [r7, #32]
 800184a:	429a      	cmp	r2, r3
 800184c:	dd03      	ble.n	8001856 <pid_calc+0x8a>
		i = pid->i_max;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	691b      	ldr	r3, [r3, #16]
 8001852:	623b      	str	r3, [r7, #32]
 8001854:	e007      	b.n	8001866 <pid_calc+0x9a>
	else if (i < pid->i_min)
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	6a3a      	ldr	r2, [r7, #32]
 800185c:	429a      	cmp	r2, r3
 800185e:	da02      	bge.n	8001866 <pid_calc+0x9a>
		i = pid->i_min;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	69db      	ldr	r3, [r3, #28]
 8001864:	623b      	str	r3, [r7, #32]
	pid->e_sum=i;
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	6a3a      	ldr	r2, [r7, #32]
 800186a:	631a      	str	r2, [r3, #48]	; 0x30

//CZLON ROZNICZKUJACEGO
	d = 1000 * pid->d * (e - pid->e_last) / pid->dt_ms;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001874:	fb02 f303 	mul.w	r3, r2, r3
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800187c:	6979      	ldr	r1, [r7, #20]
 800187e:	1a8a      	subs	r2, r1, r2
 8001880:	fb02 f203 	mul.w	r2, r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001888:	fb92 f3f3 	sdiv	r3, r2, r3
 800188c:	61fb      	str	r3, [r7, #28]
	if (d > pid->d_max)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	695b      	ldr	r3, [r3, #20]
 8001892:	69fa      	ldr	r2, [r7, #28]
 8001894:	429a      	cmp	r2, r3
 8001896:	dd03      	ble.n	80018a0 <pid_calc+0xd4>
		d = pid->d_max;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	695b      	ldr	r3, [r3, #20]
 800189c:	61fb      	str	r3, [r7, #28]
 800189e:	e007      	b.n	80018b0 <pid_calc+0xe4>
	else if (d < pid->d_min)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	6a1b      	ldr	r3, [r3, #32]
 80018a4:	69fa      	ldr	r2, [r7, #28]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	da02      	bge.n	80018b0 <pid_calc+0xe4>
		d = pid->d_min;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	6a1b      	ldr	r3, [r3, #32]
 80018ae:	61fb      	str	r3, [r7, #28]

//Sumowanie
	total = p + i + d;
 80018b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	4413      	add	r3, r2
 80018b6:	69fa      	ldr	r2, [r7, #28]
 80018b8:	4413      	add	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
	if (total > pid->total_max)
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018c0:	69ba      	ldr	r2, [r7, #24]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dd03      	ble.n	80018ce <pid_calc+0x102>
		total = pid->total_max;
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018ca:	61bb      	str	r3, [r7, #24]
 80018cc:	e007      	b.n	80018de <pid_calc+0x112>
	else if (total < pid->total_min)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	da02      	bge.n	80018de <pid_calc+0x112>
		total = pid->total_min;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018dc:	61bb      	str	r3, [r7, #24]

	pid->control = total;
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	63da      	str	r2, [r3, #60]	; 0x3c
	pid->e_last = e;
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	697a      	ldr	r2, [r7, #20]
 80018e8:	62da      	str	r2, [r3, #44]	; 0x2c
	return pid->control;
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	372c      	adds	r7, #44	; 0x2c
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	10624dd3 	.word	0x10624dd3

08001900 <HAL_MspInit>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
<<<<<<< HEAD
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
=======
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
<<<<<<< HEAD
 8001a0e:	2300      	movs	r3, #0
 8001a10:	607b      	str	r3, [r7, #4]
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a16:	4a0f      	ldr	r2, [pc, #60]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a1e:	4b0d      	ldr	r3, [pc, #52]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a26:	607b      	str	r3, [r7, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	603b      	str	r3, [r7, #0]
 8001a2e:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	4a08      	ldr	r2, [pc, #32]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a38:	6413      	str	r3, [r2, #64]	; 0x40
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_MspInit+0x4c>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a42:	603b      	str	r3, [r7, #0]
 8001a44:	683b      	ldr	r3, [r7, #0]
=======
 8001906:	2300      	movs	r3, #0
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_MspInit+0x4c>)
 800190c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <HAL_MspInit+0x4c>)
 8001910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001914:	6453      	str	r3, [r2, #68]	; 0x44
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_MspInit+0x4c>)
 8001918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800191e:	607b      	str	r3, [r7, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001922:	2300      	movs	r3, #0
 8001924:	603b      	str	r3, [r7, #0]
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_MspInit+0x4c>)
 8001928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x4c>)
 800192c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001930:	6413      	str	r3, [r2, #64]	; 0x40
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x4c>)
 8001934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
<<<<<<< HEAD
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_TIM_Encoder_MspInit>:
=======
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <HAL_TIM_Encoder_MspInit>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
<<<<<<< HEAD
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a60:	f107 031c 	add.w	r3, r7, #28
 8001a64:	2200      	movs	r2, #0
 8001a66:	601a      	str	r2, [r3, #0]
 8001a68:	605a      	str	r2, [r3, #4]
 8001a6a:	609a      	str	r2, [r3, #8]
 8001a6c:	60da      	str	r2, [r3, #12]
 8001a6e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a3a      	ldr	r2, [pc, #232]	; (8001b60 <HAL_TIM_Encoder_MspInit+0x108>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d13d      	bne.n	8001af6 <HAL_TIM_Encoder_MspInit+0x9e>
=======
 8001950:	b580      	push	{r7, lr}
 8001952:	b08c      	sub	sp, #48	; 0x30
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001958:	f107 031c 	add.w	r3, r7, #28
 800195c:	2200      	movs	r2, #0
 800195e:	601a      	str	r2, [r3, #0]
 8001960:	605a      	str	r2, [r3, #4]
 8001962:	609a      	str	r2, [r3, #8]
 8001964:	60da      	str	r2, [r3, #12]
 8001966:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a3a      	ldr	r2, [pc, #232]	; (8001a58 <HAL_TIM_Encoder_MspInit+0x108>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d13d      	bne.n	80019ee <HAL_TIM_Encoder_MspInit+0x9e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
<<<<<<< HEAD
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	61bb      	str	r3, [r7, #24]
 8001a7e:	4b39      	ldr	r3, [pc, #228]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a82:	4a38      	ldr	r2, [pc, #224]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a84:	f043 0301 	orr.w	r3, r3, #1
 8001a88:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8a:	4b36      	ldr	r3, [pc, #216]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	61bb      	str	r3, [r7, #24]
 8001a94:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	617b      	str	r3, [r7, #20]
 8001a9a:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a31      	ldr	r2, [pc, #196]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	697b      	ldr	r3, [r7, #20]
=======
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]
 8001976:	4b39      	ldr	r3, [pc, #228]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	4a38      	ldr	r2, [pc, #224]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 800197c:	f043 0301 	orr.w	r3, r3, #1
 8001980:	6453      	str	r3, [r2, #68]	; 0x44
 8001982:	4b36      	ldr	r3, [pc, #216]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001986:	f003 0301 	and.w	r3, r3, #1
 800198a:	61bb      	str	r3, [r7, #24]
 800198c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	4a31      	ldr	r2, [pc, #196]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001998:	f043 0310 	orr.w	r3, r3, #16
 800199c:	6313      	str	r3, [r2, #48]	; 0x30
 800199e:	4b2f      	ldr	r3, [pc, #188]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	f003 0310 	and.w	r3, r3, #16
 80019a6:	617b      	str	r3, [r7, #20]
 80019a8:	697b      	ldr	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    /**TIM1 GPIO Configuration    
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
<<<<<<< HEAD
 8001ab2:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8001ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abc:	2300      	movs	r3, #0
 8001abe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac8:	f107 031c 	add.w	r3, r7, #28
 8001acc:	4619      	mov	r1, r3
 8001ace:	4826      	ldr	r0, [pc, #152]	; (8001b68 <HAL_TIM_Encoder_MspInit+0x110>)
 8001ad0:	f000 fee4 	bl	800289c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	2019      	movs	r0, #25
 8001ada:	f000 fb3a 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ade:	2019      	movs	r0, #25
 8001ae0:	f000 fb53 	bl	800218a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	201a      	movs	r0, #26
 8001aea:	f000 fb32 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001aee:	201a      	movs	r0, #26
 8001af0:	f000 fb4b 	bl	800218a <HAL_NVIC_EnableIRQ>
=======
 80019aa:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80019bc:	2301      	movs	r3, #1
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	4826      	ldr	r0, [pc, #152]	; (8001a60 <HAL_TIM_Encoder_MspInit+0x110>)
 80019c8:	f000 fee4 	bl	8002794 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2100      	movs	r1, #0
 80019d0:	2019      	movs	r0, #25
 80019d2:	f000 fb3a 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80019d6:	2019      	movs	r0, #25
 80019d8:	f000 fb53 	bl	8002082 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80019dc:	2200      	movs	r2, #0
 80019de:	2100      	movs	r1, #0
 80019e0:	201a      	movs	r0, #26
 80019e2:	f000 fb32 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80019e6:	201a      	movs	r0, #26
 80019e8:	f000 fb4b 	bl	8002082 <HAL_NVIC_EnableIRQ>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001af4:	e030      	b.n	8001b58 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	4a1c      	ldr	r2, [pc, #112]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x114>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d12b      	bne.n	8001b58 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	4a16      	ldr	r2, [pc, #88]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001b0a:	f043 0302 	orr.w	r3, r3, #2
 8001b0e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b10:	4b14      	ldr	r3, [pc, #80]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	613b      	str	r3, [r7, #16]
 8001b1a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	60fb      	str	r3, [r7, #12]
 8001b20:	4b10      	ldr	r3, [pc, #64]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	4a0f      	ldr	r2, [pc, #60]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <HAL_TIM_Encoder_MspInit+0x10c>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	60fb      	str	r3, [r7, #12]
 8001b36:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001b38:	23c0      	movs	r3, #192	; 0xc0
 8001b3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001b40:	2301      	movs	r3, #1
 8001b42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b44:	2300      	movs	r3, #0
 8001b46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b4c:	f107 031c 	add.w	r3, r7, #28
 8001b50:	4619      	mov	r1, r3
 8001b52:	4807      	ldr	r0, [pc, #28]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x118>)
 8001b54:	f000 fea2 	bl	800289c <HAL_GPIO_Init>
}
 8001b58:	bf00      	nop
 8001b5a:	3730      	adds	r7, #48	; 0x30
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40010000 	.word	0x40010000
 8001b64:	40023800 	.word	0x40023800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	40000400 	.word	0x40000400
 8001b70:	40020000 	.word	0x40020000

08001b74 <HAL_TIM_Base_MspInit>:
=======
 80019ec:	e030      	b.n	8001a50 <HAL_TIM_Encoder_MspInit+0x100>
  else if(htim_encoder->Instance==TIM3)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a1c      	ldr	r2, [pc, #112]	; (8001a64 <HAL_TIM_Encoder_MspInit+0x114>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d12b      	bne.n	8001a50 <HAL_TIM_Encoder_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019f8:	2300      	movs	r3, #0
 80019fa:	613b      	str	r3, [r7, #16]
 80019fc:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	4a16      	ldr	r2, [pc, #88]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a02:	f043 0302 	orr.w	r3, r3, #2
 8001a06:	6413      	str	r3, [r2, #64]	; 0x40
 8001a08:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a14:	2300      	movs	r3, #0
 8001a16:	60fb      	str	r3, [r7, #12]
 8001a18:	4b10      	ldr	r3, [pc, #64]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1c:	4a0f      	ldr	r2, [pc, #60]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6313      	str	r3, [r2, #48]	; 0x30
 8001a24:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <HAL_TIM_Encoder_MspInit+0x10c>)
 8001a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	60fb      	str	r3, [r7, #12]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a30:	23c0      	movs	r3, #192	; 0xc0
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a34:	2302      	movs	r3, #2
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a40:	2302      	movs	r3, #2
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a44:	f107 031c 	add.w	r3, r7, #28
 8001a48:	4619      	mov	r1, r3
 8001a4a:	4807      	ldr	r0, [pc, #28]	; (8001a68 <HAL_TIM_Encoder_MspInit+0x118>)
 8001a4c:	f000 fea2 	bl	8002794 <HAL_GPIO_Init>
}
 8001a50:	bf00      	nop
 8001a52:	3730      	adds	r7, #48	; 0x30
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	40010000 	.word	0x40010000
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40020000 	.word	0x40020000

08001a6c <HAL_TIM_Base_MspInit>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
<<<<<<< HEAD
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b086      	sub	sp, #24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a42      	ldr	r2, [pc, #264]	; (8001c8c <HAL_TIM_Base_MspInit+0x118>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d147      	bne.n	8001c16 <HAL_TIM_Base_MspInit+0xa2>
=======
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b086      	sub	sp, #24
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a42      	ldr	r2, [pc, #264]	; (8001b84 <HAL_TIM_Base_MspInit+0x118>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d147      	bne.n	8001b0e <HAL_TIM_Base_MspInit+0xa2>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
<<<<<<< HEAD
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
 8001b8a:	4b41      	ldr	r3, [pc, #260]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b8e:	4a40      	ldr	r2, [pc, #256]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001b90:	f043 0304 	orr.w	r3, r3, #4
 8001b94:	6413      	str	r3, [r2, #64]	; 0x40
 8001b96:	4b3e      	ldr	r3, [pc, #248]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	617b      	str	r3, [r7, #20]
 8001ba0:	697b      	ldr	r3, [r7, #20]
=======
 8001a7e:	2300      	movs	r3, #0
 8001a80:	617b      	str	r3, [r7, #20]
 8001a82:	4b41      	ldr	r3, [pc, #260]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001a88:	f043 0304 	orr.w	r3, r3, #4
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f003 0304 	and.w	r3, r3, #4
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697b      	ldr	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  
    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
<<<<<<< HEAD
 8001ba2:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001ba4:	4a3c      	ldr	r2, [pc, #240]	; (8001c98 <HAL_TIM_Base_MspInit+0x124>)
 8001ba6:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001ba8:	4b3a      	ldr	r3, [pc, #232]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001baa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001bae:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb0:	4b38      	ldr	r3, [pc, #224]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bb2:	2240      	movs	r2, #64	; 0x40
 8001bb4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bb6:	4b37      	ldr	r3, [pc, #220]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001bbc:	4b35      	ldr	r3, [pc, #212]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bc4:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bc6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bca:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bcc:	4b31      	ldr	r3, [pc, #196]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001bd2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8001bd4:	4b2f      	ldr	r3, [pc, #188]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bd6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001bda:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	4b2d      	ldr	r3, [pc, #180]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be2:	4b2c      	ldr	r3, [pc, #176]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001be8:	482a      	ldr	r0, [pc, #168]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bea:	f000 fae9 	bl	80021c0 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001bf4:	f7ff fe0c 	bl	8001810 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a26      	ldr	r2, [pc, #152]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24
 8001bfe:	4a25      	ldr	r2, [pc, #148]	; (8001c94 <HAL_TIM_Base_MspInit+0x120>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	201e      	movs	r0, #30
 8001c0a:	f000 faa2 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001c0e:	201e      	movs	r0, #30
 8001c10:	f000 fabb 	bl	800218a <HAL_NVIC_EnableIRQ>
=======
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001a9c:	4a3c      	ldr	r2, [pc, #240]	; (8001b90 <HAL_TIM_Base_MspInit+0x124>)
 8001a9e:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001aa0:	4b3a      	ldr	r3, [pc, #232]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001aa2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001aa6:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001aaa:	2240      	movs	r2, #64	; 0x40
 8001aac:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001ab4:	4b35      	ldr	r3, [pc, #212]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001ab6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aba:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001abc:	4b33      	ldr	r3, [pc, #204]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001abe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ac2:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ac4:	4b31      	ldr	r3, [pc, #196]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001ac6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001aca:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad2:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001ad4:	4b2d      	ldr	r3, [pc, #180]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ada:	4b2c      	ldr	r3, [pc, #176]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8001ae0:	482a      	ldr	r0, [pc, #168]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001ae2:	f000 fae9 	bl	80020b8 <HAL_DMA_Init>
 8001ae6:	4603      	mov	r3, r0
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8001aec:	f7ff fe14 	bl	8001718 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	4a26      	ldr	r2, [pc, #152]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001af4:	625a      	str	r2, [r3, #36]	; 0x24
 8001af6:	4a25      	ldr	r2, [pc, #148]	; (8001b8c <HAL_TIM_Base_MspInit+0x120>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001afc:	2200      	movs	r2, #0
 8001afe:	2100      	movs	r1, #0
 8001b00:	201e      	movs	r0, #30
 8001b02:	f000 faa2 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b06:	201e      	movs	r0, #30
 8001b08:	f000 fabb 	bl	8002082 <HAL_NVIC_EnableIRQ>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
<<<<<<< HEAD
 8001c14:	e036      	b.n	8001c84 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM10)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	4a20      	ldr	r2, [pc, #128]	; (8001c9c <HAL_TIM_Base_MspInit+0x128>)
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d116      	bne.n	8001c4e <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c20:	2300      	movs	r3, #0
 8001c22:	613b      	str	r3, [r7, #16]
 8001c24:	4b1a      	ldr	r3, [pc, #104]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001c26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c28:	4a19      	ldr	r2, [pc, #100]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001c2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c2e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c30:	4b17      	ldr	r3, [pc, #92]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001c32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c38:	613b      	str	r3, [r7, #16]
 8001c3a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	2100      	movs	r1, #0
 8001c40:	2019      	movs	r0, #25
 8001c42:	f000 fa86 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001c46:	2019      	movs	r0, #25
 8001c48:	f000 fa9f 	bl	800218a <HAL_NVIC_EnableIRQ>
}
 8001c4c:	e01a      	b.n	8001c84 <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM11)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <HAL_TIM_Base_MspInit+0x12c>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d115      	bne.n	8001c84 <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c58:	2300      	movs	r3, #0
 8001c5a:	60fb      	str	r3, [r7, #12]
 8001c5c:	4b0c      	ldr	r3, [pc, #48]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001c5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c60:	4a0b      	ldr	r2, [pc, #44]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001c62:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c66:	6453      	str	r3, [r2, #68]	; 0x44
 8001c68:	4b09      	ldr	r3, [pc, #36]	; (8001c90 <HAL_TIM_Base_MspInit+0x11c>)
 8001c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c70:	60fb      	str	r3, [r7, #12]
 8001c72:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	201a      	movs	r0, #26
 8001c7a:	f000 fa6a 	bl	8002152 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001c7e:	201a      	movs	r0, #26
 8001c80:	f000 fa83 	bl	800218a <HAL_NVIC_EnableIRQ>
}
 8001c84:	bf00      	nop
 8001c86:	3718      	adds	r7, #24
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	40000800 	.word	0x40000800
 8001c90:	40023800 	.word	0x40023800
 8001c94:	20000210 	.word	0x20000210
 8001c98:	40026010 	.word	0x40026010
 8001c9c:	40014400 	.word	0x40014400
 8001ca0:	40014800 	.word	0x40014800

08001ca4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cac:	f107 030c 	add.w	r3, r7, #12
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	605a      	str	r2, [r3, #4]
 8001cb6:	609a      	str	r2, [r3, #8]
 8001cb8:	60da      	str	r2, [r3, #12]
 8001cba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a12      	ldr	r2, [pc, #72]	; (8001d0c <HAL_TIM_MspPostInit+0x68>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d11d      	bne.n	8001d02 <HAL_TIM_MspPostInit+0x5e>
=======
 8001b0c:	e036      	b.n	8001b7c <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM10)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <HAL_TIM_Base_MspInit+0x128>)
 8001b14:	4293      	cmp	r3, r2
 8001b16:	d116      	bne.n	8001b46 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001b18:	2300      	movs	r3, #0
 8001b1a:	613b      	str	r3, [r7, #16]
 8001b1c:	4b1a      	ldr	r3, [pc, #104]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	4a19      	ldr	r2, [pc, #100]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001b22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b26:	6453      	str	r3, [r2, #68]	; 0x44
 8001b28:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b30:	613b      	str	r3, [r7, #16]
 8001b32:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	2019      	movs	r0, #25
 8001b3a:	f000 fa86 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001b3e:	2019      	movs	r0, #25
 8001b40:	f000 fa9f 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 8001b44:	e01a      	b.n	8001b7c <HAL_TIM_Base_MspInit+0x110>
  else if(htim_base->Instance==TIM11)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	4a13      	ldr	r2, [pc, #76]	; (8001b98 <HAL_TIM_Base_MspInit+0x12c>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d115      	bne.n	8001b7c <HAL_TIM_Base_MspInit+0x110>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b50:	2300      	movs	r3, #0
 8001b52:	60fb      	str	r3, [r7, #12]
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b58:	4a0b      	ldr	r2, [pc, #44]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001b5a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <HAL_TIM_Base_MspInit+0x11c>)
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b68:	60fb      	str	r3, [r7, #12]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	2100      	movs	r1, #0
 8001b70:	201a      	movs	r0, #26
 8001b72:	f000 fa6a 	bl	800204a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001b76:	201a      	movs	r0, #26
 8001b78:	f000 fa83 	bl	8002082 <HAL_NVIC_EnableIRQ>
}
 8001b7c:	bf00      	nop
 8001b7e:	3718      	adds	r7, #24
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40000800 	.word	0x40000800
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	20000204 	.word	0x20000204
 8001b90:	40026010 	.word	0x40026010
 8001b94:	40014400 	.word	0x40014400
 8001b98:	40014800 	.word	0x40014800

08001b9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b088      	sub	sp, #32
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_TIM_MspPostInit+0x68>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d11d      	bne.n	8001bfa <HAL_TIM_MspPostInit+0x5e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
<<<<<<< HEAD
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	60bb      	str	r3, [r7, #8]
 8001cca:	4b11      	ldr	r3, [pc, #68]	; (8001d10 <HAL_TIM_MspPostInit+0x6c>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	4a10      	ldr	r2, [pc, #64]	; (8001d10 <HAL_TIM_MspPostInit+0x6c>)
 8001cd0:	f043 0302 	orr.w	r3, r3, #2
 8001cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <HAL_TIM_MspPostInit+0x6c>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f003 0302 	and.w	r3, r3, #2
 8001cde:	60bb      	str	r3, [r7, #8]
 8001ce0:	68bb      	ldr	r3, [r7, #8]
=======
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60bb      	str	r3, [r7, #8]
 8001bc2:	4b11      	ldr	r3, [pc, #68]	; (8001c08 <HAL_TIM_MspPostInit+0x6c>)
 8001bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc6:	4a10      	ldr	r2, [pc, #64]	; (8001c08 <HAL_TIM_MspPostInit+0x6c>)
 8001bc8:	f043 0302 	orr.w	r3, r3, #2
 8001bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001bce:	4b0e      	ldr	r3, [pc, #56]	; (8001c08 <HAL_TIM_MspPostInit+0x6c>)
 8001bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	60bb      	str	r3, [r7, #8]
 8001bd8:	68bb      	ldr	r3, [r7, #8]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    /**TIM4 GPIO Configuration    
    PB6     ------> TIM4_CH1 
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
<<<<<<< HEAD
 8001ce2:	2340      	movs	r3, #64	; 0x40
 8001ce4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001cf6:	f107 030c 	add.w	r3, r7, #12
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <HAL_TIM_MspPostInit+0x70>)
 8001cfe:	f000 fdcd 	bl	800289c <HAL_GPIO_Init>
=======
 8001bda:	2340      	movs	r3, #64	; 0x40
 8001bdc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bde:	2302      	movs	r3, #2
 8001be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001bea:	2302      	movs	r3, #2
 8001bec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 8001bee:	f107 030c 	add.w	r3, r7, #12
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4805      	ldr	r0, [pc, #20]	; (8001c0c <HAL_TIM_MspPostInit+0x70>)
 8001bf6:	f000 fdcd 	bl	8002794 <HAL_GPIO_Init>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
<<<<<<< HEAD
 8001d02:	bf00      	nop
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	40000800 	.word	0x40000800
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020400 	.word	0x40020400

08001d18 <NMI_Handler>:
=======
 8001bfa:	bf00      	nop
 8001bfc:	3720      	adds	r7, #32
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	40000800 	.word	0x40000800
 8001c08:	40023800 	.word	0x40023800
 8001c0c:	40020400 	.word	0x40020400

08001c10 <NMI_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
<<<<<<< HEAD
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
=======
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
<<<<<<< HEAD
 8001d1c:	bf00      	nop
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HardFault_Handler>:
=======
 8001c14:	bf00      	nop
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HardFault_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
<<<<<<< HEAD
 8001d26:	b480      	push	{r7}
 8001d28:	af00      	add	r7, sp, #0
=======
 8001c1e:	b480      	push	{r7}
 8001c20:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001d2a:	e7fe      	b.n	8001d2a <HardFault_Handler+0x4>

08001d2c <MemManage_Handler>:
=======
 8001c22:	e7fe      	b.n	8001c22 <HardFault_Handler+0x4>

08001c24 <MemManage_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
<<<<<<< HEAD
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
=======
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001d30:	e7fe      	b.n	8001d30 <MemManage_Handler+0x4>

08001d32 <BusFault_Handler>:
=======
 8001c28:	e7fe      	b.n	8001c28 <MemManage_Handler+0x4>

08001c2a <BusFault_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
<<<<<<< HEAD
 8001d32:	b480      	push	{r7}
 8001d34:	af00      	add	r7, sp, #0
=======
 8001c2a:	b480      	push	{r7}
 8001c2c:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001d36:	e7fe      	b.n	8001d36 <BusFault_Handler+0x4>

08001d38 <UsageFault_Handler>:
=======
 8001c2e:	e7fe      	b.n	8001c2e <BusFault_Handler+0x4>

08001c30 <UsageFault_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
<<<<<<< HEAD
 8001d38:	b480      	push	{r7}
 8001d3a:	af00      	add	r7, sp, #0
=======
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
<<<<<<< HEAD
 8001d3c:	e7fe      	b.n	8001d3c <UsageFault_Handler+0x4>

08001d3e <SVC_Handler>:
=======
 8001c34:	e7fe      	b.n	8001c34 <UsageFault_Handler+0x4>

08001c36 <SVC_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
<<<<<<< HEAD
 8001d3e:	b480      	push	{r7}
 8001d40:	af00      	add	r7, sp, #0
=======
 8001c36:	b480      	push	{r7}
 8001c38:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
<<<<<<< HEAD
 8001d42:	bf00      	nop
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <DebugMon_Handler>:
=======
 8001c3a:	bf00      	nop
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <DebugMon_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
<<<<<<< HEAD
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
=======
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
<<<<<<< HEAD
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <PendSV_Handler>:
=======
 8001c48:	bf00      	nop
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <PendSV_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
<<<<<<< HEAD
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0
=======
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
<<<<<<< HEAD
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Handler>:
=======
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <SysTick_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
<<<<<<< HEAD
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
=======
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
<<<<<<< HEAD
 8001d6c:	f000 f8d4 	bl	8001f18 <HAL_IncTick>
=======
 8001c64:	f000 f8d4 	bl	8001e10 <HAL_IncTick>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
<<<<<<< HEAD
 8001d70:	bf00      	nop
 8001d72:	bd80      	pop	{r7, pc}

08001d74 <EXTI0_IRQHandler>:
=======
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <EXTI0_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
<<<<<<< HEAD
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
=======
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
<<<<<<< HEAD
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 ff5d 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001c70:	2001      	movs	r0, #1
 8001c72:	f000 ff5d 	bl	8002b30 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
<<<<<<< HEAD
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
	...

08001d84 <DMA1_Stream0_IRQHandler>:
=======
 8001c76:	bf00      	nop
 8001c78:	bd80      	pop	{r7, pc}
	...

08001c7c <DMA1_Stream0_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
<<<<<<< HEAD
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
=======
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
<<<<<<< HEAD
 8001d88:	4802      	ldr	r0, [pc, #8]	; (8001d94 <DMA1_Stream0_IRQHandler+0x10>)
 8001d8a:	f000 fb1f 	bl	80023cc <HAL_DMA_IRQHandler>
=======
 8001c80:	4802      	ldr	r0, [pc, #8]	; (8001c8c <DMA1_Stream0_IRQHandler+0x10>)
 8001c82:	f000 fb1f 	bl	80022c4 <HAL_DMA_IRQHandler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
<<<<<<< HEAD
 8001d8e:	bf00      	nop
 8001d90:	bd80      	pop	{r7, pc}
 8001d92:	bf00      	nop
 8001d94:	20000210 	.word	0x20000210

08001d98 <EXTI9_5_IRQHandler>:
=======
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000204 	.word	0x20000204

08001c90 <EXTI9_5_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
<<<<<<< HEAD
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	af00      	add	r7, sp, #0
=======
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
<<<<<<< HEAD
 8001d9c:	2080      	movs	r0, #128	; 0x80
 8001d9e:	f000 ff4b 	bl	8002c38 <HAL_GPIO_EXTI_IRQHandler>
=======
 8001c94:	2080      	movs	r0, #128	; 0x80
 8001c96:	f000 ff4b 	bl	8002b30 <HAL_GPIO_EXTI_IRQHandler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
<<<<<<< HEAD
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
	...

08001da8 <TIM1_UP_TIM10_IRQHandler>:
=======
 8001c9a:	bf00      	nop
 8001c9c:	bd80      	pop	{r7, pc}
	...

08001ca0 <TIM1_UP_TIM10_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
<<<<<<< HEAD
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
=======
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8001dac:	4803      	ldr	r0, [pc, #12]	; (8001dbc <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001dae:	f001 fdc2 	bl	8003936 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001db2:	4803      	ldr	r0, [pc, #12]	; (8001dc0 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001db4:	f001 fdbf 	bl	8003936 <HAL_TIM_IRQHandler>
=======
 8001ca4:	4803      	ldr	r0, [pc, #12]	; (8001cb4 <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001ca6:	f001 fdc2 	bl	800382e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001caa:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001cac:	f001 fdbf 	bl	800382e <HAL_TIM_IRQHandler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
<<<<<<< HEAD
 8001db8:	bf00      	nop
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	200001d0 	.word	0x200001d0
 8001dc0:	200000cc 	.word	0x200000cc

08001dc4 <TIM1_TRG_COM_TIM11_IRQHandler>:
=======
 8001cb0:	bf00      	nop
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	200001c4 	.word	0x200001c4
 8001cb8:	200000c0 	.word	0x200000c0

08001cbc <TIM1_TRG_COM_TIM11_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
<<<<<<< HEAD
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
=======
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
<<<<<<< HEAD
 8001dc8:	4803      	ldr	r0, [pc, #12]	; (8001dd8 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001dca:	f001 fdb4 	bl	8003936 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001dce:	4803      	ldr	r0, [pc, #12]	; (8001ddc <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001dd0:	f001 fdb1 	bl	8003936 <HAL_TIM_IRQHandler>
=======
 8001cc0:	4803      	ldr	r0, [pc, #12]	; (8001cd0 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8001cc2:	f001 fdb4 	bl	800382e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8001cc6:	4803      	ldr	r0, [pc, #12]	; (8001cd4 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8001cc8:	f001 fdb1 	bl	800382e <HAL_TIM_IRQHandler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
<<<<<<< HEAD
 8001dd4:	bf00      	nop
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	200001d0 	.word	0x200001d0
 8001ddc:	20000190 	.word	0x20000190

08001de0 <TIM4_IRQHandler>:
=======
 8001ccc:	bf00      	nop
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200001c4 	.word	0x200001c4
 8001cd4:	20000184 	.word	0x20000184

08001cd8 <TIM4_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
<<<<<<< HEAD
 8001de0:	b580      	push	{r7, lr}
 8001de2:	af00      	add	r7, sp, #0
=======
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
<<<<<<< HEAD
 8001de4:	4802      	ldr	r0, [pc, #8]	; (8001df0 <TIM4_IRQHandler+0x10>)
 8001de6:	f001 fda6 	bl	8003936 <HAL_TIM_IRQHandler>
=======
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <TIM4_IRQHandler+0x10>)
 8001cde:	f001 fda6 	bl	800382e <HAL_TIM_IRQHandler>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
<<<<<<< HEAD
 8001dea:	bf00      	nop
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop
 8001df0:	2000008c 	.word	0x2000008c

08001df4 <SystemInit>:
=======
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20000080 	.word	0x20000080

08001cec <SystemInit>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
<<<<<<< HEAD
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001df8:	4b08      	ldr	r3, [pc, #32]	; (8001e1c <SystemInit+0x28>)
 8001dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dfe:	4a07      	ldr	r2, [pc, #28]	; (8001e1c <SystemInit+0x28>)
 8001e00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
=======
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf0:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <SystemInit+0x28>)
 8001cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cf6:	4a07      	ldr	r2, [pc, #28]	; (8001d14 <SystemInit+0x28>)
 8001cf8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cfc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
<<<<<<< HEAD
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <SystemInit+0x28>)
 8001e0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001e10:	bf00      	nop
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <Reset_Handler>:
=======
 8001d00:	4b04      	ldr	r3, [pc, #16]	; (8001d14 <SystemInit+0x28>)
 8001d02:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d06:	609a      	str	r2, [r3, #8]
#endif
}
 8001d08:	bf00      	nop
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	e000ed00 	.word	0xe000ed00

08001d18 <Reset_Handler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
<<<<<<< HEAD
 8001e20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e26:	e003      	b.n	8001e30 <LoopCopyDataInit>

08001e28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e2e:	3104      	adds	r1, #4

08001e30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e30:	480b      	ldr	r0, [pc, #44]	; (8001e60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e32:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e38:	d3f6      	bcc.n	8001e28 <CopyDataInit>
  ldr  r2, =_sbss
 8001e3a:	4a0b      	ldr	r2, [pc, #44]	; (8001e68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e3c:	e002      	b.n	8001e44 <LoopFillZerobss>

08001e3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e40:	f842 3b04 	str.w	r3, [r2], #4

08001e44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e48:	d3f9      	bcc.n	8001e3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e4a:	f7ff ffd3 	bl	8001df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e4e:	f002 fc57 	bl	8004700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e52:	f7ff f8e1 	bl	8001018 <main>
  bx  lr    
 8001e56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001e5c:	08004798 	.word	0x08004798
  ldr  r0, =_sdata
 8001e60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001e64:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001e68:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001e6c:	20000274 	.word	0x20000274

08001e70 <ADC_IRQHandler>:
=======
 8001d18:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d50 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d1c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d1e:	e003      	b.n	8001d28 <LoopCopyDataInit>

08001d20 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d20:	4b0c      	ldr	r3, [pc, #48]	; (8001d54 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d22:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d24:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d26:	3104      	adds	r1, #4

08001d28 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d28:	480b      	ldr	r0, [pc, #44]	; (8001d58 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d2c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d2e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d30:	d3f6      	bcc.n	8001d20 <CopyDataInit>
  ldr  r2, =_sbss
 8001d32:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d34:	e002      	b.n	8001d3c <LoopFillZerobss>

08001d36 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d36:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d38:	f842 3b04 	str.w	r3, [r2], #4

08001d3c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d3c:	4b09      	ldr	r3, [pc, #36]	; (8001d64 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d3e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d40:	d3f9      	bcc.n	8001d36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d42:	f7ff ffd3 	bl	8001cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d46:	f002 fc57 	bl	80045f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d4a:	f7ff f8f9 	bl	8000f40 <main>
  bx  lr    
 8001d4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d50:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d54:	08004690 	.word	0x08004690
  ldr  r0, =_sdata
 8001d58:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d5c:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001d60:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001d64:	20000268 	.word	0x20000268

08001d68 <ADC_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
<<<<<<< HEAD
 8001e70:	e7fe      	b.n	8001e70 <ADC_IRQHandler>
	...

08001e74 <HAL_Init>:
=======
 8001d68:	e7fe      	b.n	8001d68 <ADC_IRQHandler>
	...

08001d6c <HAL_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
<<<<<<< HEAD
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e78:	4b0e      	ldr	r3, [pc, #56]	; (8001eb4 <HAL_Init+0x40>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_Init+0x40>)
 8001e7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e82:	6013      	str	r3, [r2, #0]
=======
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d70:	4b0e      	ldr	r3, [pc, #56]	; (8001dac <HAL_Init+0x40>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a0d      	ldr	r2, [pc, #52]	; (8001dac <HAL_Init+0x40>)
 8001d76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d7a:	6013      	str	r3, [r2, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
<<<<<<< HEAD
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_Init+0x40>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_Init+0x40>)
 8001e8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e8e:	6013      	str	r3, [r2, #0]
=======
 8001d7c:	4b0b      	ldr	r3, [pc, #44]	; (8001dac <HAL_Init+0x40>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0a      	ldr	r2, [pc, #40]	; (8001dac <HAL_Init+0x40>)
 8001d82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d86:	6013      	str	r3, [r2, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
<<<<<<< HEAD
 8001e90:	4b08      	ldr	r3, [pc, #32]	; (8001eb4 <HAL_Init+0x40>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a07      	ldr	r2, [pc, #28]	; (8001eb4 <HAL_Init+0x40>)
 8001e96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e9a:	6013      	str	r3, [r2, #0]
=======
 8001d88:	4b08      	ldr	r3, [pc, #32]	; (8001dac <HAL_Init+0x40>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a07      	ldr	r2, [pc, #28]	; (8001dac <HAL_Init+0x40>)
 8001d8e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d92:	6013      	str	r3, [r2, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
<<<<<<< HEAD
 8001e9c:	2003      	movs	r0, #3
 8001e9e:	f000 f94d 	bl	800213c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ea2:	2000      	movs	r0, #0
 8001ea4:	f000 f808 	bl	8001eb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ea8:	f7ff fdae 	bl	8001a08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	40023c00 	.word	0x40023c00

08001eb8 <HAL_InitTick>:
=======
 8001d94:	2003      	movs	r0, #3
 8001d96:	f000 f94d 	bl	8002034 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d9a:	2000      	movs	r0, #0
 8001d9c:	f000 f808 	bl	8001db0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da0:	f7ff fdae 	bl	8001900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40023c00 	.word	0x40023c00

08001db0 <HAL_InitTick>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
<<<<<<< HEAD
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b082      	sub	sp, #8
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <HAL_InitTick+0x54>)
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	4b12      	ldr	r3, [pc, #72]	; (8001f10 <HAL_InitTick+0x58>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001ece:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ed2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f000 f965 	bl	80021a6 <HAL_SYSTICK_Config>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e00e      	b.n	8001f04 <HAL_InitTick+0x4c>
=======
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <HAL_InitTick+0x54>)
 8001dba:	681a      	ldr	r2, [r3, #0]
 8001dbc:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <HAL_InitTick+0x58>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f000 f965 	bl	800209e <HAL_SYSTICK_Config>
 8001dd4:	4603      	mov	r3, r0
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d001      	beq.n	8001dde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00e      	b.n	8001dfc <HAL_InitTick+0x4c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
<<<<<<< HEAD
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b0f      	cmp	r3, #15
 8001eea:	d80a      	bhi.n	8001f02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eec:	2200      	movs	r2, #0
 8001eee:	6879      	ldr	r1, [r7, #4]
 8001ef0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ef4:	f000 f92d 	bl	8002152 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ef8:	4a06      	ldr	r2, [pc, #24]	; (8001f14 <HAL_InitTick+0x5c>)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6013      	str	r3, [r2, #0]
=======
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2b0f      	cmp	r3, #15
 8001de2:	d80a      	bhi.n	8001dfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001de4:	2200      	movs	r2, #0
 8001de6:	6879      	ldr	r1, [r7, #4]
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f000 f92d 	bl	800204a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df0:	4a06      	ldr	r2, [pc, #24]	; (8001e0c <HAL_InitTick+0x5c>)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6013      	str	r3, [r2, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3708      	adds	r7, #8
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	20000000 	.word	0x20000000
 8001f10:	20000008 	.word	0x20000008
 8001f14:	20000004 	.word	0x20000004

08001f18 <HAL_IncTick>:
=======
 8001df6:	2300      	movs	r3, #0
 8001df8:	e000      	b.n	8001dfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000000 	.word	0x20000000
 8001e08:	20000008 	.word	0x20000008
 8001e0c:	20000004 	.word	0x20000004

08001e10 <HAL_IncTick>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
<<<<<<< HEAD
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <HAL_IncTick+0x20>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	461a      	mov	r2, r3
 8001f22:	4b06      	ldr	r3, [pc, #24]	; (8001f3c <HAL_IncTick+0x24>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4413      	add	r3, r2
 8001f28:	4a04      	ldr	r2, [pc, #16]	; (8001f3c <HAL_IncTick+0x24>)
 8001f2a:	6013      	str	r3, [r2, #0]
}
 8001f2c:	bf00      	nop
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
 8001f36:	bf00      	nop
 8001f38:	20000008 	.word	0x20000008
 8001f3c:	20000270 	.word	0x20000270

08001f40 <HAL_GetTick>:
=======
 8001e10:	b480      	push	{r7}
 8001e12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e14:	4b06      	ldr	r3, [pc, #24]	; (8001e30 <HAL_IncTick+0x20>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	461a      	mov	r2, r3
 8001e1a:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <HAL_IncTick+0x24>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	4a04      	ldr	r2, [pc, #16]	; (8001e34 <HAL_IncTick+0x24>)
 8001e22:	6013      	str	r3, [r2, #0]
}
 8001e24:	bf00      	nop
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000008 	.word	0x20000008
 8001e34:	20000264 	.word	0x20000264

08001e38 <HAL_GetTick>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
<<<<<<< HEAD
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  return uwTick;
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <HAL_GetTick+0x14>)
 8001f46:	681b      	ldr	r3, [r3, #0]
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	20000270 	.word	0x20000270

08001f58 <HAL_Delay>:
=======
 8001e38:	b480      	push	{r7}
 8001e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_GetTick+0x14>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	20000264 	.word	0x20000264

08001e50 <HAL_Delay>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
<<<<<<< HEAD
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b084      	sub	sp, #16
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f60:	f7ff ffee 	bl	8001f40 <HAL_GetTick>
 8001f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f70:	d005      	beq.n	8001f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <HAL_Delay+0x40>)
 8001f74:	781b      	ldrb	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f7e:	bf00      	nop
 8001f80:	f7ff ffde 	bl	8001f40 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	68bb      	ldr	r3, [r7, #8]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	68fa      	ldr	r2, [r7, #12]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d8f7      	bhi.n	8001f80 <HAL_Delay+0x28>
  {
  }
}
 8001f90:	bf00      	nop
 8001f92:	3710      	adds	r7, #16
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	20000008 	.word	0x20000008

08001f9c <__NVIC_SetPriorityGrouping>:
=======
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b084      	sub	sp, #16
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e58:	f7ff ffee 	bl	8001e38 <HAL_GetTick>
 8001e5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e68:	d005      	beq.n	8001e76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <HAL_Delay+0x40>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	461a      	mov	r2, r3
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	4413      	add	r3, r2
 8001e74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e76:	bf00      	nop
 8001e78:	f7ff ffde 	bl	8001e38 <HAL_GetTick>
 8001e7c:	4602      	mov	r2, r0
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	1ad3      	subs	r3, r2, r3
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d8f7      	bhi.n	8001e78 <HAL_Delay+0x28>
  {
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3710      	adds	r7, #16
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	20000008 	.word	0x20000008

08001e94 <__NVIC_SetPriorityGrouping>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 8001f9c:	b480      	push	{r7}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fb8:	4013      	ands	r3, r2
 8001fba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fce:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <__NVIC_SetPriorityGrouping+0x44>)
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60d3      	str	r3, [r2, #12]
}
 8001fd4:	bf00      	nop
 8001fd6:	3714      	adds	r7, #20
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fde:	4770      	bx	lr
 8001fe0:	e000ed00 	.word	0xe000ed00

08001fe4 <__NVIC_GetPriorityGrouping>:
=======
 8001e94:	b480      	push	{r7}
 8001e96:	b085      	sub	sp, #20
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f003 0307 	and.w	r3, r3, #7
 8001ea2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ea6:	68db      	ldr	r3, [r3, #12]
 8001ea8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ebc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ec0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ec4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ec6:	4a04      	ldr	r2, [pc, #16]	; (8001ed8 <__NVIC_SetPriorityGrouping+0x44>)
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	60d3      	str	r3, [r2, #12]
}
 8001ecc:	bf00      	nop
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed6:	4770      	bx	lr
 8001ed8:	e000ed00 	.word	0xe000ed00

08001edc <__NVIC_GetPriorityGrouping>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
<<<<<<< HEAD
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fe8:	4b04      	ldr	r3, [pc, #16]	; (8001ffc <__NVIC_GetPriorityGrouping+0x18>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	0a1b      	lsrs	r3, r3, #8
 8001fee:	f003 0307 	and.w	r3, r3, #7
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <__NVIC_EnableIRQ>:
=======
 8001edc:	b480      	push	{r7}
 8001ede:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ee0:	4b04      	ldr	r3, [pc, #16]	; (8001ef4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	0a1b      	lsrs	r3, r3, #8
 8001ee6:	f003 0307 	and.w	r3, r3, #7
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	e000ed00 	.word	0xe000ed00

08001ef8 <__NVIC_EnableIRQ>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	4603      	mov	r3, r0
 8002008:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800200a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800200e:	2b00      	cmp	r3, #0
 8002010:	db0b      	blt.n	800202a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002012:	79fb      	ldrb	r3, [r7, #7]
 8002014:	f003 021f 	and.w	r2, r3, #31
 8002018:	4907      	ldr	r1, [pc, #28]	; (8002038 <__NVIC_EnableIRQ+0x38>)
 800201a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	2001      	movs	r0, #1
 8002022:	fa00 f202 	lsl.w	r2, r0, r2
 8002026:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	e000e100 	.word	0xe000e100

0800203c <__NVIC_SetPriority>:
=======
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	db0b      	blt.n	8001f22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f0a:	79fb      	ldrb	r3, [r7, #7]
 8001f0c:	f003 021f 	and.w	r2, r3, #31
 8001f10:	4907      	ldr	r1, [pc, #28]	; (8001f30 <__NVIC_EnableIRQ+0x38>)
 8001f12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f16:	095b      	lsrs	r3, r3, #5
 8001f18:	2001      	movs	r0, #1
 8001f1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001f1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	e000e100 	.word	0xe000e100

08001f34 <__NVIC_SetPriority>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
<<<<<<< HEAD
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	4603      	mov	r3, r0
 8002044:	6039      	str	r1, [r7, #0]
 8002046:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204c:	2b00      	cmp	r3, #0
 800204e:	db0a      	blt.n	8002066 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	b2da      	uxtb	r2, r3
 8002054:	490c      	ldr	r1, [pc, #48]	; (8002088 <__NVIC_SetPriority+0x4c>)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	0112      	lsls	r2, r2, #4
 800205c:	b2d2      	uxtb	r2, r2
 800205e:	440b      	add	r3, r1
 8002060:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
=======
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db0a      	blt.n	8001f5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	490c      	ldr	r1, [pc, #48]	; (8001f80 <__NVIC_SetPriority+0x4c>)
 8001f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f52:	0112      	lsls	r2, r2, #4
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	440b      	add	r3, r1
 8001f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
<<<<<<< HEAD
 8002064:	e00a      	b.n	800207c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4908      	ldr	r1, [pc, #32]	; (800208c <__NVIC_SetPriority+0x50>)
 800206c:	79fb      	ldrb	r3, [r7, #7]
 800206e:	f003 030f 	and.w	r3, r3, #15
 8002072:	3b04      	subs	r3, #4
 8002074:	0112      	lsls	r2, r2, #4
 8002076:	b2d2      	uxtb	r2, r2
 8002078:	440b      	add	r3, r1
 800207a:	761a      	strb	r2, [r3, #24]
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000e100 	.word	0xe000e100
 800208c:	e000ed00 	.word	0xe000ed00

08002090 <NVIC_EncodePriority>:
=======
 8001f5c:	e00a      	b.n	8001f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	4908      	ldr	r1, [pc, #32]	; (8001f84 <__NVIC_SetPriority+0x50>)
 8001f64:	79fb      	ldrb	r3, [r7, #7]
 8001f66:	f003 030f 	and.w	r3, r3, #15
 8001f6a:	3b04      	subs	r3, #4
 8001f6c:	0112      	lsls	r2, r2, #4
 8001f6e:	b2d2      	uxtb	r2, r2
 8001f70:	440b      	add	r3, r1
 8001f72:	761a      	strb	r2, [r3, #24]
}
 8001f74:	bf00      	nop
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000e100 	.word	0xe000e100
 8001f84:	e000ed00 	.word	0xe000ed00

08001f88 <NVIC_EncodePriority>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
<<<<<<< HEAD
 8002090:	b480      	push	{r7}
 8002092:	b089      	sub	sp, #36	; 0x24
 8002094:	af00      	add	r7, sp, #0
 8002096:	60f8      	str	r0, [r7, #12]
 8002098:	60b9      	str	r1, [r7, #8]
 800209a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	f003 0307 	and.w	r3, r3, #7
 80020a2:	61fb      	str	r3, [r7, #28]
=======
 8001f88:	b480      	push	{r7}
 8001f8a:	b089      	sub	sp, #36	; 0x24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 0307 	and.w	r3, r3, #7
 8001f9a:	61fb      	str	r3, [r7, #28]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
<<<<<<< HEAD
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	f1c3 0307 	rsb	r3, r3, #7
 80020aa:	2b04      	cmp	r3, #4
 80020ac:	bf28      	it	cs
 80020ae:	2304      	movcs	r3, #4
 80020b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	3304      	adds	r3, #4
 80020b6:	2b06      	cmp	r3, #6
 80020b8:	d902      	bls.n	80020c0 <NVIC_EncodePriority+0x30>
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	3b03      	subs	r3, #3
 80020be:	e000      	b.n	80020c2 <NVIC_EncodePriority+0x32>
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	fa02 f303 	lsl.w	r3, r2, r3
 80020ce:	43da      	mvns	r2, r3
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	401a      	ands	r2, r3
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	43d9      	mvns	r1, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020e8:	4313      	orrs	r3, r2
         );
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3724      	adds	r7, #36	; 0x24
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr
	...

080020f8 <SysTick_Config>:
=======
 8001f9c:	69fb      	ldr	r3, [r7, #28]
 8001f9e:	f1c3 0307 	rsb	r3, r3, #7
 8001fa2:	2b04      	cmp	r3, #4
 8001fa4:	bf28      	it	cs
 8001fa6:	2304      	movcs	r3, #4
 8001fa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	3304      	adds	r3, #4
 8001fae:	2b06      	cmp	r3, #6
 8001fb0:	d902      	bls.n	8001fb8 <NVIC_EncodePriority+0x30>
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	3b03      	subs	r3, #3
 8001fb6:	e000      	b.n	8001fba <NVIC_EncodePriority+0x32>
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001fc0:	69bb      	ldr	r3, [r7, #24]
 8001fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc6:	43da      	mvns	r2, r3
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	401a      	ands	r2, r3
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001fd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001fda:	43d9      	mvns	r1, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	4313      	orrs	r3, r2
         );
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3724      	adds	r7, #36	; 0x24
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
	...

08001ff0 <SysTick_Config>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
<<<<<<< HEAD
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b082      	sub	sp, #8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	3b01      	subs	r3, #1
 8002104:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002108:	d301      	bcc.n	800210e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800210a:	2301      	movs	r3, #1
 800210c:	e00f      	b.n	800212e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <SysTick_Config+0x40>)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	3b01      	subs	r3, #1
 8002114:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002116:	210f      	movs	r1, #15
 8002118:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800211c:	f7ff ff8e 	bl	800203c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002120:	4b05      	ldr	r3, [pc, #20]	; (8002138 <SysTick_Config+0x40>)
 8002122:	2200      	movs	r2, #0
 8002124:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002126:	4b04      	ldr	r3, [pc, #16]	; (8002138 <SysTick_Config+0x40>)
 8002128:	2207      	movs	r2, #7
 800212a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800212c:	2300      	movs	r3, #0
}
 800212e:	4618      	mov	r0, r3
 8002130:	3708      	adds	r7, #8
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	e000e010 	.word	0xe000e010

0800213c <HAL_NVIC_SetPriorityGrouping>:
=======
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002000:	d301      	bcc.n	8002006 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002002:	2301      	movs	r3, #1
 8002004:	e00f      	b.n	8002026 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002006:	4a0a      	ldr	r2, [pc, #40]	; (8002030 <SysTick_Config+0x40>)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800200e:	210f      	movs	r1, #15
 8002010:	f04f 30ff 	mov.w	r0, #4294967295
 8002014:	f7ff ff8e 	bl	8001f34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002018:	4b05      	ldr	r3, [pc, #20]	; (8002030 <SysTick_Config+0x40>)
 800201a:	2200      	movs	r2, #0
 800201c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800201e:	4b04      	ldr	r3, [pc, #16]	; (8002030 <SysTick_Config+0x40>)
 8002020:	2207      	movs	r2, #7
 8002022:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002024:	2300      	movs	r3, #0
}
 8002026:	4618      	mov	r0, r3
 8002028:	3708      	adds	r7, #8
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	e000e010 	.word	0xe000e010

08002034 <HAL_NVIC_SetPriorityGrouping>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
<<<<<<< HEAD
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
=======
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
<<<<<<< HEAD
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff ff29 	bl	8001f9c <__NVIC_SetPriorityGrouping>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_NVIC_SetPriority>:
=======
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff ff29 	bl	8001e94 <__NVIC_SetPriorityGrouping>
}
 8002042:	bf00      	nop
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <HAL_NVIC_SetPriority>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
<<<<<<< HEAD
 8002152:	b580      	push	{r7, lr}
 8002154:	b086      	sub	sp, #24
 8002156:	af00      	add	r7, sp, #0
 8002158:	4603      	mov	r3, r0
 800215a:	60b9      	str	r1, [r7, #8]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
=======
 800204a:	b580      	push	{r7, lr}
 800204c:	b086      	sub	sp, #24
 800204e:	af00      	add	r7, sp, #0
 8002050:	4603      	mov	r3, r0
 8002052:	60b9      	str	r1, [r7, #8]
 8002054:	607a      	str	r2, [r7, #4]
 8002056:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002058:	2300      	movs	r3, #0
 800205a:	617b      	str	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
<<<<<<< HEAD
 8002164:	f7ff ff3e 	bl	8001fe4 <__NVIC_GetPriorityGrouping>
 8002168:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	68b9      	ldr	r1, [r7, #8]
 800216e:	6978      	ldr	r0, [r7, #20]
 8002170:	f7ff ff8e 	bl	8002090 <NVIC_EncodePriority>
 8002174:	4602      	mov	r2, r0
 8002176:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800217a:	4611      	mov	r1, r2
 800217c:	4618      	mov	r0, r3
 800217e:	f7ff ff5d 	bl	800203c <__NVIC_SetPriority>
}
 8002182:	bf00      	nop
 8002184:	3718      	adds	r7, #24
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_EnableIRQ>:
=======
 800205c:	f7ff ff3e 	bl	8001edc <__NVIC_GetPriorityGrouping>
 8002060:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	68b9      	ldr	r1, [r7, #8]
 8002066:	6978      	ldr	r0, [r7, #20]
 8002068:	f7ff ff8e 	bl	8001f88 <NVIC_EncodePriority>
 800206c:	4602      	mov	r2, r0
 800206e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002072:	4611      	mov	r1, r2
 8002074:	4618      	mov	r0, r3
 8002076:	f7ff ff5d 	bl	8001f34 <__NVIC_SetPriority>
}
 800207a:	bf00      	nop
 800207c:	3718      	adds	r7, #24
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}

08002082 <HAL_NVIC_EnableIRQ>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
<<<<<<< HEAD
 800218a:	b580      	push	{r7, lr}
 800218c:	b082      	sub	sp, #8
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	71fb      	strb	r3, [r7, #7]
=======
 8002082:	b580      	push	{r7, lr}
 8002084:	b082      	sub	sp, #8
 8002086:	af00      	add	r7, sp, #0
 8002088:	4603      	mov	r3, r0
 800208a:	71fb      	strb	r3, [r7, #7]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
<<<<<<< HEAD
 8002194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002198:	4618      	mov	r0, r3
 800219a:	f7ff ff31 	bl	8002000 <__NVIC_EnableIRQ>
}
 800219e:	bf00      	nop
 80021a0:	3708      	adds	r7, #8
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_SYSTICK_Config>:
=======
 800208c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002090:	4618      	mov	r0, r3
 8002092:	f7ff ff31 	bl	8001ef8 <__NVIC_EnableIRQ>
}
 8002096:	bf00      	nop
 8002098:	3708      	adds	r7, #8
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}

0800209e <HAL_SYSTICK_Config>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
<<<<<<< HEAD
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b082      	sub	sp, #8
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f7ff ffa2 	bl	80020f8 <SysTick_Config>
 80021b4:	4603      	mov	r3, r0
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3708      	adds	r7, #8
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}
	...

080021c0 <HAL_DMA_Init>:
=======
 800209e:	b580      	push	{r7, lr}
 80020a0:	b082      	sub	sp, #8
 80020a2:	af00      	add	r7, sp, #0
 80020a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffa2 	bl	8001ff0 <SysTick_Config>
 80020ac:	4603      	mov	r3, r0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3708      	adds	r7, #8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
	...

080020b8 <HAL_DMA_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021cc:	f7ff feb8 	bl	8001f40 <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]
=======
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80020c4:	f7ff feb8 	bl	8001e38 <HAL_GetTick>
 80020c8:	6138      	str	r0, [r7, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
<<<<<<< HEAD
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d101      	bne.n	80021dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e099      	b.n	8002310 <HAL_DMA_Init+0x150>
=======
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d101      	bne.n	80020d4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80020d0:	2301      	movs	r3, #1
 80020d2:	e099      	b.n	8002208 <HAL_DMA_Init+0x150>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
<<<<<<< HEAD
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2202      	movs	r2, #2
 80021e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021fc:	e00f      	b.n	800221e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021fe:	f7ff fe9f 	bl	8001f40 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b05      	cmp	r3, #5
 800220a:	d908      	bls.n	800221e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	2220      	movs	r2, #32
 8002210:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2203      	movs	r2, #3
 8002216:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800221a:	2303      	movs	r3, #3
 800221c:	e078      	b.n	8002310 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0301 	and.w	r3, r3, #1
 8002228:	2b00      	cmp	r3, #0
 800222a:	d1e8      	bne.n	80021fe <HAL_DMA_Init+0x3e>
=======
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2202      	movs	r2, #2
 80020e0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f022 0201 	bic.w	r2, r2, #1
 80020f2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020f4:	e00f      	b.n	8002116 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f6:	f7ff fe9f 	bl	8001e38 <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b05      	cmp	r3, #5
 8002102:	d908      	bls.n	8002116 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2220      	movs	r2, #32
 8002108:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2203      	movs	r2, #3
 800210e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e078      	b.n	8002208 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f003 0301 	and.w	r3, r3, #1
 8002120:	2b00      	cmp	r3, #0
 8002122:	d1e8      	bne.n	80020f6 <HAL_DMA_Init+0x3e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
<<<<<<< HEAD
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	4b38      	ldr	r3, [pc, #224]	; (8002318 <HAL_DMA_Init+0x158>)
 8002238:	4013      	ands	r3, r2
 800223a:	617b      	str	r3, [r7, #20]
=======
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800212c:	697a      	ldr	r2, [r7, #20]
 800212e:	4b38      	ldr	r3, [pc, #224]	; (8002210 <HAL_DMA_Init+0x158>)
 8002130:	4013      	ands	r3, r2
 8002132:	617b      	str	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
<<<<<<< HEAD
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800224a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002256:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002262:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a1b      	ldr	r3, [r3, #32]
 8002268:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800226a:	697a      	ldr	r2, [r7, #20]
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002274:	2b04      	cmp	r3, #4
 8002276:	d107      	bne.n	8002288 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002280:	4313      	orrs	r3, r2
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	4313      	orrs	r3, r2
 8002286:	617b      	str	r3, [r7, #20]
=======
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	685a      	ldr	r2, [r3, #4]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002142:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800214e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800215a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6a1b      	ldr	r3, [r3, #32]
 8002160:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4313      	orrs	r3, r2
 8002166:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216c:	2b04      	cmp	r3, #4
 800216e:	d107      	bne.n	8002180 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002178:	4313      	orrs	r3, r2
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
<<<<<<< HEAD
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	697a      	ldr	r2, [r7, #20]
 800228e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	695b      	ldr	r3, [r3, #20]
 8002296:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002298:	697b      	ldr	r3, [r7, #20]
 800229a:	f023 0307 	bic.w	r3, r3, #7
 800229e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a4:	697a      	ldr	r2, [r7, #20]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	d117      	bne.n	80022e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]
=======
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	697a      	ldr	r2, [r7, #20]
 8002186:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f023 0307 	bic.w	r3, r3, #7
 8002196:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	4313      	orrs	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a6:	2b04      	cmp	r3, #4
 80021a8:	d117      	bne.n	80021da <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	617b      	str	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
<<<<<<< HEAD
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fa6f 	bl	80027a8 <DMA_CheckFifoParam>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d008      	beq.n	80022e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2240      	movs	r2, #64	; 0x40
 80022d4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022de:	2301      	movs	r3, #1
 80022e0:	e016      	b.n	8002310 <HAL_DMA_Init+0x150>
=======
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00e      	beq.n	80021da <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80021bc:	6878      	ldr	r0, [r7, #4]
 80021be:	f000 fa6f 	bl	80026a0 <DMA_CheckFifoParam>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d008      	beq.n	80021da <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2240      	movs	r2, #64	; 0x40
 80021cc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80021d6:	2301      	movs	r3, #1
 80021d8:	e016      	b.n	8002208 <HAL_DMA_Init+0x150>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
<<<<<<< HEAD
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	697a      	ldr	r2, [r7, #20]
 80022e8:	615a      	str	r2, [r3, #20]
=======
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	697a      	ldr	r2, [r7, #20]
 80021e0:	615a      	str	r2, [r3, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
<<<<<<< HEAD
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fa26 	bl	800273c <DMA_CalcBaseAndBitshift>
 80022f0:	4603      	mov	r3, r0
 80022f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f8:	223f      	movs	r2, #63	; 0x3f
 80022fa:	409a      	lsls	r2, r3
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2200      	movs	r2, #0
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2201      	movs	r2, #1
 800230a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3718      	adds	r7, #24
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	f010803f 	.word	0xf010803f

0800231c <HAL_DMA_Start_IT>:
=======
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 fa26 	bl	8002634 <DMA_CalcBaseAndBitshift>
 80021e8:	4603      	mov	r3, r0
 80021ea:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f0:	223f      	movs	r2, #63	; 0x3f
 80021f2:	409a      	lsls	r2, r3
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3718      	adds	r7, #24
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	f010803f 	.word	0xf010803f

08002214 <HAL_DMA_Start_IT>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
 8002328:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	613b      	str	r3, [r7, #16]
=======
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	60f8      	str	r0, [r7, #12]
 800221c:	60b9      	str	r1, [r7, #8]
 800221e:	607a      	str	r2, [r7, #4]
 8002220:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002222:	2300      	movs	r3, #0
 8002224:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800222a:	613b      	str	r3, [r7, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
<<<<<<< HEAD
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800233a:	2b01      	cmp	r3, #1
 800233c:	d101      	bne.n	8002342 <HAL_DMA_Start_IT+0x26>
 800233e:	2302      	movs	r3, #2
 8002340:	e040      	b.n	80023c4 <HAL_DMA_Start_IT+0xa8>
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	2201      	movs	r2, #1
 8002346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002350:	b2db      	uxtb	r3, r3
 8002352:	2b01      	cmp	r3, #1
 8002354:	d12f      	bne.n	80023b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2202      	movs	r2, #2
 800235a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2200      	movs	r2, #0
 8002362:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	68b9      	ldr	r1, [r7, #8]
 800236a:	68f8      	ldr	r0, [r7, #12]
 800236c:	f000 f9b8 	bl	80026e0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002374:	223f      	movs	r2, #63	; 0x3f
 8002376:	409a      	lsls	r2, r3
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681a      	ldr	r2, [r3, #0]
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f042 0216 	orr.w	r2, r2, #22
 800238a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d007      	beq.n	80023a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	681a      	ldr	r2, [r3, #0]
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f042 0208 	orr.w	r2, r2, #8
 80023a2:	601a      	str	r2, [r3, #0]
=======
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_DMA_Start_IT+0x26>
 8002236:	2302      	movs	r3, #2
 8002238:	e040      	b.n	80022bc <HAL_DMA_Start_IT+0xa8>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d12f      	bne.n	80022ae <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2202      	movs	r2, #2
 8002252:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	687a      	ldr	r2, [r7, #4]
 8002260:	68b9      	ldr	r1, [r7, #8]
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f000 f9b8 	bl	80025d8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	223f      	movs	r2, #63	; 0x3f
 800226e:	409a      	lsls	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	681a      	ldr	r2, [r3, #0]
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f042 0216 	orr.w	r2, r2, #22
 8002282:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	2b00      	cmp	r3, #0
 800228a:	d007      	beq.n	800229c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f042 0208 	orr.w	r2, r2, #8
 800229a:	601a      	str	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
<<<<<<< HEAD
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f042 0201 	orr.w	r2, r2, #1
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	e005      	b.n	80023c2 <HAL_DMA_Start_IT+0xa6>
=======
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e005      	b.n	80022ba <HAL_DMA_Start_IT+0xa6>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
<<<<<<< HEAD
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	2200      	movs	r2, #0
 80023ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023be:	2302      	movs	r3, #2
 80023c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_DMA_IRQHandler>:
=======
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80022b6:	2302      	movs	r3, #2
 80022b8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_DMA_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80023d8:	4b92      	ldr	r3, [pc, #584]	; (8002624 <HAL_DMA_IRQHandler+0x258>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a92      	ldr	r2, [pc, #584]	; (8002628 <HAL_DMA_IRQHandler+0x25c>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023f6:	2208      	movs	r2, #8
 80023f8:	409a      	lsls	r2, r3
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	4013      	ands	r3, r2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01a      	beq.n	8002438 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f022 0204 	bic.w	r2, r2, #4
 800241e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002424:	2208      	movs	r2, #8
 8002426:	409a      	lsls	r2, r3
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002430:	f043 0201 	orr.w	r2, r3, #1
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	655a      	str	r2, [r3, #84]	; 0x54
=======
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80022cc:	2300      	movs	r3, #0
 80022ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80022d0:	4b92      	ldr	r3, [pc, #584]	; (800251c <HAL_DMA_IRQHandler+0x258>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a92      	ldr	r2, [pc, #584]	; (8002520 <HAL_DMA_IRQHandler+0x25c>)
 80022d6:	fba2 2303 	umull	r2, r3, r2, r3
 80022da:	0a9b      	lsrs	r3, r3, #10
 80022dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80022e4:	693b      	ldr	r3, [r7, #16]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ee:	2208      	movs	r2, #8
 80022f0:	409a      	lsls	r2, r3
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	4013      	ands	r3, r2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d01a      	beq.n	8002330 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0304 	and.w	r3, r3, #4
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f022 0204 	bic.w	r2, r2, #4
 8002316:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231c:	2208      	movs	r2, #8
 800231e:	409a      	lsls	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002328:	f043 0201 	orr.w	r2, r3, #1
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800243c:	2201      	movs	r2, #1
 800243e:	409a      	lsls	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4013      	ands	r3, r2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d012      	beq.n	800246e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00b      	beq.n	800246e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2201      	movs	r2, #1
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	f043 0202 	orr.w	r2, r3, #2
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002334:	2201      	movs	r2, #1
 8002336:	409a      	lsls	r2, r3
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4013      	ands	r3, r2
 800233c:	2b00      	cmp	r3, #0
 800233e:	d012      	beq.n	8002366 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	695b      	ldr	r3, [r3, #20]
 8002346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800234a:	2b00      	cmp	r3, #0
 800234c:	d00b      	beq.n	8002366 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2201      	movs	r2, #1
 8002354:	409a      	lsls	r2, r3
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800235e:	f043 0202 	orr.w	r2, r3, #2
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002472:	2204      	movs	r2, #4
 8002474:	409a      	lsls	r2, r3
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	4013      	ands	r3, r2
 800247a:	2b00      	cmp	r3, #0
 800247c:	d012      	beq.n	80024a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0302 	and.w	r3, r3, #2
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00b      	beq.n	80024a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	2204      	movs	r2, #4
 8002492:	409a      	lsls	r2, r3
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800249c:	f043 0204 	orr.w	r2, r3, #4
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	655a      	str	r2, [r3, #84]	; 0x54
=======
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2204      	movs	r2, #4
 800236c:	409a      	lsls	r2, r3
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	4013      	ands	r3, r2
 8002372:	2b00      	cmp	r3, #0
 8002374:	d012      	beq.n	800239c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0302 	and.w	r3, r3, #2
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00b      	beq.n	800239c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002388:	2204      	movs	r2, #4
 800238a:	409a      	lsls	r2, r3
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002394:	f043 0204 	orr.w	r2, r3, #4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	655a      	str	r2, [r3, #84]	; 0x54
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024a8:	2210      	movs	r2, #16
 80024aa:	409a      	lsls	r2, r3
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d043      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f003 0308 	and.w	r3, r3, #8
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d03c      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c6:	2210      	movs	r2, #16
 80024c8:	409a      	lsls	r2, r3
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d018      	beq.n	800250e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d108      	bne.n	80024fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d024      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	4798      	blx	r3
 80024fa:	e01f      	b.n	800253c <HAL_DMA_IRQHandler+0x170>
=======
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023a0:	2210      	movs	r2, #16
 80023a2:	409a      	lsls	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d043      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d03c      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023be:	2210      	movs	r2, #16
 80023c0:	409a      	lsls	r2, r3
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d018      	beq.n	8002406 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d108      	bne.n	80023f4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d024      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	4798      	blx	r3
 80023f2:	e01f      	b.n	8002434 <HAL_DMA_IRQHandler+0x170>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
<<<<<<< HEAD
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002500:	2b00      	cmp	r3, #0
 8002502:	d01b      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	4798      	blx	r3
 800250c:	e016      	b.n	800253c <HAL_DMA_IRQHandler+0x170>
=======
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d01b      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	4798      	blx	r3
 8002404:	e016      	b.n	8002434 <HAL_DMA_IRQHandler+0x170>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d107      	bne.n	800252c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	681a      	ldr	r2, [r3, #0]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f022 0208 	bic.w	r2, r2, #8
 800252a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	4798      	blx	r3
=======
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002410:	2b00      	cmp	r3, #0
 8002412:	d107      	bne.n	8002424 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	681a      	ldr	r2, [r3, #0]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 0208 	bic.w	r2, r2, #8
 8002422:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002428:	2b00      	cmp	r3, #0
 800242a:	d003      	beq.n	8002434 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	4798      	blx	r3
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
<<<<<<< HEAD
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002540:	2220      	movs	r2, #32
 8002542:	409a      	lsls	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	4013      	ands	r3, r2
 8002548:	2b00      	cmp	r3, #0
 800254a:	f000 808e 	beq.w	800266a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f003 0310 	and.w	r3, r3, #16
 8002558:	2b00      	cmp	r3, #0
 800255a:	f000 8086 	beq.w	800266a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002562:	2220      	movs	r2, #32
 8002564:	409a      	lsls	r2, r3
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b05      	cmp	r3, #5
 8002574:	d136      	bne.n	80025e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0216 	bic.w	r2, r2, #22
 8002584:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695a      	ldr	r2, [r3, #20]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002594:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	2b00      	cmp	r3, #0
 800259c:	d103      	bne.n	80025a6 <HAL_DMA_IRQHandler+0x1da>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	681a      	ldr	r2, [r3, #0]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f022 0208 	bic.w	r2, r2, #8
 80025b4:	601a      	str	r2, [r3, #0]
=======
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002438:	2220      	movs	r2, #32
 800243a:	409a      	lsls	r2, r3
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	4013      	ands	r3, r2
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 808e 	beq.w	8002562 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8086 	beq.w	8002562 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800245a:	2220      	movs	r2, #32
 800245c:	409a      	lsls	r2, r3
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002468:	b2db      	uxtb	r3, r3
 800246a:	2b05      	cmp	r3, #5
 800246c:	d136      	bne.n	80024dc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f022 0216 	bic.w	r2, r2, #22
 800247c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	695a      	ldr	r2, [r3, #20]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800248c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002492:	2b00      	cmp	r3, #0
 8002494:	d103      	bne.n	800249e <HAL_DMA_IRQHandler+0x1da>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800249a:	2b00      	cmp	r3, #0
 800249c:	d007      	beq.n	80024ae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f022 0208 	bic.w	r2, r2, #8
 80024ac:	601a      	str	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
<<<<<<< HEAD
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ba:	223f      	movs	r2, #63	; 0x3f
 80025bc:	409a      	lsls	r2, r3
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d07d      	beq.n	80026d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025de:	6878      	ldr	r0, [r7, #4]
 80025e0:	4798      	blx	r3
        }
        return;
 80025e2:	e078      	b.n	80026d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d01c      	beq.n	800262c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d108      	bne.n	8002612 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	2b00      	cmp	r3, #0
 8002606:	d030      	beq.n	800266a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	4798      	blx	r3
 8002610:	e02b      	b.n	800266a <HAL_DMA_IRQHandler+0x29e>
=======
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b2:	223f      	movs	r2, #63	; 0x3f
 80024b4:	409a      	lsls	r2, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2201      	movs	r2, #1
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d07d      	beq.n	80025ce <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	4798      	blx	r3
        }
        return;
 80024da:	e078      	b.n	80025ce <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d01c      	beq.n	8002524 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d108      	bne.n	800250a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d030      	beq.n	8002562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	4798      	blx	r3
 8002508:	e02b      	b.n	8002562 <HAL_DMA_IRQHandler+0x29e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
<<<<<<< HEAD
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002616:	2b00      	cmp	r3, #0
 8002618:	d027      	beq.n	800266a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	4798      	blx	r3
 8002622:	e022      	b.n	800266a <HAL_DMA_IRQHandler+0x29e>
 8002624:	20000000 	.word	0x20000000
 8002628:	1b4e81b5 	.word	0x1b4e81b5
=======
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800250e:	2b00      	cmp	r3, #0
 8002510:	d027      	beq.n	8002562 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	4798      	blx	r3
 800251a:	e022      	b.n	8002562 <HAL_DMA_IRQHandler+0x29e>
 800251c:	20000000 	.word	0x20000000
 8002520:	1b4e81b5 	.word	0x1b4e81b5
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
<<<<<<< HEAD
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002636:	2b00      	cmp	r3, #0
 8002638:	d10f      	bne.n	800265a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0210 	bic.w	r2, r2, #16
 8002648:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d003      	beq.n	800266a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002666:	6878      	ldr	r0, [r7, #4]
 8002668:	4798      	blx	r3
=======
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10f      	bne.n	8002552 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0210 	bic.w	r2, r2, #16
 8002540:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2200      	movs	r2, #0
 8002546:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	4798      	blx	r3
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
<<<<<<< HEAD
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266e:	2b00      	cmp	r3, #0
 8002670:	d032      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002676:	f003 0301 	and.w	r3, r3, #1
 800267a:	2b00      	cmp	r3, #0
 800267c:	d022      	beq.n	80026c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2205      	movs	r2, #5
 8002682:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681a      	ldr	r2, [r3, #0]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f022 0201 	bic.w	r2, r2, #1
 8002694:	601a      	str	r2, [r3, #0]
=======
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002566:	2b00      	cmp	r3, #0
 8002568:	d032      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	d022      	beq.n	80025bc <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2205      	movs	r2, #5
 800257a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 0201 	bic.w	r2, r2, #1
 800258c:	601a      	str	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

      do
      {
        if (++count > timeout)
<<<<<<< HEAD
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	3301      	adds	r3, #1
 800269a:	60bb      	str	r3, [r7, #8]
 800269c:	697a      	ldr	r2, [r7, #20]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d307      	bcc.n	80026b2 <HAL_DMA_IRQHandler+0x2e6>
=======
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	3301      	adds	r3, #1
 8002592:	60bb      	str	r3, [r7, #8]
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	429a      	cmp	r2, r3
 8002598:	d307      	bcc.n	80025aa <HAL_DMA_IRQHandler+0x2e6>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
<<<<<<< HEAD
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d1f2      	bne.n	8002696 <HAL_DMA_IRQHandler+0x2ca>
 80026b0:	e000      	b.n	80026b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80026b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2201      	movs	r2, #1
 80026c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d005      	beq.n	80026d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026d0:	6878      	ldr	r0, [r7, #4]
 80026d2:	4798      	blx	r3
 80026d4:	e000      	b.n	80026d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80026d6:	bf00      	nop
    }
  }
}
 80026d8:	3718      	adds	r7, #24
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop

080026e0 <DMA_SetConfig>:
=======
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d1f2      	bne.n	800258e <HAL_DMA_IRQHandler+0x2ca>
 80025a8:	e000      	b.n	80025ac <HAL_DMA_IRQHandler+0x2e8>
          break;
 80025aa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d005      	beq.n	80025d0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	4798      	blx	r3
 80025cc:	e000      	b.n	80025d0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80025ce:	bf00      	nop
    }
  }
}
 80025d0:	3718      	adds	r7, #24
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop

080025d8 <DMA_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
<<<<<<< HEAD
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80026fc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	689b      	ldr	r3, [r3, #8]
 800270a:	2b40      	cmp	r3, #64	; 0x40
 800270c:	d108      	bne.n	8002720 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	60da      	str	r2, [r3, #12]
=======
 80025d8:	b480      	push	{r7}
 80025da:	b085      	sub	sp, #20
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
 80025e4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80025f4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	2b40      	cmp	r3, #64	; 0x40
 8002604:	d108      	bne.n	8002618 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	60da      	str	r2, [r3, #12]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
<<<<<<< HEAD
 800271e:	e007      	b.n	8002730 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	68ba      	ldr	r2, [r7, #8]
 8002726:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	687a      	ldr	r2, [r7, #4]
 800272e:	60da      	str	r2, [r3, #12]
}
 8002730:	bf00      	nop
 8002732:	3714      	adds	r7, #20
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <DMA_CalcBaseAndBitshift>:
=======
 8002616:	e007      	b.n	8002628 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	68ba      	ldr	r2, [r7, #8]
 800261e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	687a      	ldr	r2, [r7, #4]
 8002626:	60da      	str	r2, [r3, #12]
}
 8002628:	bf00      	nop
 800262a:	3714      	adds	r7, #20
 800262c:	46bd      	mov	sp, r7
 800262e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002632:	4770      	bx	lr

08002634 <DMA_CalcBaseAndBitshift>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 800273c:	b480      	push	{r7}
 800273e:	b085      	sub	sp, #20
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	b2db      	uxtb	r3, r3
 800274a:	3b10      	subs	r3, #16
 800274c:	4a14      	ldr	r2, [pc, #80]	; (80027a0 <DMA_CalcBaseAndBitshift+0x64>)
 800274e:	fba2 2303 	umull	r2, r3, r2, r3
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	60fb      	str	r3, [r7, #12]
=======
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	3b10      	subs	r3, #16
 8002644:	4a14      	ldr	r2, [pc, #80]	; (8002698 <DMA_CalcBaseAndBitshift+0x64>)
 8002646:	fba2 2303 	umull	r2, r3, r2, r3
 800264a:	091b      	lsrs	r3, r3, #4
 800264c:	60fb      	str	r3, [r7, #12]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
<<<<<<< HEAD
 8002756:	4a13      	ldr	r2, [pc, #76]	; (80027a4 <DMA_CalcBaseAndBitshift+0x68>)
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	4413      	add	r3, r2
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d909      	bls.n	800277e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002772:	f023 0303 	bic.w	r3, r3, #3
 8002776:	1d1a      	adds	r2, r3, #4
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	659a      	str	r2, [r3, #88]	; 0x58
 800277c:	e007      	b.n	800278e <DMA_CalcBaseAndBitshift+0x52>
=======
 800264e:	4a13      	ldr	r2, [pc, #76]	; (800269c <DMA_CalcBaseAndBitshift+0x68>)
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	2b03      	cmp	r3, #3
 8002660:	d909      	bls.n	8002676 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800266a:	f023 0303 	bic.w	r3, r3, #3
 800266e:	1d1a      	adds	r2, r3, #4
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	659a      	str	r2, [r3, #88]	; 0x58
 8002674:	e007      	b.n	8002686 <DMA_CalcBaseAndBitshift+0x52>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
<<<<<<< HEAD
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	aaaaaaab 	.word	0xaaaaaaab
 80027a4:	08004780 	.word	0x08004780

080027a8 <DMA_CheckFifoParam>:
=======
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800268a:	4618      	mov	r0, r3
 800268c:	3714      	adds	r7, #20
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
 8002696:	bf00      	nop
 8002698:	aaaaaaab 	.word	0xaaaaaaab
 800269c:	08004678 	.word	0x08004678

080026a0 <DMA_CheckFifoParam>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027b0:	2300      	movs	r3, #0
 80027b2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d11f      	bne.n	8002802 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	2b03      	cmp	r3, #3
 80027c6:	d855      	bhi.n	8002874 <DMA_CheckFifoParam+0xcc>
 80027c8:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <DMA_CheckFifoParam+0x28>)
 80027ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027ce:	bf00      	nop
 80027d0:	080027e1 	.word	0x080027e1
 80027d4:	080027f3 	.word	0x080027f3
 80027d8:	080027e1 	.word	0x080027e1
 80027dc:	08002875 	.word	0x08002875
=======
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026a8:	2300      	movs	r3, #0
 80026aa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	699b      	ldr	r3, [r3, #24]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d11f      	bne.n	80026fa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d855      	bhi.n	800276c <DMA_CheckFifoParam+0xcc>
 80026c0:	a201      	add	r2, pc, #4	; (adr r2, 80026c8 <DMA_CheckFifoParam+0x28>)
 80026c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c6:	bf00      	nop
 80026c8:	080026d9 	.word	0x080026d9
 80026cc:	080026eb 	.word	0x080026eb
 80026d0:	080026d9 	.word	0x080026d9
 80026d4:	0800276d 	.word	0x0800276d
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
<<<<<<< HEAD
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d045      	beq.n	8002878 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027f0:	e042      	b.n	8002878 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027f6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80027fa:	d13f      	bne.n	800287c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002800:	e03c      	b.n	800287c <DMA_CheckFifoParam+0xd4>
=======
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d045      	beq.n	8002770 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026e8:	e042      	b.n	8002770 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026f2:	d13f      	bne.n	8002774 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026f8:	e03c      	b.n	8002774 <DMA_CheckFifoParam+0xd4>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
<<<<<<< HEAD
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800280a:	d121      	bne.n	8002850 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	2b03      	cmp	r3, #3
 8002810:	d836      	bhi.n	8002880 <DMA_CheckFifoParam+0xd8>
 8002812:	a201      	add	r2, pc, #4	; (adr r2, 8002818 <DMA_CheckFifoParam+0x70>)
 8002814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002818:	08002829 	.word	0x08002829
 800281c:	0800282f 	.word	0x0800282f
 8002820:	08002829 	.word	0x08002829
 8002824:	08002841 	.word	0x08002841
=======
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002702:	d121      	bne.n	8002748 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2b03      	cmp	r3, #3
 8002708:	d836      	bhi.n	8002778 <DMA_CheckFifoParam+0xd8>
 800270a:	a201      	add	r2, pc, #4	; (adr r2, 8002710 <DMA_CheckFifoParam+0x70>)
 800270c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002710:	08002721 	.word	0x08002721
 8002714:	08002727 	.word	0x08002727
 8002718:	08002721 	.word	0x08002721
 800271c:	08002739 	.word	0x08002739
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
<<<<<<< HEAD
 8002828:	2301      	movs	r3, #1
 800282a:	73fb      	strb	r3, [r7, #15]
      break;
 800282c:	e02f      	b.n	800288e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002832:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d024      	beq.n	8002884 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800283e:	e021      	b.n	8002884 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002844:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002848:	d11e      	bne.n	8002888 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800284e:	e01b      	b.n	8002888 <DMA_CheckFifoParam+0xe0>
=======
 8002720:	2301      	movs	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
      break;
 8002724:	e02f      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800272a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d024      	beq.n	800277c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002736:	e021      	b.n	800277c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800273c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002740:	d11e      	bne.n	8002780 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002742:	2301      	movs	r3, #1
 8002744:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002746:	e01b      	b.n	8002780 <DMA_CheckFifoParam+0xe0>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
<<<<<<< HEAD
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	2b02      	cmp	r3, #2
 8002854:	d902      	bls.n	800285c <DMA_CheckFifoParam+0xb4>
 8002856:	2b03      	cmp	r3, #3
 8002858:	d003      	beq.n	8002862 <DMA_CheckFifoParam+0xba>
=======
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	2b02      	cmp	r3, #2
 800274c:	d902      	bls.n	8002754 <DMA_CheckFifoParam+0xb4>
 800274e:	2b03      	cmp	r3, #3
 8002750:	d003      	beq.n	800275a <DMA_CheckFifoParam+0xba>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
<<<<<<< HEAD
 800285a:	e018      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 800285c:	2301      	movs	r3, #1
 800285e:	73fb      	strb	r3, [r7, #15]
      break;
 8002860:	e015      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002866:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00e      	beq.n	800288c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 800286e:	2301      	movs	r3, #1
 8002870:	73fb      	strb	r3, [r7, #15]
      break;
 8002872:	e00b      	b.n	800288c <DMA_CheckFifoParam+0xe4>
      break;
 8002874:	bf00      	nop
 8002876:	e00a      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      break;
 8002878:	bf00      	nop
 800287a:	e008      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      break;
 800287c:	bf00      	nop
 800287e:	e006      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      break;
 8002880:	bf00      	nop
 8002882:	e004      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      break;
 8002884:	bf00      	nop
 8002886:	e002      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      break;   
 8002888:	bf00      	nop
 800288a:	e000      	b.n	800288e <DMA_CheckFifoParam+0xe6>
      break;
 800288c:	bf00      	nop
=======
 8002752:	e018      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	73fb      	strb	r3, [r7, #15]
      break;
 8002758:	e015      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00e      	beq.n	8002784 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	73fb      	strb	r3, [r7, #15]
      break;
 800276a:	e00b      	b.n	8002784 <DMA_CheckFifoParam+0xe4>
      break;
 800276c:	bf00      	nop
 800276e:	e00a      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;
 8002770:	bf00      	nop
 8002772:	e008      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;
 8002774:	bf00      	nop
 8002776:	e006      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;
 8002778:	bf00      	nop
 800277a:	e004      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;
 800277c:	bf00      	nop
 800277e:	e002      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;   
 8002780:	bf00      	nop
 8002782:	e000      	b.n	8002786 <DMA_CheckFifoParam+0xe6>
      break;
 8002784:	bf00      	nop
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  } 
  
  return status; 
<<<<<<< HEAD
 800288e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002890:	4618      	mov	r0, r3
 8002892:	3714      	adds	r7, #20
 8002894:	46bd      	mov	sp, r7
 8002896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289a:	4770      	bx	lr

0800289c <HAL_GPIO_Init>:
=======
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3714      	adds	r7, #20
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_GPIO_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
<<<<<<< HEAD
 800289c:	b480      	push	{r7}
 800289e:	b089      	sub	sp, #36	; 0x24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61bb      	str	r3, [r7, #24]
=======
 8002794:	b480      	push	{r7}
 8002796:	b089      	sub	sp, #36	; 0x24
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800279e:	2300      	movs	r3, #0
 80027a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80027a2:	2300      	movs	r3, #0
 80027a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80027a6:	2300      	movs	r3, #0
 80027a8:	61bb      	str	r3, [r7, #24]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
<<<<<<< HEAD
 80028b2:	2300      	movs	r3, #0
 80028b4:	61fb      	str	r3, [r7, #28]
 80028b6:	e16b      	b.n	8002b90 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028b8:	2201      	movs	r2, #1
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	fa02 f303 	lsl.w	r3, r2, r3
 80028c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4013      	ands	r3, r2
 80028ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028cc:	693a      	ldr	r2, [r7, #16]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	429a      	cmp	r2, r3
 80028d2:	f040 815a 	bne.w	8002b8a <HAL_GPIO_Init+0x2ee>
=======
 80027aa:	2300      	movs	r3, #0
 80027ac:	61fb      	str	r3, [r7, #28]
 80027ae:	e16b      	b.n	8002a88 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80027b0:	2201      	movs	r2, #1
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	fa02 f303 	lsl.w	r3, r2, r3
 80027b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	697a      	ldr	r2, [r7, #20]
 80027c0:	4013      	ands	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80027c4:	693a      	ldr	r2, [r7, #16]
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	429a      	cmp	r2, r3
 80027ca:	f040 815a 	bne.w	8002a82 <HAL_GPIO_Init+0x2ee>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
<<<<<<< HEAD
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d00b      	beq.n	80028f6 <HAL_GPIO_Init+0x5a>
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d007      	beq.n	80028f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028ea:	2b11      	cmp	r3, #17
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	2b12      	cmp	r3, #18
 80028f4:	d130      	bne.n	8002958 <HAL_GPIO_Init+0xbc>
=======
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d00b      	beq.n	80027ee <HAL_GPIO_Init+0x5a>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d007      	beq.n	80027ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80027e2:	2b11      	cmp	r3, #17
 80027e4:	d003      	beq.n	80027ee <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	2b12      	cmp	r3, #18
 80027ec:	d130      	bne.n	8002850 <HAL_GPIO_Init+0xbc>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
<<<<<<< HEAD
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	2203      	movs	r2, #3
 8002902:	fa02 f303 	lsl.w	r3, r2, r3
 8002906:	43db      	mvns	r3, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4013      	ands	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	69ba      	ldr	r2, [r7, #24]
 8002924:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800292c:	2201      	movs	r2, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	43db      	mvns	r3, r3
 8002936:	69ba      	ldr	r2, [r7, #24]
 8002938:	4013      	ands	r3, r2
 800293a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	091b      	lsrs	r3, r3, #4
 8002942:	f003 0201 	and.w	r2, r3, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	4313      	orrs	r3, r2
 8002950:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	605a      	str	r2, [r3, #4]
=======
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80027f4:	69fb      	ldr	r3, [r7, #28]
 80027f6:	005b      	lsls	r3, r3, #1
 80027f8:	2203      	movs	r2, #3
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	68da      	ldr	r2, [r3, #12]
 800280a:	69fb      	ldr	r3, [r7, #28]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	69ba      	ldr	r2, [r7, #24]
 8002814:	4313      	orrs	r3, r2
 8002816:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	69ba      	ldr	r2, [r7, #24]
 800281c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002824:	2201      	movs	r2, #1
 8002826:	69fb      	ldr	r3, [r7, #28]
 8002828:	fa02 f303 	lsl.w	r3, r2, r3
 800282c:	43db      	mvns	r3, r3
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4013      	ands	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	091b      	lsrs	r3, r3, #4
 800283a:	f003 0201 	and.w	r2, r3, #1
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	4313      	orrs	r3, r2
 8002848:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	605a      	str	r2, [r3, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
<<<<<<< HEAD
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	68db      	ldr	r3, [r3, #12]
 800295c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	005b      	lsls	r3, r3, #1
 8002962:	2203      	movs	r2, #3
 8002964:	fa02 f303 	lsl.w	r3, r2, r3
 8002968:	43db      	mvns	r3, r3
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4013      	ands	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	fa02 f303 	lsl.w	r3, r2, r3
 800297c:	69ba      	ldr	r2, [r7, #24]
 800297e:	4313      	orrs	r3, r2
 8002980:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d003      	beq.n	8002998 <HAL_GPIO_Init+0xfc>
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b12      	cmp	r3, #18
 8002996:	d123      	bne.n	80029e0 <HAL_GPIO_Init+0x144>
=======
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	68db      	ldr	r3, [r3, #12]
 8002854:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	005b      	lsls	r3, r3, #1
 800285a:	2203      	movs	r2, #3
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	43db      	mvns	r3, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4013      	ands	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	69fb      	ldr	r3, [r7, #28]
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	fa02 f303 	lsl.w	r3, r2, r3
 8002874:	69ba      	ldr	r2, [r7, #24]
 8002876:	4313      	orrs	r3, r2
 8002878:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	69ba      	ldr	r2, [r7, #24]
 800287e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	2b02      	cmp	r3, #2
 8002886:	d003      	beq.n	8002890 <HAL_GPIO_Init+0xfc>
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b12      	cmp	r3, #18
 800288e:	d123      	bne.n	80028d8 <HAL_GPIO_Init+0x144>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
<<<<<<< HEAD
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	08da      	lsrs	r2, r3, #3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3208      	adds	r2, #8
 80029a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	220f      	movs	r2, #15
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	691a      	ldr	r2, [r3, #16]
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	08da      	lsrs	r2, r3, #3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	3208      	adds	r2, #8
 80029da:	69b9      	ldr	r1, [r7, #24]
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
=======
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	08da      	lsrs	r2, r3, #3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3208      	adds	r2, #8
 8002898:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800289c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	f003 0307 	and.w	r3, r3, #7
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	220f      	movs	r2, #15
 80028a8:	fa02 f303 	lsl.w	r3, r2, r3
 80028ac:	43db      	mvns	r3, r3
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4013      	ands	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	691a      	ldr	r2, [r3, #16]
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	009b      	lsls	r3, r3, #2
 80028c0:	fa02 f303 	lsl.w	r3, r2, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	08da      	lsrs	r2, r3, #3
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3208      	adds	r2, #8
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
<<<<<<< HEAD
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	2203      	movs	r2, #3
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	43db      	mvns	r3, r3
 80029f2:	69ba      	ldr	r2, [r7, #24]
 80029f4:	4013      	ands	r3, r2
 80029f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	f003 0203 	and.w	r2, r3, #3
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fa02 f303 	lsl.w	r3, r2, r3
 8002a08:	69ba      	ldr	r2, [r7, #24]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	601a      	str	r2, [r3, #0]
=======
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	2203      	movs	r2, #3
 80028e4:	fa02 f303 	lsl.w	r3, r2, r3
 80028e8:	43db      	mvns	r3, r3
 80028ea:	69ba      	ldr	r2, [r7, #24]
 80028ec:	4013      	ands	r3, r2
 80028ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	f003 0203 	and.w	r2, r3, #3
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	005b      	lsls	r3, r3, #1
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4313      	orrs	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	601a      	str	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
<<<<<<< HEAD
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80b4 	beq.w	8002b8a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b5f      	ldr	r3, [pc, #380]	; (8002ba4 <HAL_GPIO_Init+0x308>)
 8002a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a2a:	4a5e      	ldr	r2, [pc, #376]	; (8002ba4 <HAL_GPIO_Init+0x308>)
 8002a2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a30:	6453      	str	r3, [r2, #68]	; 0x44
 8002a32:	4b5c      	ldr	r3, [pc, #368]	; (8002ba4 <HAL_GPIO_Init+0x308>)
 8002a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a3e:	4a5a      	ldr	r2, [pc, #360]	; (8002ba8 <HAL_GPIO_Init+0x30c>)
 8002a40:	69fb      	ldr	r3, [r7, #28]
 8002a42:	089b      	lsrs	r3, r3, #2
 8002a44:	3302      	adds	r3, #2
 8002a46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a4c:	69fb      	ldr	r3, [r7, #28]
 8002a4e:	f003 0303 	and.w	r3, r3, #3
 8002a52:	009b      	lsls	r3, r3, #2
 8002a54:	220f      	movs	r2, #15
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43db      	mvns	r3, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4013      	ands	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a51      	ldr	r2, [pc, #324]	; (8002bac <HAL_GPIO_Init+0x310>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d02b      	beq.n	8002ac2 <HAL_GPIO_Init+0x226>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a50      	ldr	r2, [pc, #320]	; (8002bb0 <HAL_GPIO_Init+0x314>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d025      	beq.n	8002abe <HAL_GPIO_Init+0x222>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a4f      	ldr	r2, [pc, #316]	; (8002bb4 <HAL_GPIO_Init+0x318>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01f      	beq.n	8002aba <HAL_GPIO_Init+0x21e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4e      	ldr	r2, [pc, #312]	; (8002bb8 <HAL_GPIO_Init+0x31c>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d019      	beq.n	8002ab6 <HAL_GPIO_Init+0x21a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a4d      	ldr	r2, [pc, #308]	; (8002bbc <HAL_GPIO_Init+0x320>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d013      	beq.n	8002ab2 <HAL_GPIO_Init+0x216>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a4c      	ldr	r2, [pc, #304]	; (8002bc0 <HAL_GPIO_Init+0x324>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d00d      	beq.n	8002aae <HAL_GPIO_Init+0x212>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a4b      	ldr	r2, [pc, #300]	; (8002bc4 <HAL_GPIO_Init+0x328>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d007      	beq.n	8002aaa <HAL_GPIO_Init+0x20e>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a4a      	ldr	r2, [pc, #296]	; (8002bc8 <HAL_GPIO_Init+0x32c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d101      	bne.n	8002aa6 <HAL_GPIO_Init+0x20a>
 8002aa2:	2307      	movs	r3, #7
 8002aa4:	e00e      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	e00c      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002aaa:	2306      	movs	r3, #6
 8002aac:	e00a      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002aae:	2305      	movs	r3, #5
 8002ab0:	e008      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002ab2:	2304      	movs	r3, #4
 8002ab4:	e006      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e004      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002aba:	2302      	movs	r3, #2
 8002abc:	e002      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e000      	b.n	8002ac4 <HAL_GPIO_Init+0x228>
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	69fa      	ldr	r2, [r7, #28]
 8002ac6:	f002 0203 	and.w	r2, r2, #3
 8002aca:	0092      	lsls	r2, r2, #2
 8002acc:	4093      	lsls	r3, r2
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ad4:	4934      	ldr	r1, [pc, #208]	; (8002ba8 <HAL_GPIO_Init+0x30c>)
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	089b      	lsrs	r3, r3, #2
 8002ada:	3302      	adds	r3, #2
 8002adc:	69ba      	ldr	r2, [r7, #24]
 8002ade:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ae2:	4b3a      	ldr	r3, [pc, #232]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	43db      	mvns	r3, r3
 8002aec:	69ba      	ldr	r2, [r7, #24]
 8002aee:	4013      	ands	r3, r2
 8002af0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b06:	4a31      	ldr	r2, [pc, #196]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002b08:	69bb      	ldr	r3, [r7, #24]
 8002b0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002b0c:	4b2f      	ldr	r3, [pc, #188]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b30:	4a26      	ldr	r2, [pc, #152]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b36:	4b25      	ldr	r3, [pc, #148]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	43db      	mvns	r3, r3
 8002b40:	69ba      	ldr	r2, [r7, #24]
 8002b42:	4013      	ands	r3, r2
 8002b44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b5a:	4a1c      	ldr	r2, [pc, #112]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002b5c:	69bb      	ldr	r3, [r7, #24]
 8002b5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b60:	4b1a      	ldr	r3, [pc, #104]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002b62:	68db      	ldr	r3, [r3, #12]
 8002b64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	69ba      	ldr	r2, [r7, #24]
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d003      	beq.n	8002b84 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b84:	4a11      	ldr	r2, [pc, #68]	; (8002bcc <HAL_GPIO_Init+0x330>)
 8002b86:	69bb      	ldr	r3, [r7, #24]
 8002b88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b8a:	69fb      	ldr	r3, [r7, #28]
 8002b8c:	3301      	adds	r3, #1
 8002b8e:	61fb      	str	r3, [r7, #28]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	2b0f      	cmp	r3, #15
 8002b94:	f67f ae90 	bls.w	80028b8 <HAL_GPIO_Init+0x1c>
=======
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002914:	2b00      	cmp	r3, #0
 8002916:	f000 80b4 	beq.w	8002a82 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800291a:	2300      	movs	r3, #0
 800291c:	60fb      	str	r3, [r7, #12]
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <HAL_GPIO_Init+0x308>)
 8002920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002922:	4a5e      	ldr	r2, [pc, #376]	; (8002a9c <HAL_GPIO_Init+0x308>)
 8002924:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002928:	6453      	str	r3, [r2, #68]	; 0x44
 800292a:	4b5c      	ldr	r3, [pc, #368]	; (8002a9c <HAL_GPIO_Init+0x308>)
 800292c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800292e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002936:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <HAL_GPIO_Init+0x30c>)
 8002938:	69fb      	ldr	r3, [r7, #28]
 800293a:	089b      	lsrs	r3, r3, #2
 800293c:	3302      	adds	r3, #2
 800293e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	f003 0303 	and.w	r3, r3, #3
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	220f      	movs	r2, #15
 800294e:	fa02 f303 	lsl.w	r3, r2, r3
 8002952:	43db      	mvns	r3, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4013      	ands	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a51      	ldr	r2, [pc, #324]	; (8002aa4 <HAL_GPIO_Init+0x310>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d02b      	beq.n	80029ba <HAL_GPIO_Init+0x226>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a50      	ldr	r2, [pc, #320]	; (8002aa8 <HAL_GPIO_Init+0x314>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d025      	beq.n	80029b6 <HAL_GPIO_Init+0x222>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	4a4f      	ldr	r2, [pc, #316]	; (8002aac <HAL_GPIO_Init+0x318>)
 800296e:	4293      	cmp	r3, r2
 8002970:	d01f      	beq.n	80029b2 <HAL_GPIO_Init+0x21e>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a4e      	ldr	r2, [pc, #312]	; (8002ab0 <HAL_GPIO_Init+0x31c>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d019      	beq.n	80029ae <HAL_GPIO_Init+0x21a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4a4d      	ldr	r2, [pc, #308]	; (8002ab4 <HAL_GPIO_Init+0x320>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d013      	beq.n	80029aa <HAL_GPIO_Init+0x216>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a4c      	ldr	r2, [pc, #304]	; (8002ab8 <HAL_GPIO_Init+0x324>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d00d      	beq.n	80029a6 <HAL_GPIO_Init+0x212>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	4a4b      	ldr	r2, [pc, #300]	; (8002abc <HAL_GPIO_Init+0x328>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d007      	beq.n	80029a2 <HAL_GPIO_Init+0x20e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a4a      	ldr	r2, [pc, #296]	; (8002ac0 <HAL_GPIO_Init+0x32c>)
 8002996:	4293      	cmp	r3, r2
 8002998:	d101      	bne.n	800299e <HAL_GPIO_Init+0x20a>
 800299a:	2307      	movs	r3, #7
 800299c:	e00e      	b.n	80029bc <HAL_GPIO_Init+0x228>
 800299e:	2308      	movs	r3, #8
 80029a0:	e00c      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029a2:	2306      	movs	r3, #6
 80029a4:	e00a      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029a6:	2305      	movs	r3, #5
 80029a8:	e008      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029aa:	2304      	movs	r3, #4
 80029ac:	e006      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029ae:	2303      	movs	r3, #3
 80029b0:	e004      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029b2:	2302      	movs	r3, #2
 80029b4:	e002      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029b6:	2301      	movs	r3, #1
 80029b8:	e000      	b.n	80029bc <HAL_GPIO_Init+0x228>
 80029ba:	2300      	movs	r3, #0
 80029bc:	69fa      	ldr	r2, [r7, #28]
 80029be:	f002 0203 	and.w	r2, r2, #3
 80029c2:	0092      	lsls	r2, r2, #2
 80029c4:	4093      	lsls	r3, r2
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80029cc:	4934      	ldr	r1, [pc, #208]	; (8002aa0 <HAL_GPIO_Init+0x30c>)
 80029ce:	69fb      	ldr	r3, [r7, #28]
 80029d0:	089b      	lsrs	r3, r3, #2
 80029d2:	3302      	adds	r3, #2
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029da:	4b3a      	ldr	r3, [pc, #232]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	43db      	mvns	r3, r3
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	4013      	ands	r3, r2
 80029e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d003      	beq.n	80029fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80029fe:	4a31      	ldr	r2, [pc, #196]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002a04:	4b2f      	ldr	r3, [pc, #188]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	43db      	mvns	r3, r3
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	4013      	ands	r3, r2
 8002a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d003      	beq.n	8002a28 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002a20:	69ba      	ldr	r2, [r7, #24]
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002a28:	4a26      	ldr	r2, [pc, #152]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002a2e:	4b25      	ldr	r3, [pc, #148]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	69ba      	ldr	r2, [r7, #24]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d003      	beq.n	8002a52 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	693b      	ldr	r3, [r7, #16]
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002a52:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002a58:	4b1a      	ldr	r3, [pc, #104]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a5e:	693b      	ldr	r3, [r7, #16]
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d003      	beq.n	8002a7c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	693b      	ldr	r3, [r7, #16]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002a7c:	4a11      	ldr	r2, [pc, #68]	; (8002ac4 <HAL_GPIO_Init+0x330>)
 8002a7e:	69bb      	ldr	r3, [r7, #24]
 8002a80:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	69fb      	ldr	r3, [r7, #28]
 8002a84:	3301      	adds	r3, #1
 8002a86:	61fb      	str	r3, [r7, #28]
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	f67f ae90 	bls.w	80027b0 <HAL_GPIO_Init+0x1c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
  }
}
<<<<<<< HEAD
 8002b98:	bf00      	nop
 8002b9a:	3724      	adds	r7, #36	; 0x24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr
 8002ba4:	40023800 	.word	0x40023800
 8002ba8:	40013800 	.word	0x40013800
 8002bac:	40020000 	.word	0x40020000
 8002bb0:	40020400 	.word	0x40020400
 8002bb4:	40020800 	.word	0x40020800
 8002bb8:	40020c00 	.word	0x40020c00
 8002bbc:	40021000 	.word	0x40021000
 8002bc0:	40021400 	.word	0x40021400
 8002bc4:	40021800 	.word	0x40021800
 8002bc8:	40021c00 	.word	0x40021c00
 8002bcc:	40013c00 	.word	0x40013c00

08002bd0 <HAL_GPIO_WritePin>:
=======
 8002a90:	bf00      	nop
 8002a92:	3724      	adds	r7, #36	; 0x24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	40023800 	.word	0x40023800
 8002aa0:	40013800 	.word	0x40013800
 8002aa4:	40020000 	.word	0x40020000
 8002aa8:	40020400 	.word	0x40020400
 8002aac:	40020800 	.word	0x40020800
 8002ab0:	40020c00 	.word	0x40020c00
 8002ab4:	40021000 	.word	0x40021000
 8002ab8:	40021400 	.word	0x40021400
 8002abc:	40021800 	.word	0x40021800
 8002ac0:	40021c00 	.word	0x40021c00
 8002ac4:	40013c00 	.word	0x40013c00

08002ac8 <HAL_GPIO_WritePin>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
<<<<<<< HEAD
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	460b      	mov	r3, r1
 8002bda:	807b      	strh	r3, [r7, #2]
 8002bdc:	4613      	mov	r3, r2
 8002bde:	707b      	strb	r3, [r7, #1]
=======
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	807b      	strh	r3, [r7, #2]
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	707b      	strb	r3, [r7, #1]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
<<<<<<< HEAD
 8002be0:	787b      	ldrb	r3, [r7, #1]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002be6:	887a      	ldrh	r2, [r7, #2]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	619a      	str	r2, [r3, #24]
=======
 8002ad8:	787b      	ldrb	r3, [r7, #1]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d003      	beq.n	8002ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ade:	887a      	ldrh	r2, [r7, #2]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	619a      	str	r2, [r3, #24]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
<<<<<<< HEAD
 8002bec:	e003      	b.n	8002bf6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bee:	887b      	ldrh	r3, [r7, #2]
 8002bf0:	041a      	lsls	r2, r3, #16
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	619a      	str	r2, [r3, #24]
}
 8002bf6:	bf00      	nop
 8002bf8:	370c      	adds	r7, #12
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr

08002c02 <HAL_GPIO_TogglePin>:
=======
 8002ae4:	e003      	b.n	8002aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ae6:	887b      	ldrh	r3, [r7, #2]
 8002ae8:	041a      	lsls	r2, r3, #16
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	619a      	str	r2, [r3, #24]
}
 8002aee:	bf00      	nop
 8002af0:	370c      	adds	r7, #12
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr

08002afa <HAL_GPIO_TogglePin>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002c02:	b480      	push	{r7}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	807b      	strh	r3, [r7, #2]
=======
 8002afa:	b480      	push	{r7}
 8002afc:	b083      	sub	sp, #12
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	6078      	str	r0, [r7, #4]
 8002b02:	460b      	mov	r3, r1
 8002b04:	807b      	strh	r3, [r7, #2]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
<<<<<<< HEAD
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	695a      	ldr	r2, [r3, #20]
 8002c12:	887b      	ldrh	r3, [r7, #2]
 8002c14:	401a      	ands	r2, r3
 8002c16:	887b      	ldrh	r3, [r7, #2]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d104      	bne.n	8002c26 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002c1c:	887b      	ldrh	r3, [r7, #2]
 8002c1e:	041a      	lsls	r2, r3, #16
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	619a      	str	r2, [r3, #24]
=======
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695a      	ldr	r2, [r3, #20]
 8002b0a:	887b      	ldrh	r3, [r7, #2]
 8002b0c:	401a      	ands	r2, r3
 8002b0e:	887b      	ldrh	r3, [r7, #2]
 8002b10:	429a      	cmp	r2, r3
 8002b12:	d104      	bne.n	8002b1e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002b14:	887b      	ldrh	r3, [r7, #2]
 8002b16:	041a      	lsls	r2, r3, #16
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	619a      	str	r2, [r3, #24]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
<<<<<<< HEAD
 8002c24:	e002      	b.n	8002c2c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002c26:	887a      	ldrh	r2, [r7, #2]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	619a      	str	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <HAL_GPIO_EXTI_IRQHandler>:
=======
 8002b1c:	e002      	b.n	8002b24 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002b1e:	887a      	ldrh	r2, [r7, #2]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	619a      	str	r2, [r3, #24]
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <HAL_GPIO_EXTI_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
<<<<<<< HEAD
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c42:	4b08      	ldr	r3, [pc, #32]	; (8002c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c44:	695a      	ldr	r2, [r3, #20]
 8002c46:	88fb      	ldrh	r3, [r7, #6]
 8002c48:	4013      	ands	r3, r2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d006      	beq.n	8002c5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c4e:	4a05      	ldr	r2, [pc, #20]	; (8002c64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c50:	88fb      	ldrh	r3, [r7, #6]
 8002c52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c54:	88fb      	ldrh	r3, [r7, #6]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f7fe f87c 	bl	8000d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c5c:	bf00      	nop
 8002c5e:	3708      	adds	r7, #8
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}
 8002c64:	40013c00 	.word	0x40013c00

08002c68 <HAL_RCC_OscConfig>:
=======
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b082      	sub	sp, #8
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4603      	mov	r3, r0
 8002b38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b3c:	695a      	ldr	r2, [r3, #20]
 8002b3e:	88fb      	ldrh	r3, [r7, #6]
 8002b40:	4013      	ands	r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d006      	beq.n	8002b54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002b46:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002b48:	88fb      	ldrh	r3, [r7, #6]
 8002b4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002b4c:	88fb      	ldrh	r3, [r7, #6]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fe f900 	bl	8000d54 <HAL_GPIO_EXTI_Callback>
  }
}
 8002b54:	bf00      	nop
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40013c00 	.word	0x40013c00

08002b60 <HAL_RCC_OscConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
<<<<<<< HEAD
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
=======
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
<<<<<<< HEAD
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d101      	bne.n	8002c7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e25b      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
=======
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d101      	bne.n	8002b72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e25b      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
<<<<<<< HEAD
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0301 	and.w	r3, r3, #1
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d075      	beq.n	8002d72 <HAL_RCC_OscConfig+0x10a>
=======
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d075      	beq.n	8002c6a <HAL_RCC_OscConfig+0x10a>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
<<<<<<< HEAD
 8002c86:	4ba3      	ldr	r3, [pc, #652]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f003 030c 	and.w	r3, r3, #12
 8002c8e:	2b04      	cmp	r3, #4
 8002c90:	d00c      	beq.n	8002cac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c92:	4ba0      	ldr	r3, [pc, #640]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c9a:	2b08      	cmp	r3, #8
 8002c9c:	d112      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c9e:	4b9d      	ldr	r3, [pc, #628]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002caa:	d10b      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cac:	4b99      	ldr	r3, [pc, #612]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d05b      	beq.n	8002d70 <HAL_RCC_OscConfig+0x108>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d157      	bne.n	8002d70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e236      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
=======
 8002b7e:	4ba3      	ldr	r3, [pc, #652]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 030c 	and.w	r3, r3, #12
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d00c      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b8a:	4ba0      	ldr	r3, [pc, #640]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002b92:	2b08      	cmp	r3, #8
 8002b94:	d112      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b96:	4b9d      	ldr	r3, [pc, #628]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ba2:	d10b      	bne.n	8002bbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ba4:	4b99      	ldr	r3, [pc, #612]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d05b      	beq.n	8002c68 <HAL_RCC_OscConfig+0x108>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d157      	bne.n	8002c68 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e236      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
<<<<<<< HEAD
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ccc:	d106      	bne.n	8002cdc <HAL_RCC_OscConfig+0x74>
 8002cce:	4b91      	ldr	r3, [pc, #580]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a90      	ldr	r2, [pc, #576]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	6013      	str	r3, [r2, #0]
 8002cda:	e01d      	b.n	8002d18 <HAL_RCC_OscConfig+0xb0>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ce4:	d10c      	bne.n	8002d00 <HAL_RCC_OscConfig+0x98>
 8002ce6:	4b8b      	ldr	r3, [pc, #556]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a8a      	ldr	r2, [pc, #552]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002cec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002cf0:	6013      	str	r3, [r2, #0]
 8002cf2:	4b88      	ldr	r3, [pc, #544]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a87      	ldr	r2, [pc, #540]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e00b      	b.n	8002d18 <HAL_RCC_OscConfig+0xb0>
 8002d00:	4b84      	ldr	r3, [pc, #528]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a83      	ldr	r2, [pc, #524]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d0a:	6013      	str	r3, [r2, #0]
 8002d0c:	4b81      	ldr	r3, [pc, #516]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a80      	ldr	r2, [pc, #512]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d013      	beq.n	8002d48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d20:	f7ff f90e 	bl	8001f40 <HAL_GetTick>
 8002d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d26:	e008      	b.n	8002d3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d28:	f7ff f90a 	bl	8001f40 <HAL_GetTick>
 8002d2c:	4602      	mov	r2, r0
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	1ad3      	subs	r3, r2, r3
 8002d32:	2b64      	cmp	r3, #100	; 0x64
 8002d34:	d901      	bls.n	8002d3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d36:	2303      	movs	r3, #3
 8002d38:	e1fb      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d3a:	4b76      	ldr	r3, [pc, #472]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0f0      	beq.n	8002d28 <HAL_RCC_OscConfig+0xc0>
 8002d46:	e014      	b.n	8002d72 <HAL_RCC_OscConfig+0x10a>
=======
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc4:	d106      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x74>
 8002bc6:	4b91      	ldr	r3, [pc, #580]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a90      	ldr	r2, [pc, #576]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bd0:	6013      	str	r3, [r2, #0]
 8002bd2:	e01d      	b.n	8002c10 <HAL_RCC_OscConfig+0xb0>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bdc:	d10c      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x98>
 8002bde:	4b8b      	ldr	r3, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a8a      	ldr	r2, [pc, #552]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002be4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be8:	6013      	str	r3, [r2, #0]
 8002bea:	4b88      	ldr	r3, [pc, #544]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a87      	ldr	r2, [pc, #540]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bf0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf4:	6013      	str	r3, [r2, #0]
 8002bf6:	e00b      	b.n	8002c10 <HAL_RCC_OscConfig+0xb0>
 8002bf8:	4b84      	ldr	r3, [pc, #528]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a83      	ldr	r2, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c02:	6013      	str	r3, [r2, #0]
 8002c04:	4b81      	ldr	r3, [pc, #516]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a80      	ldr	r2, [pc, #512]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d013      	beq.n	8002c40 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c18:	f7ff f90e 	bl	8001e38 <HAL_GetTick>
 8002c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1e:	e008      	b.n	8002c32 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c20:	f7ff f90a 	bl	8001e38 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	2b64      	cmp	r3, #100	; 0x64
 8002c2c:	d901      	bls.n	8002c32 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c2e:	2303      	movs	r3, #3
 8002c30:	e1fb      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c32:	4b76      	ldr	r3, [pc, #472]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d0f0      	beq.n	8002c20 <HAL_RCC_OscConfig+0xc0>
 8002c3e:	e014      	b.n	8002c6a <HAL_RCC_OscConfig+0x10a>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002d48:	f7ff f8fa 	bl	8001f40 <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d50:	f7ff f8f6 	bl	8001f40 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e1e7      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d62:	4b6c      	ldr	r3, [pc, #432]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0xe8>
 8002d6e:	e000      	b.n	8002d72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d70:	bf00      	nop
=======
 8002c40:	f7ff f8fa 	bl	8001e38 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c48:	f7ff f8f6 	bl	8001e38 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b64      	cmp	r3, #100	; 0x64
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e1e7      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c5a:	4b6c      	ldr	r3, [pc, #432]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1f0      	bne.n	8002c48 <HAL_RCC_OscConfig+0xe8>
 8002c66:	e000      	b.n	8002c6a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c68:	bf00      	nop
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
<<<<<<< HEAD
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d063      	beq.n	8002e46 <HAL_RCC_OscConfig+0x1de>
=======
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d063      	beq.n	8002d3e <HAL_RCC_OscConfig+0x1de>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
<<<<<<< HEAD
 8002d7e:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d80:	689b      	ldr	r3, [r3, #8]
 8002d82:	f003 030c 	and.w	r3, r3, #12
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d8a:	4b62      	ldr	r3, [pc, #392]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d92:	2b08      	cmp	r3, #8
 8002d94:	d11c      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d96:	4b5f      	ldr	r3, [pc, #380]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d116      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002da2:	4b5c      	ldr	r3, [pc, #368]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d005      	beq.n	8002dba <HAL_RCC_OscConfig+0x152>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d001      	beq.n	8002dba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e1bb      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
=======
 8002c76:	4b65      	ldr	r3, [pc, #404]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	f003 030c 	and.w	r3, r3, #12
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d00b      	beq.n	8002c9a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c82:	4b62      	ldr	r3, [pc, #392]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002c8a:	2b08      	cmp	r3, #8
 8002c8c:	d11c      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c8e:	4b5f      	ldr	r3, [pc, #380]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d116      	bne.n	8002cc8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c9a:	4b5c      	ldr	r3, [pc, #368]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0302 	and.w	r3, r3, #2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d005      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x152>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002cae:	2301      	movs	r3, #1
 8002cb0:	e1bb      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002dba:	4b56      	ldr	r3, [pc, #344]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	00db      	lsls	r3, r3, #3
 8002dc8:	4952      	ldr	r1, [pc, #328]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dce:	e03a      	b.n	8002e46 <HAL_RCC_OscConfig+0x1de>
=======
 8002cb2:	4b56      	ldr	r3, [pc, #344]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	00db      	lsls	r3, r3, #3
 8002cc0:	4952      	ldr	r1, [pc, #328]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cc2:	4313      	orrs	r3, r2
 8002cc4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc6:	e03a      	b.n	8002d3e <HAL_RCC_OscConfig+0x1de>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
<<<<<<< HEAD
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d020      	beq.n	8002e1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dd8:	4b4f      	ldr	r3, [pc, #316]	; (8002f18 <HAL_RCC_OscConfig+0x2b0>)
 8002dda:	2201      	movs	r2, #1
 8002ddc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dde:	f7ff f8af 	bl	8001f40 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002de6:	f7ff f8ab 	bl	8001f40 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e19c      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002df8:	4b46      	ldr	r3, [pc, #280]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0302 	and.w	r3, r3, #2
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x17e>
=======
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d020      	beq.n	8002d12 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cd0:	4b4f      	ldr	r3, [pc, #316]	; (8002e10 <HAL_RCC_OscConfig+0x2b0>)
 8002cd2:	2201      	movs	r2, #1
 8002cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd6:	f7ff f8af 	bl	8001e38 <HAL_GetTick>
 8002cda:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cdc:	e008      	b.n	8002cf0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cde:	f7ff f8ab 	bl	8001e38 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	1ad3      	subs	r3, r2, r3
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d901      	bls.n	8002cf0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002cec:	2303      	movs	r3, #3
 8002cee:	e19c      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cf0:	4b46      	ldr	r3, [pc, #280]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0f0      	beq.n	8002cde <HAL_RCC_OscConfig+0x17e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
<<<<<<< HEAD
 8002e04:	4b43      	ldr	r3, [pc, #268]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	691b      	ldr	r3, [r3, #16]
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	4940      	ldr	r1, [pc, #256]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]
 8002e18:	e015      	b.n	8002e46 <HAL_RCC_OscConfig+0x1de>
=======
 8002cfc:	4b43      	ldr	r3, [pc, #268]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	691b      	ldr	r3, [r3, #16]
 8002d08:	00db      	lsls	r3, r3, #3
 8002d0a:	4940      	ldr	r1, [pc, #256]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	600b      	str	r3, [r1, #0]
 8002d10:	e015      	b.n	8002d3e <HAL_RCC_OscConfig+0x1de>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
<<<<<<< HEAD
 8002e1a:	4b3f      	ldr	r3, [pc, #252]	; (8002f18 <HAL_RCC_OscConfig+0x2b0>)
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7ff f88e 	bl	8001f40 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e28:	f7ff f88a 	bl	8001f40 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e17b      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e3a:	4b36      	ldr	r3, [pc, #216]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d1f0      	bne.n	8002e28 <HAL_RCC_OscConfig+0x1c0>
=======
 8002d12:	4b3f      	ldr	r3, [pc, #252]	; (8002e10 <HAL_RCC_OscConfig+0x2b0>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d18:	f7ff f88e 	bl	8001e38 <HAL_GetTick>
 8002d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1e:	e008      	b.n	8002d32 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d20:	f7ff f88a 	bl	8001e38 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d901      	bls.n	8002d32 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d2e:	2303      	movs	r3, #3
 8002d30:	e17b      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d32:	4b36      	ldr	r3, [pc, #216]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f003 0302 	and.w	r3, r3, #2
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d1f0      	bne.n	8002d20 <HAL_RCC_OscConfig+0x1c0>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
<<<<<<< HEAD
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0308 	and.w	r3, r3, #8
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d030      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x24c>
=======
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 0308 	and.w	r3, r3, #8
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d030      	beq.n	8002dac <HAL_RCC_OscConfig+0x24c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
<<<<<<< HEAD
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d016      	beq.n	8002e88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e5a:	4b30      	ldr	r3, [pc, #192]	; (8002f1c <HAL_RCC_OscConfig+0x2b4>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e60:	f7ff f86e 	bl	8001f40 <HAL_GetTick>
 8002e64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e66:	e008      	b.n	8002e7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e68:	f7ff f86a 	bl	8001f40 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e15b      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e7a:	4b26      	ldr	r3, [pc, #152]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002e7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0f0      	beq.n	8002e68 <HAL_RCC_OscConfig+0x200>
 8002e86:	e015      	b.n	8002eb4 <HAL_RCC_OscConfig+0x24c>
=======
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d016      	beq.n	8002d80 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d52:	4b30      	ldr	r3, [pc, #192]	; (8002e14 <HAL_RCC_OscConfig+0x2b4>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d58:	f7ff f86e 	bl	8001e38 <HAL_GetTick>
 8002d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5e:	e008      	b.n	8002d72 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d60:	f7ff f86a 	bl	8001e38 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d901      	bls.n	8002d72 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002d6e:	2303      	movs	r3, #3
 8002d70:	e15b      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d72:	4b26      	ldr	r3, [pc, #152]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002d74:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d76:	f003 0302 	and.w	r3, r3, #2
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d0f0      	beq.n	8002d60 <HAL_RCC_OscConfig+0x200>
 8002d7e:	e015      	b.n	8002dac <HAL_RCC_OscConfig+0x24c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
<<<<<<< HEAD
 8002e88:	4b24      	ldr	r3, [pc, #144]	; (8002f1c <HAL_RCC_OscConfig+0x2b4>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e8e:	f7ff f857 	bl	8001f40 <HAL_GetTick>
 8002e92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	e008      	b.n	8002ea8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e96:	f7ff f853 	bl	8001f40 <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b02      	cmp	r3, #2
 8002ea2:	d901      	bls.n	8002ea8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002ea4:	2303      	movs	r3, #3
 8002ea6:	e144      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ea8:	4b1a      	ldr	r3, [pc, #104]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eac:	f003 0302 	and.w	r3, r3, #2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1f0      	bne.n	8002e96 <HAL_RCC_OscConfig+0x22e>
=======
 8002d80:	4b24      	ldr	r3, [pc, #144]	; (8002e14 <HAL_RCC_OscConfig+0x2b4>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d86:	f7ff f857 	bl	8001e38 <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d8e:	f7ff f853 	bl	8001e38 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e144      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002da0:	4b1a      	ldr	r3, [pc, #104]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002da2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002da4:	f003 0302 	and.w	r3, r3, #2
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x22e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
<<<<<<< HEAD
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	f000 80a0 	beq.w	8003002 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	75fb      	strb	r3, [r7, #23]
=======
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f003 0304 	and.w	r3, r3, #4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	f000 80a0 	beq.w	8002efa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	75fb      	strb	r3, [r7, #23]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
<<<<<<< HEAD
 8002ec6:	4b13      	ldr	r3, [pc, #76]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10f      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	60bb      	str	r3, [r7, #8]
 8002ed6:	4b0f      	ldr	r3, [pc, #60]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	4a0e      	ldr	r2, [pc, #56]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee2:	4b0c      	ldr	r3, [pc, #48]	; (8002f14 <HAL_RCC_OscConfig+0x2ac>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eea:	60bb      	str	r3, [r7, #8]
 8002eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ef2:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_OscConfig+0x2b8>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d121      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002efe:	4b08      	ldr	r3, [pc, #32]	; (8002f20 <HAL_RCC_OscConfig+0x2b8>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4a07      	ldr	r2, [pc, #28]	; (8002f20 <HAL_RCC_OscConfig+0x2b8>)
 8002f04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f08:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f0a:	f7ff f819 	bl	8001f40 <HAL_GetTick>
 8002f0e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	e011      	b.n	8002f36 <HAL_RCC_OscConfig+0x2ce>
 8002f12:	bf00      	nop
 8002f14:	40023800 	.word	0x40023800
 8002f18:	42470000 	.word	0x42470000
 8002f1c:	42470e80 	.word	0x42470e80
 8002f20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f24:	f7ff f80c 	bl	8001f40 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e0fd      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f36:	4b81      	ldr	r3, [pc, #516]	; (800313c <HAL_RCC_OscConfig+0x4d4>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d0f0      	beq.n	8002f24 <HAL_RCC_OscConfig+0x2bc>
=======
 8002dbe:	4b13      	ldr	r3, [pc, #76]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dca:	2300      	movs	r3, #0
 8002dcc:	60bb      	str	r3, [r7, #8]
 8002dce:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd2:	4a0e      	ldr	r2, [pc, #56]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002dd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dda:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <HAL_RCC_OscConfig+0x2ac>)
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002de2:	60bb      	str	r3, [r7, #8]
 8002de4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002de6:	2301      	movs	r3, #1
 8002de8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dea:	4b0b      	ldr	r3, [pc, #44]	; (8002e18 <HAL_RCC_OscConfig+0x2b8>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d121      	bne.n	8002e3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002df6:	4b08      	ldr	r3, [pc, #32]	; (8002e18 <HAL_RCC_OscConfig+0x2b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <HAL_RCC_OscConfig+0x2b8>)
 8002dfc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e02:	f7ff f819 	bl	8001e38 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e08:	e011      	b.n	8002e2e <HAL_RCC_OscConfig+0x2ce>
 8002e0a:	bf00      	nop
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	42470000 	.word	0x42470000
 8002e14:	42470e80 	.word	0x42470e80
 8002e18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e1c:	f7ff f80c 	bl	8001e38 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e0fd      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e2e:	4b81      	ldr	r3, [pc, #516]	; (8003034 <HAL_RCC_OscConfig+0x4d4>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x2bc>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
<<<<<<< HEAD
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d106      	bne.n	8002f58 <HAL_RCC_OscConfig+0x2f0>
 8002f4a:	4b7d      	ldr	r3, [pc, #500]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f4e:	4a7c      	ldr	r2, [pc, #496]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6713      	str	r3, [r2, #112]	; 0x70
 8002f56:	e01c      	b.n	8002f92 <HAL_RCC_OscConfig+0x32a>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	2b05      	cmp	r3, #5
 8002f5e:	d10c      	bne.n	8002f7a <HAL_RCC_OscConfig+0x312>
 8002f60:	4b77      	ldr	r3, [pc, #476]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f64:	4a76      	ldr	r2, [pc, #472]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f66:	f043 0304 	orr.w	r3, r3, #4
 8002f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8002f6c:	4b74      	ldr	r3, [pc, #464]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f70:	4a73      	ldr	r2, [pc, #460]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f72:	f043 0301 	orr.w	r3, r3, #1
 8002f76:	6713      	str	r3, [r2, #112]	; 0x70
 8002f78:	e00b      	b.n	8002f92 <HAL_RCC_OscConfig+0x32a>
 8002f7a:	4b71      	ldr	r3, [pc, #452]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a70      	ldr	r2, [pc, #448]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f80:	f023 0301 	bic.w	r3, r3, #1
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	4b6e      	ldr	r3, [pc, #440]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a6d      	ldr	r2, [pc, #436]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002f8c:	f023 0304 	bic.w	r3, r3, #4
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d015      	beq.n	8002fc6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f9a:	f7fe ffd1 	bl	8001f40 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fa0:	e00a      	b.n	8002fb8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa2:	f7fe ffcd 	bl	8001f40 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e0bc      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fb8:	4b61      	ldr	r3, [pc, #388]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fbc:	f003 0302 	and.w	r3, r3, #2
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0ee      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x33a>
 8002fc4:	e014      	b.n	8002ff0 <HAL_RCC_OscConfig+0x388>
=======
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x2f0>
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a7c      	ldr	r2, [pc, #496]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	e01c      	b.n	8002e8a <HAL_RCC_OscConfig+0x32a>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b05      	cmp	r3, #5
 8002e56:	d10c      	bne.n	8002e72 <HAL_RCC_OscConfig+0x312>
 8002e58:	4b77      	ldr	r3, [pc, #476]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e5c:	4a76      	ldr	r2, [pc, #472]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e5e:	f043 0304 	orr.w	r3, r3, #4
 8002e62:	6713      	str	r3, [r2, #112]	; 0x70
 8002e64:	4b74      	ldr	r3, [pc, #464]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e68:	4a73      	ldr	r2, [pc, #460]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e6a:	f043 0301 	orr.w	r3, r3, #1
 8002e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002e70:	e00b      	b.n	8002e8a <HAL_RCC_OscConfig+0x32a>
 8002e72:	4b71      	ldr	r3, [pc, #452]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a70      	ldr	r2, [pc, #448]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e78:	f023 0301 	bic.w	r3, r3, #1
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e7e:	4b6e      	ldr	r3, [pc, #440]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a6d      	ldr	r2, [pc, #436]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002e84:	f023 0304 	bic.w	r3, r3, #4
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d015      	beq.n	8002ebe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e92:	f7fe ffd1 	bl	8001e38 <HAL_GetTick>
 8002e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e98:	e00a      	b.n	8002eb0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e9a:	f7fe ffcd 	bl	8001e38 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d901      	bls.n	8002eb0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002eac:	2303      	movs	r3, #3
 8002eae:	e0bc      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb0:	4b61      	ldr	r3, [pc, #388]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002eb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eb4:	f003 0302 	and.w	r3, r3, #2
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d0ee      	beq.n	8002e9a <HAL_RCC_OscConfig+0x33a>
 8002ebc:	e014      	b.n	8002ee8 <HAL_RCC_OscConfig+0x388>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
<<<<<<< HEAD
 8002fc6:	f7fe ffbb 	bl	8001f40 <HAL_GetTick>
 8002fca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fcc:	e00a      	b.n	8002fe4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fce:	f7fe ffb7 	bl	8001f40 <HAL_GetTick>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	1ad3      	subs	r3, r2, r3
 8002fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d901      	bls.n	8002fe4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e0a6      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe4:	4b56      	ldr	r3, [pc, #344]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002fe6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe8:	f003 0302 	and.w	r3, r3, #2
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d1ee      	bne.n	8002fce <HAL_RCC_OscConfig+0x366>
=======
 8002ebe:	f7fe ffbb 	bl	8001e38 <HAL_GetTick>
 8002ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ec6:	f7fe ffb7 	bl	8001e38 <HAL_GetTick>
 8002eca:	4602      	mov	r2, r0
 8002ecc:	693b      	ldr	r3, [r7, #16]
 8002ece:	1ad3      	subs	r3, r2, r3
 8002ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d901      	bls.n	8002edc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002ed8:	2303      	movs	r3, #3
 8002eda:	e0a6      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002edc:	4b56      	ldr	r3, [pc, #344]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1ee      	bne.n	8002ec6 <HAL_RCC_OscConfig+0x366>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
<<<<<<< HEAD
 8002ff0:	7dfb      	ldrb	r3, [r7, #23]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d105      	bne.n	8003002 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ff6:	4b52      	ldr	r3, [pc, #328]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffa:	4a51      	ldr	r2, [pc, #324]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8002ffc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003000:	6413      	str	r3, [r2, #64]	; 0x40
=======
 8002ee8:	7dfb      	ldrb	r3, [r7, #23]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d105      	bne.n	8002efa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eee:	4b52      	ldr	r3, [pc, #328]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a51      	ldr	r2, [pc, #324]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
<<<<<<< HEAD
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	f000 8092 	beq.w	8003130 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800300c:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f003 030c 	and.w	r3, r3, #12
 8003014:	2b08      	cmp	r3, #8
 8003016:	d05c      	beq.n	80030d2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	2b02      	cmp	r3, #2
 800301e:	d141      	bne.n	80030a4 <HAL_RCC_OscConfig+0x43c>
=======
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	699b      	ldr	r3, [r3, #24]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	f000 8092 	beq.w	8003028 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f04:	4b4c      	ldr	r3, [pc, #304]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d05c      	beq.n	8002fca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	699b      	ldr	r3, [r3, #24]
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d141      	bne.n	8002f9c <HAL_RCC_OscConfig+0x43c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 8003020:	4b48      	ldr	r3, [pc, #288]	; (8003144 <HAL_RCC_OscConfig+0x4dc>)
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003026:	f7fe ff8b 	bl	8001f40 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302c:	e008      	b.n	8003040 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800302e:	f7fe ff87 	bl	8001f40 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	2b02      	cmp	r3, #2
 800303a:	d901      	bls.n	8003040 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800303c:	2303      	movs	r3, #3
 800303e:	e078      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003040:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d1f0      	bne.n	800302e <HAL_RCC_OscConfig+0x3c6>
=======
 8002f18:	4b48      	ldr	r3, [pc, #288]	; (800303c <HAL_RCC_OscConfig+0x4dc>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f1e:	f7fe ff8b 	bl	8001e38 <HAL_GetTick>
 8002f22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f24:	e008      	b.n	8002f38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f26:	f7fe ff87 	bl	8001e38 <HAL_GetTick>
 8002f2a:	4602      	mov	r2, r0
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d901      	bls.n	8002f38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002f34:	2303      	movs	r3, #3
 8002f36:	e078      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1f0      	bne.n	8002f26 <HAL_RCC_OscConfig+0x3c6>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
<<<<<<< HEAD
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	69da      	ldr	r2, [r3, #28]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	431a      	orrs	r2, r3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305a:	019b      	lsls	r3, r3, #6
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003062:	085b      	lsrs	r3, r3, #1
 8003064:	3b01      	subs	r3, #1
 8003066:	041b      	lsls	r3, r3, #16
 8003068:	431a      	orrs	r2, r3
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800306e:	061b      	lsls	r3, r3, #24
 8003070:	4933      	ldr	r1, [pc, #204]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8003072:	4313      	orrs	r3, r2
 8003074:	604b      	str	r3, [r1, #4]
=======
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	69da      	ldr	r2, [r3, #28]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a1b      	ldr	r3, [r3, #32]
 8002f4c:	431a      	orrs	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	019b      	lsls	r3, r3, #6
 8002f54:	431a      	orrs	r2, r3
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	085b      	lsrs	r3, r3, #1
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	431a      	orrs	r2, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f66:	061b      	lsls	r3, r3, #24
 8002f68:	4933      	ldr	r1, [pc, #204]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	604b      	str	r3, [r1, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
<<<<<<< HEAD
 8003076:	4b33      	ldr	r3, [pc, #204]	; (8003144 <HAL_RCC_OscConfig+0x4dc>)
 8003078:	2201      	movs	r2, #1
 800307a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307c:	f7fe ff60 	bl	8001f40 <HAL_GetTick>
 8003080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	e008      	b.n	8003096 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003084:	f7fe ff5c 	bl	8001f40 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	693b      	ldr	r3, [r7, #16]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	2b02      	cmp	r3, #2
 8003090:	d901      	bls.n	8003096 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e04d      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003096:	4b2a      	ldr	r3, [pc, #168]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0f0      	beq.n	8003084 <HAL_RCC_OscConfig+0x41c>
 80030a2:	e045      	b.n	8003130 <HAL_RCC_OscConfig+0x4c8>
=======
 8002f6e:	4b33      	ldr	r3, [pc, #204]	; (800303c <HAL_RCC_OscConfig+0x4dc>)
 8002f70:	2201      	movs	r2, #1
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fe ff60 	bl	8001e38 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe ff5c 	bl	8001e38 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04d      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f8e:	4b2a      	ldr	r3, [pc, #168]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d0f0      	beq.n	8002f7c <HAL_RCC_OscConfig+0x41c>
 8002f9a:	e045      	b.n	8003028 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
<<<<<<< HEAD
 80030a4:	4b27      	ldr	r3, [pc, #156]	; (8003144 <HAL_RCC_OscConfig+0x4dc>)
 80030a6:	2200      	movs	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030aa:	f7fe ff49 	bl	8001f40 <HAL_GetTick>
 80030ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b2:	f7fe ff45 	bl	8001f40 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e036      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c4:	4b1e      	ldr	r3, [pc, #120]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x44a>
 80030d0:	e02e      	b.n	8003130 <HAL_RCC_OscConfig+0x4c8>
=======
 8002f9c:	4b27      	ldr	r3, [pc, #156]	; (800303c <HAL_RCC_OscConfig+0x4dc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa2:	f7fe ff49 	bl	8001e38 <HAL_GetTick>
 8002fa6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa8:	e008      	b.n	8002fbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002faa:	f7fe ff45 	bl	8001e38 <HAL_GetTick>
 8002fae:	4602      	mov	r2, r0
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e036      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fbc:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d1f0      	bne.n	8002faa <HAL_RCC_OscConfig+0x44a>
 8002fc8:	e02e      	b.n	8003028 <HAL_RCC_OscConfig+0x4c8>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
<<<<<<< HEAD
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	699b      	ldr	r3, [r3, #24]
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d101      	bne.n	80030de <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80030da:	2301      	movs	r3, #1
 80030dc:	e029      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
=======
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	699b      	ldr	r3, [r3, #24]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	e029      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
<<<<<<< HEAD
 80030de:	4b18      	ldr	r3, [pc, #96]	; (8003140 <HAL_RCC_OscConfig+0x4d8>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69db      	ldr	r3, [r3, #28]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d11c      	bne.n	800312c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030fc:	429a      	cmp	r2, r3
 80030fe:	d115      	bne.n	800312c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003100:	68fa      	ldr	r2, [r7, #12]
 8003102:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003106:	4013      	ands	r3, r2
 8003108:	687a      	ldr	r2, [r7, #4]
 800310a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800310c:	4293      	cmp	r3, r2
 800310e:	d10d      	bne.n	800312c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800311a:	429a      	cmp	r2, r3
 800311c:	d106      	bne.n	800312c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003128:	429a      	cmp	r2, r3
 800312a:	d001      	beq.n	8003130 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800312c:	2301      	movs	r3, #1
 800312e:	e000      	b.n	8003132 <HAL_RCC_OscConfig+0x4ca>
=======
 8002fd6:	4b18      	ldr	r3, [pc, #96]	; (8003038 <HAL_RCC_OscConfig+0x4d8>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d11c      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d115      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ffe:	4013      	ands	r3, r2
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003004:	4293      	cmp	r3, r2
 8003006:	d10d      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003012:	429a      	cmp	r2, r3
 8003014:	d106      	bne.n	8003024 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x4ca>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        }
      }
    }
  }
  return HAL_OK;
<<<<<<< HEAD
 8003130:	2300      	movs	r3, #0
}
 8003132:	4618      	mov	r0, r3
 8003134:	3718      	adds	r7, #24
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40007000 	.word	0x40007000
 8003140:	40023800 	.word	0x40023800
 8003144:	42470060 	.word	0x42470060

08003148 <HAL_RCC_ClockConfig>:
=======
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40007000 	.word	0x40007000
 8003038:	40023800 	.word	0x40023800
 800303c:	42470060 	.word	0x42470060

08003040 <HAL_RCC_ClockConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
<<<<<<< HEAD
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
=======
 8003040:	b580      	push	{r7, lr}
 8003042:	b084      	sub	sp, #16
 8003044:	af00      	add	r7, sp, #0
 8003046:	6078      	str	r0, [r7, #4]
 8003048:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
<<<<<<< HEAD
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d101      	bne.n	800315c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003158:	2301      	movs	r3, #1
 800315a:	e0cc      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d101      	bne.n	8003054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	e0cc      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 800315c:	4b68      	ldr	r3, [pc, #416]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f003 030f 	and.w	r3, r3, #15
 8003164:	683a      	ldr	r2, [r7, #0]
 8003166:	429a      	cmp	r2, r3
 8003168:	d90c      	bls.n	8003184 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316a:	4b65      	ldr	r3, [pc, #404]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	b2d2      	uxtb	r2, r2
 8003170:	701a      	strb	r2, [r3, #0]
=======
 8003054:	4b68      	ldr	r3, [pc, #416]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 030f 	and.w	r3, r3, #15
 800305c:	683a      	ldr	r2, [r7, #0]
 800305e:	429a      	cmp	r2, r3
 8003060:	d90c      	bls.n	800307c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003062:	4b65      	ldr	r3, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003064:	683a      	ldr	r2, [r7, #0]
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	701a      	strb	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 8003172:	4b63      	ldr	r3, [pc, #396]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	683a      	ldr	r2, [r7, #0]
 800317c:	429a      	cmp	r2, r3
 800317e:	d001      	beq.n	8003184 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e0b8      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
<<<<<<< HEAD
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 0302 	and.w	r3, r3, #2
 800318c:	2b00      	cmp	r3, #0
 800318e:	d020      	beq.n	80031d2 <HAL_RCC_ClockConfig+0x8a>
=======
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x8a>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0304 	and.w	r3, r3, #4
 8003198:	2b00      	cmp	r3, #0
 800319a:	d005      	beq.n	80031a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800319c:	4b59      	ldr	r3, [pc, #356]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	4a58      	ldr	r2, [pc, #352]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d005      	beq.n	80031c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031b4:	4b53      	ldr	r3, [pc, #332]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	4a52      	ldr	r2, [pc, #328]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031be:	6093      	str	r3, [r2, #8]
=======
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800309a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800309e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030b6:	6093      	str	r3, [r2, #8]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
<<<<<<< HEAD
 80031c0:	4b50      	ldr	r3, [pc, #320]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	689b      	ldr	r3, [r3, #8]
 80031cc:	494d      	ldr	r1, [pc, #308]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	608b      	str	r3, [r1, #8]
=======
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	608b      	str	r3, [r1, #8]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
<<<<<<< HEAD
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d044      	beq.n	8003268 <HAL_RCC_ClockConfig+0x120>
=======
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d044      	beq.n	8003160 <HAL_RCC_ClockConfig+0x120>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
<<<<<<< HEAD
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d107      	bne.n	80031f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031e6:	4b47      	ldr	r3, [pc, #284]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d119      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e07f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
=======
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d119      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
<<<<<<< HEAD
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d003      	beq.n	8003206 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003202:	2b03      	cmp	r3, #3
 8003204:	d107      	bne.n	8003216 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003206:	4b3f      	ldr	r3, [pc, #252]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d109      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e06f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
=======
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d003      	beq.n	80030fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80030fa:	2b03      	cmp	r3, #3
 80030fc:	d107      	bne.n	800310e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030fe:	4b3f      	ldr	r3, [pc, #252]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e06f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
<<<<<<< HEAD
 8003216:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d101      	bne.n	8003226 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e067      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
=======
 800310e:	4b3b      	ldr	r3, [pc, #236]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0302 	and.w	r3, r3, #2
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e067      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
<<<<<<< HEAD
 8003226:	4b37      	ldr	r3, [pc, #220]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f023 0203 	bic.w	r2, r3, #3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	4934      	ldr	r1, [pc, #208]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003234:	4313      	orrs	r3, r2
 8003236:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003238:	f7fe fe82 	bl	8001f40 <HAL_GetTick>
 800323c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800323e:	e00a      	b.n	8003256 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003240:	f7fe fe7e 	bl	8001f40 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	; 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e04f      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003256:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f003 020c 	and.w	r2, r3, #12
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	009b      	lsls	r3, r3, #2
 8003264:	429a      	cmp	r2, r3
 8003266:	d1eb      	bne.n	8003240 <HAL_RCC_ClockConfig+0xf8>
=======
 800311e:	4b37      	ldr	r3, [pc, #220]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003120:	689b      	ldr	r3, [r3, #8]
 8003122:	f023 0203 	bic.w	r2, r3, #3
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	685b      	ldr	r3, [r3, #4]
 800312a:	4934      	ldr	r1, [pc, #208]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 800312c:	4313      	orrs	r3, r2
 800312e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003130:	f7fe fe82 	bl	8001e38 <HAL_GetTick>
 8003134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003136:	e00a      	b.n	800314e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003138:	f7fe fe7e 	bl	8001e38 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	f241 3288 	movw	r2, #5000	; 0x1388
 8003146:	4293      	cmp	r3, r2
 8003148:	d901      	bls.n	800314e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	e04f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800314e:	4b2b      	ldr	r3, [pc, #172]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003150:	689b      	ldr	r3, [r3, #8]
 8003152:	f003 020c 	and.w	r2, r3, #12
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	429a      	cmp	r2, r3
 800315e:	d1eb      	bne.n	8003138 <HAL_RCC_ClockConfig+0xf8>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
<<<<<<< HEAD
 8003268:	4b25      	ldr	r3, [pc, #148]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f003 030f 	and.w	r3, r3, #15
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	429a      	cmp	r2, r3
 8003274:	d20c      	bcs.n	8003290 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003276:	4b22      	ldr	r3, [pc, #136]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	b2d2      	uxtb	r2, r2
 800327c:	701a      	strb	r2, [r3, #0]
=======
 8003160:	4b25      	ldr	r3, [pc, #148]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d20c      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	b2d2      	uxtb	r2, r2
 8003174:	701a      	strb	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
<<<<<<< HEAD
 800327e:	4b20      	ldr	r3, [pc, #128]	; (8003300 <HAL_RCC_ClockConfig+0x1b8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f003 030f 	and.w	r3, r3, #15
 8003286:	683a      	ldr	r2, [r7, #0]
 8003288:	429a      	cmp	r2, r3
 800328a:	d001      	beq.n	8003290 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e032      	b.n	80032f6 <HAL_RCC_ClockConfig+0x1ae>
=======
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1ae>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
<<<<<<< HEAD
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	f003 0304 	and.w	r3, r3, #4
 8003298:	2b00      	cmp	r3, #0
 800329a:	d008      	beq.n	80032ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800329c:	4b19      	ldr	r3, [pc, #100]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	4916      	ldr	r1, [pc, #88]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	608b      	str	r3, [r1, #8]
=======
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	608b      	str	r3, [r1, #8]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
<<<<<<< HEAD
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0308 	and.w	r3, r3, #8
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d009      	beq.n	80032ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	00db      	lsls	r3, r3, #3
 80032c8:	490e      	ldr	r1, [pc, #56]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
=======
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	608b      	str	r3, [r1, #8]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
<<<<<<< HEAD
 80032ce:	f000 f821 	bl	8003314 <HAL_RCC_GetSysClockFreq>
 80032d2:	4601      	mov	r1, r0
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <HAL_RCC_ClockConfig+0x1bc>)
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	091b      	lsrs	r3, r3, #4
 80032da:	f003 030f 	and.w	r3, r3, #15
 80032de:	4a0a      	ldr	r2, [pc, #40]	; (8003308 <HAL_RCC_ClockConfig+0x1c0>)
 80032e0:	5cd3      	ldrb	r3, [r2, r3]
 80032e2:	fa21 f303 	lsr.w	r3, r1, r3
 80032e6:	4a09      	ldr	r2, [pc, #36]	; (800330c <HAL_RCC_ClockConfig+0x1c4>)
 80032e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032ea:	4b09      	ldr	r3, [pc, #36]	; (8003310 <HAL_RCC_ClockConfig+0x1c8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f7fe fde2 	bl	8001eb8 <HAL_InitTick>

  return HAL_OK;
 80032f4:	2300      	movs	r3, #0
}
 80032f6:	4618      	mov	r0, r3
 80032f8:	3710      	adds	r7, #16
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bd80      	pop	{r7, pc}
 80032fe:	bf00      	nop
 8003300:	40023c00 	.word	0x40023c00
 8003304:	40023800 	.word	0x40023800
 8003308:	08004770 	.word	0x08004770
 800330c:	20000000 	.word	0x20000000
 8003310:	20000004 	.word	0x20000004

08003314 <HAL_RCC_GetSysClockFreq>:
=======
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4601      	mov	r1, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	4a0a      	ldr	r2, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	5cd3      	ldrb	r3, [r2, r3]
 80031da:	fa21 f303 	lsr.w	r3, r1, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1c8>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fe fde2 	bl	8001db0 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40023c00 	.word	0x40023c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	08004668 	.word	0x08004668
 8003204:	20000000 	.word	0x20000000
 8003208:	20000004 	.word	0x20000004

0800320c <HAL_RCC_GetSysClockFreq>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
<<<<<<< HEAD
 8003314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800331a:	2300      	movs	r3, #0
 800331c:	607b      	str	r3, [r7, #4]
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	2300      	movs	r3, #0
 8003324:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003326:	2300      	movs	r3, #0
 8003328:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800332a:	4b50      	ldr	r3, [pc, #320]	; (800346c <HAL_RCC_GetSysClockFreq+0x158>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b04      	cmp	r3, #4
 8003334:	d007      	beq.n	8003346 <HAL_RCC_GetSysClockFreq+0x32>
 8003336:	2b08      	cmp	r3, #8
 8003338:	d008      	beq.n	800334c <HAL_RCC_GetSysClockFreq+0x38>
 800333a:	2b00      	cmp	r3, #0
 800333c:	f040 808d 	bne.w	800345a <HAL_RCC_GetSysClockFreq+0x146>
=======
 800320c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003212:	2300      	movs	r3, #0
 8003214:	607b      	str	r3, [r7, #4]
 8003216:	2300      	movs	r3, #0
 8003218:	60fb      	str	r3, [r7, #12]
 800321a:	2300      	movs	r3, #0
 800321c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800321e:	2300      	movs	r3, #0
 8003220:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003222:	4b50      	ldr	r3, [pc, #320]	; (8003364 <HAL_RCC_GetSysClockFreq+0x158>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b04      	cmp	r3, #4
 800322c:	d007      	beq.n	800323e <HAL_RCC_GetSysClockFreq+0x32>
 800322e:	2b08      	cmp	r3, #8
 8003230:	d008      	beq.n	8003244 <HAL_RCC_GetSysClockFreq+0x38>
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 808d 	bne.w	8003352 <HAL_RCC_GetSysClockFreq+0x146>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 8003340:	4b4b      	ldr	r3, [pc, #300]	; (8003470 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003342:	60bb      	str	r3, [r7, #8]
       break;
 8003344:	e08c      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 8003238:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_RCC_GetSysClockFreq+0x15c>)
 800323a:	60bb      	str	r3, [r7, #8]
       break;
 800323c:	e08c      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
<<<<<<< HEAD
 8003346:	4b4b      	ldr	r3, [pc, #300]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 8003348:	60bb      	str	r3, [r7, #8]
      break;
 800334a:	e089      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 800323e:	4b4b      	ldr	r3, [pc, #300]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 8003240:	60bb      	str	r3, [r7, #8]
      break;
 8003242:	e089      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
<<<<<<< HEAD
 800334c:	4b47      	ldr	r3, [pc, #284]	; (800346c <HAL_RCC_GetSysClockFreq+0x158>)
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003354:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003356:	4b45      	ldr	r3, [pc, #276]	; (800346c <HAL_RCC_GetSysClockFreq+0x158>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d023      	beq.n	80033aa <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003362:	4b42      	ldr	r3, [pc, #264]	; (800346c <HAL_RCC_GetSysClockFreq+0x158>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	099b      	lsrs	r3, r3, #6
 8003368:	f04f 0400 	mov.w	r4, #0
 800336c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	ea03 0501 	and.w	r5, r3, r1
 8003378:	ea04 0602 	and.w	r6, r4, r2
 800337c:	4a3d      	ldr	r2, [pc, #244]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 800337e:	fb02 f106 	mul.w	r1, r2, r6
 8003382:	2200      	movs	r2, #0
 8003384:	fb02 f205 	mul.w	r2, r2, r5
 8003388:	440a      	add	r2, r1
 800338a:	493a      	ldr	r1, [pc, #232]	; (8003474 <HAL_RCC_GetSysClockFreq+0x160>)
 800338c:	fba5 0101 	umull	r0, r1, r5, r1
 8003390:	1853      	adds	r3, r2, r1
 8003392:	4619      	mov	r1, r3
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f04f 0400 	mov.w	r4, #0
 800339a:	461a      	mov	r2, r3
 800339c:	4623      	mov	r3, r4
 800339e:	f7fd fb59 	bl	8000a54 <__aeabi_uldivmod>
 80033a2:	4603      	mov	r3, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e049      	b.n	800343e <HAL_RCC_GetSysClockFreq+0x12a>
=======
 8003244:	4b47      	ldr	r3, [pc, #284]	; (8003364 <HAL_RCC_GetSysClockFreq+0x158>)
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800324c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800324e:	4b45      	ldr	r3, [pc, #276]	; (8003364 <HAL_RCC_GetSysClockFreq+0x158>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d023      	beq.n	80032a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800325a:	4b42      	ldr	r3, [pc, #264]	; (8003364 <HAL_RCC_GetSysClockFreq+0x158>)
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	099b      	lsrs	r3, r3, #6
 8003260:	f04f 0400 	mov.w	r4, #0
 8003264:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	ea03 0501 	and.w	r5, r3, r1
 8003270:	ea04 0602 	and.w	r6, r4, r2
 8003274:	4a3d      	ldr	r2, [pc, #244]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 8003276:	fb02 f106 	mul.w	r1, r2, r6
 800327a:	2200      	movs	r2, #0
 800327c:	fb02 f205 	mul.w	r2, r2, r5
 8003280:	440a      	add	r2, r1
 8003282:	493a      	ldr	r1, [pc, #232]	; (800336c <HAL_RCC_GetSysClockFreq+0x160>)
 8003284:	fba5 0101 	umull	r0, r1, r5, r1
 8003288:	1853      	adds	r3, r2, r1
 800328a:	4619      	mov	r1, r3
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f04f 0400 	mov.w	r4, #0
 8003292:	461a      	mov	r2, r3
 8003294:	4623      	mov	r3, r4
 8003296:	f7fd fbdd 	bl	8000a54 <__aeabi_uldivmod>
 800329a:	4603      	mov	r3, r0
 800329c:	460c      	mov	r4, r1
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	e049      	b.n	8003336 <HAL_RCC_GetSysClockFreq+0x12a>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
<<<<<<< HEAD
 80033aa:	4b30      	ldr	r3, [pc, #192]	; (800346c <HAL_RCC_GetSysClockFreq+0x158>)
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	099b      	lsrs	r3, r3, #6
 80033b0:	f04f 0400 	mov.w	r4, #0
 80033b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80033b8:	f04f 0200 	mov.w	r2, #0
 80033bc:	ea03 0501 	and.w	r5, r3, r1
 80033c0:	ea04 0602 	and.w	r6, r4, r2
 80033c4:	4629      	mov	r1, r5
 80033c6:	4632      	mov	r2, r6
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	f04f 0400 	mov.w	r4, #0
 80033d0:	0154      	lsls	r4, r2, #5
 80033d2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80033d6:	014b      	lsls	r3, r1, #5
 80033d8:	4619      	mov	r1, r3
 80033da:	4622      	mov	r2, r4
 80033dc:	1b49      	subs	r1, r1, r5
 80033de:	eb62 0206 	sbc.w	r2, r2, r6
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	f04f 0400 	mov.w	r4, #0
 80033ea:	0194      	lsls	r4, r2, #6
 80033ec:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80033f0:	018b      	lsls	r3, r1, #6
 80033f2:	1a5b      	subs	r3, r3, r1
 80033f4:	eb64 0402 	sbc.w	r4, r4, r2
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	00e2      	lsls	r2, r4, #3
 8003402:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003406:	00d9      	lsls	r1, r3, #3
 8003408:	460b      	mov	r3, r1
 800340a:	4614      	mov	r4, r2
 800340c:	195b      	adds	r3, r3, r5
 800340e:	eb44 0406 	adc.w	r4, r4, r6
 8003412:	f04f 0100 	mov.w	r1, #0
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	02a2      	lsls	r2, r4, #10
 800341c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003420:	0299      	lsls	r1, r3, #10
 8003422:	460b      	mov	r3, r1
 8003424:	4614      	mov	r4, r2
 8003426:	4618      	mov	r0, r3
 8003428:	4621      	mov	r1, r4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f04f 0400 	mov.w	r4, #0
 8003430:	461a      	mov	r2, r3
 8003432:	4623      	mov	r3, r4
 8003434:	f7fd fb0e 	bl	8000a54 <__aeabi_uldivmod>
 8003438:	4603      	mov	r3, r0
 800343a:	460c      	mov	r4, r1
 800343c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800343e:	4b0b      	ldr	r3, [pc, #44]	; (800346c <HAL_RCC_GetSysClockFreq+0x158>)
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	0c1b      	lsrs	r3, r3, #16
 8003444:	f003 0303 	and.w	r3, r3, #3
 8003448:	3301      	adds	r3, #1
 800344a:	005b      	lsls	r3, r3, #1
 800344c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	fbb2 f3f3 	udiv	r3, r2, r3
 8003456:	60bb      	str	r3, [r7, #8]
      break;
 8003458:	e002      	b.n	8003460 <HAL_RCC_GetSysClockFreq+0x14c>
=======
 80032a2:	4b30      	ldr	r3, [pc, #192]	; (8003364 <HAL_RCC_GetSysClockFreq+0x158>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	099b      	lsrs	r3, r3, #6
 80032a8:	f04f 0400 	mov.w	r4, #0
 80032ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80032b0:	f04f 0200 	mov.w	r2, #0
 80032b4:	ea03 0501 	and.w	r5, r3, r1
 80032b8:	ea04 0602 	and.w	r6, r4, r2
 80032bc:	4629      	mov	r1, r5
 80032be:	4632      	mov	r2, r6
 80032c0:	f04f 0300 	mov.w	r3, #0
 80032c4:	f04f 0400 	mov.w	r4, #0
 80032c8:	0154      	lsls	r4, r2, #5
 80032ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80032ce:	014b      	lsls	r3, r1, #5
 80032d0:	4619      	mov	r1, r3
 80032d2:	4622      	mov	r2, r4
 80032d4:	1b49      	subs	r1, r1, r5
 80032d6:	eb62 0206 	sbc.w	r2, r2, r6
 80032da:	f04f 0300 	mov.w	r3, #0
 80032de:	f04f 0400 	mov.w	r4, #0
 80032e2:	0194      	lsls	r4, r2, #6
 80032e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80032e8:	018b      	lsls	r3, r1, #6
 80032ea:	1a5b      	subs	r3, r3, r1
 80032ec:	eb64 0402 	sbc.w	r4, r4, r2
 80032f0:	f04f 0100 	mov.w	r1, #0
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	00e2      	lsls	r2, r4, #3
 80032fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80032fe:	00d9      	lsls	r1, r3, #3
 8003300:	460b      	mov	r3, r1
 8003302:	4614      	mov	r4, r2
 8003304:	195b      	adds	r3, r3, r5
 8003306:	eb44 0406 	adc.w	r4, r4, r6
 800330a:	f04f 0100 	mov.w	r1, #0
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	02a2      	lsls	r2, r4, #10
 8003314:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003318:	0299      	lsls	r1, r3, #10
 800331a:	460b      	mov	r3, r1
 800331c:	4614      	mov	r4, r2
 800331e:	4618      	mov	r0, r3
 8003320:	4621      	mov	r1, r4
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f04f 0400 	mov.w	r4, #0
 8003328:	461a      	mov	r2, r3
 800332a:	4623      	mov	r3, r4
 800332c:	f7fd fb92 	bl	8000a54 <__aeabi_uldivmod>
 8003330:	4603      	mov	r3, r0
 8003332:	460c      	mov	r4, r1
 8003334:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003336:	4b0b      	ldr	r3, [pc, #44]	; (8003364 <HAL_RCC_GetSysClockFreq+0x158>)
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	0c1b      	lsrs	r3, r3, #16
 800333c:	f003 0303 	and.w	r3, r3, #3
 8003340:	3301      	adds	r3, #1
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	fbb2 f3f3 	udiv	r3, r2, r3
 800334e:	60bb      	str	r3, [r7, #8]
      break;
 8003350:	e002      	b.n	8003358 <HAL_RCC_GetSysClockFreq+0x14c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
<<<<<<< HEAD
 800345a:	4b05      	ldr	r3, [pc, #20]	; (8003470 <HAL_RCC_GetSysClockFreq+0x15c>)
 800345c:	60bb      	str	r3, [r7, #8]
      break;
 800345e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003460:	68bb      	ldr	r3, [r7, #8]
}
 8003462:	4618      	mov	r0, r3
 8003464:	3714      	adds	r7, #20
 8003466:	46bd      	mov	sp, r7
 8003468:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	00f42400 	.word	0x00f42400
 8003474:	017d7840 	.word	0x017d7840

08003478 <HAL_TIM_Base_Init>:
=======
 8003352:	4b05      	ldr	r3, [pc, #20]	; (8003368 <HAL_RCC_GetSysClockFreq+0x15c>)
 8003354:	60bb      	str	r3, [r7, #8]
      break;
 8003356:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003358:	68bb      	ldr	r3, [r7, #8]
}
 800335a:	4618      	mov	r0, r3
 800335c:	3714      	adds	r7, #20
 800335e:	46bd      	mov	sp, r7
 8003360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003362:	bf00      	nop
 8003364:	40023800 	.word	0x40023800
 8003368:	00f42400 	.word	0x00f42400
 800336c:	017d7840 	.word	0x017d7840

08003370 <HAL_TIM_Base_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003478:	b580      	push	{r7, lr}
 800347a:	b082      	sub	sp, #8
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d101      	bne.n	800348a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003486:	2301      	movs	r3, #1
 8003488:	e01d      	b.n	80034c6 <HAL_TIM_Base_Init+0x4e>
=======
 8003370:	b580      	push	{r7, lr}
 8003372:	b082      	sub	sp, #8
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e01d      	b.n	80033be <HAL_TIM_Base_Init+0x4e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003490:	b2db      	uxtb	r3, r3
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
<<<<<<< HEAD
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7fe fb68 	bl	8001b74 <HAL_TIM_Base_MspInit>
=======
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fe fb68 	bl	8001a6c <HAL_TIM_Base_MspInit>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2202      	movs	r2, #2
 80034a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3304      	adds	r3, #4
 80034b4:	4619      	mov	r1, r3
 80034b6:	4610      	mov	r0, r2
 80034b8:	f000 fd82 	bl	8003fc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	3708      	adds	r7, #8
 80034ca:	46bd      	mov	sp, r7
 80034cc:	bd80      	pop	{r7, pc}

080034ce <HAL_TIM_Base_Start_IT>:
=======
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2202      	movs	r2, #2
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3304      	adds	r3, #4
 80033ac:	4619      	mov	r1, r3
 80033ae:	4610      	mov	r0, r2
 80033b0:	f000 fd82 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2201      	movs	r2, #1
 80033b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033bc:	2300      	movs	r3, #0
}
 80033be:	4618      	mov	r0, r3
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}

080033c6 <HAL_TIM_Base_Start_IT>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80034ce:	b480      	push	{r7}
 80034d0:	b085      	sub	sp, #20
 80034d2:	af00      	add	r7, sp, #0
 80034d4:	6078      	str	r0, [r7, #4]
=======
 80033c6:	b480      	push	{r7}
 80033c8:	b085      	sub	sp, #20
 80033ca:	af00      	add	r7, sp, #0
 80033cc:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
<<<<<<< HEAD
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	68da      	ldr	r2, [r3, #12]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0201 	orr.w	r2, r2, #1
 80034e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	689b      	ldr	r3, [r3, #8]
 80034ec:	f003 0307 	and.w	r3, r3, #7
 80034f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2b06      	cmp	r3, #6
 80034f6:	d007      	beq.n	8003508 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f042 0201 	orr.w	r2, r2, #1
 8003506:	601a      	str	r2, [r3, #0]
=======
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f042 0201 	orr.w	r2, r2, #1
 80033dc:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b06      	cmp	r3, #6
 80033ee:	d007      	beq.n	8003400 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	681a      	ldr	r2, [r3, #0]
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f042 0201 	orr.w	r2, r2, #1
 80033fe:	601a      	str	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003508:	2300      	movs	r3, #0
}
 800350a:	4618      	mov	r0, r3
 800350c:	3714      	adds	r7, #20
 800350e:	46bd      	mov	sp, r7
 8003510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003514:	4770      	bx	lr

08003516 <HAL_TIM_PWM_Init>:
=======
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3714      	adds	r7, #20
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_TIM_PWM_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003516:	b580      	push	{r7, lr}
 8003518:	b082      	sub	sp, #8
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d101      	bne.n	8003528 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e01d      	b.n	8003564 <HAL_TIM_PWM_Init+0x4e>
=======
 800340e:	b580      	push	{r7, lr}
 8003410:	b082      	sub	sp, #8
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e01d      	b.n	800345c <HAL_TIM_PWM_Init+0x4e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800352e:	b2db      	uxtb	r3, r3
 8003530:	2b00      	cmp	r3, #0
 8003532:	d106      	bne.n	8003542 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003426:	b2db      	uxtb	r3, r3
 8003428:	2b00      	cmp	r3, #0
 800342a:	d106      	bne.n	800343a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2200      	movs	r2, #0
 8003430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
<<<<<<< HEAD
 800353c:	6878      	ldr	r0, [r7, #4]
 800353e:	f000 f815 	bl	800356c <HAL_TIM_PWM_MspInit>
=======
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f815 	bl	8003464 <HAL_TIM_PWM_MspInit>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2202      	movs	r2, #2
 8003546:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3304      	adds	r3, #4
 8003552:	4619      	mov	r1, r3
 8003554:	4610      	mov	r0, r2
 8003556:	f000 fd33 	bl	8003fc0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2201      	movs	r2, #1
 800355e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003562:	2300      	movs	r3, #0
}
 8003564:	4618      	mov	r0, r3
 8003566:	3708      	adds	r7, #8
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_TIM_PWM_MspInit>:
=======
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2202      	movs	r2, #2
 800343e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681a      	ldr	r2, [r3, #0]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	3304      	adds	r3, #4
 800344a:	4619      	mov	r1, r3
 800344c:	4610      	mov	r0, r2
 800344e:	f000 fd33 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345a:	2300      	movs	r3, #0
}
 800345c:	4618      	mov	r0, r3
 800345e:	3708      	adds	r7, #8
 8003460:	46bd      	mov	sp, r7
 8003462:	bd80      	pop	{r7, pc}

08003464 <HAL_TIM_PWM_MspInit>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
=======
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_PWM_Start_DMA>:
=======
 800346c:	bf00      	nop
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr

08003478 <HAL_TIM_PWM_Start_DMA>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
<<<<<<< HEAD
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	60b9      	str	r1, [r7, #8]
 800358a:	607a      	str	r2, [r7, #4]
 800358c:	807b      	strh	r3, [r7, #2]
=======
 8003478:	b580      	push	{r7, lr}
 800347a:	b086      	sub	sp, #24
 800347c:	af00      	add	r7, sp, #0
 800347e:	60f8      	str	r0, [r7, #12]
 8003480:	60b9      	str	r1, [r7, #8]
 8003482:	607a      	str	r2, [r7, #4]
 8003484:	807b      	strh	r3, [r7, #2]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
<<<<<<< HEAD
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b02      	cmp	r3, #2
 8003598:	d101      	bne.n	800359e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800359a:	2302      	movs	r3, #2
 800359c:	e0f3      	b.n	8003786 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d10b      	bne.n	80035c2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d104      	bne.n	80035ba <HAL_TIM_PWM_Start_DMA+0x3a>
 80035b0:	887b      	ldrh	r3, [r7, #2]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d001      	beq.n	80035ba <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e0e5      	b.n	8003786 <HAL_TIM_PWM_Start_DMA+0x206>
=======
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800348c:	b2db      	uxtb	r3, r3
 800348e:	2b02      	cmp	r3, #2
 8003490:	d101      	bne.n	8003496 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8003492:	2302      	movs	r3, #2
 8003494:	e0f3      	b.n	800367e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800349c:	b2db      	uxtb	r3, r3
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d10b      	bne.n	80034ba <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <HAL_TIM_PWM_Start_DMA+0x3a>
 80034a8:	887b      	ldrh	r3, [r7, #2]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d001      	beq.n	80034b2 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e0e5      	b.n	800367e <HAL_TIM_PWM_Start_DMA+0x206>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2202      	movs	r2, #2
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  else
  {
    /* nothing to do */
  }

  switch (Channel)
<<<<<<< HEAD
 80035c2:	68bb      	ldr	r3, [r7, #8]
 80035c4:	2b0c      	cmp	r3, #12
 80035c6:	f200 80ad 	bhi.w	8003724 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80035ca:	a201      	add	r2, pc, #4	; (adr r2, 80035d0 <HAL_TIM_PWM_Start_DMA+0x50>)
 80035cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d0:	08003605 	.word	0x08003605
 80035d4:	08003725 	.word	0x08003725
 80035d8:	08003725 	.word	0x08003725
 80035dc:	08003725 	.word	0x08003725
 80035e0:	0800364d 	.word	0x0800364d
 80035e4:	08003725 	.word	0x08003725
 80035e8:	08003725 	.word	0x08003725
 80035ec:	08003725 	.word	0x08003725
 80035f0:	08003695 	.word	0x08003695
 80035f4:	08003725 	.word	0x08003725
 80035f8:	08003725 	.word	0x08003725
 80035fc:	08003725 	.word	0x08003725
 8003600:	080036dd 	.word	0x080036dd
=======
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	2b0c      	cmp	r3, #12
 80034be:	f200 80ad 	bhi.w	800361c <HAL_TIM_PWM_Start_DMA+0x1a4>
 80034c2:	a201      	add	r2, pc, #4	; (adr r2, 80034c8 <HAL_TIM_PWM_Start_DMA+0x50>)
 80034c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034c8:	080034fd 	.word	0x080034fd
 80034cc:	0800361d 	.word	0x0800361d
 80034d0:	0800361d 	.word	0x0800361d
 80034d4:	0800361d 	.word	0x0800361d
 80034d8:	08003545 	.word	0x08003545
 80034dc:	0800361d 	.word	0x0800361d
 80034e0:	0800361d 	.word	0x0800361d
 80034e4:	0800361d 	.word	0x0800361d
 80034e8:	0800358d 	.word	0x0800358d
 80034ec:	0800361d 	.word	0x0800361d
 80034f0:	0800361d 	.word	0x0800361d
 80034f4:	0800361d 	.word	0x0800361d
 80034f8:	080035d5 	.word	0x080035d5
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	4a61      	ldr	r2, [pc, #388]	; (8003790 <HAL_TIM_PWM_Start_DMA+0x210>)
 800360a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003610:	4a60      	ldr	r2, [pc, #384]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x214>)
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003618:	4a5f      	ldr	r2, [pc, #380]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x218>)
 800361a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003620:	6879      	ldr	r1, [r7, #4]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	3334      	adds	r3, #52	; 0x34
 8003628:	461a      	mov	r2, r3
 800362a:	887b      	ldrh	r3, [r7, #2]
 800362c:	f7fe fe76 	bl	800231c <HAL_DMA_Start_IT>
 8003630:	4603      	mov	r3, r0
 8003632:	2b00      	cmp	r3, #0
 8003634:	d001      	beq.n	800363a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e0a5      	b.n	8003786 <HAL_TIM_PWM_Start_DMA+0x206>
=======
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	4a61      	ldr	r2, [pc, #388]	; (8003688 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003502:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	4a60      	ldr	r2, [pc, #384]	; (800368c <HAL_TIM_PWM_Start_DMA+0x214>)
 800350a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003510:	4a5f      	ldr	r2, [pc, #380]	; (8003690 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003512:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003518:	6879      	ldr	r1, [r7, #4]
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	3334      	adds	r3, #52	; 0x34
 8003520:	461a      	mov	r2, r3
 8003522:	887b      	ldrh	r3, [r7, #2]
 8003524:	f7fe fe76 	bl	8002214 <HAL_DMA_Start_IT>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d001      	beq.n	8003532 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	e0a5      	b.n	800367e <HAL_TIM_PWM_Start_DMA+0x206>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
<<<<<<< HEAD
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68da      	ldr	r2, [r3, #12]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003648:	60da      	str	r2, [r3, #12]
      break;
 800364a:	e06c      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0x1a6>
=======
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	68da      	ldr	r2, [r3, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003540:	60da      	str	r2, [r3, #12]
      break;
 8003542:	e06c      	b.n	800361e <HAL_TIM_PWM_Start_DMA+0x1a6>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	4a4f      	ldr	r2, [pc, #316]	; (8003790 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003652:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003658:	4a4e      	ldr	r2, [pc, #312]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x214>)
 800365a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003660:	4a4d      	ldr	r2, [pc, #308]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x218>)
 8003662:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	3338      	adds	r3, #56	; 0x38
 8003670:	461a      	mov	r2, r3
 8003672:	887b      	ldrh	r3, [r7, #2]
 8003674:	f7fe fe52 	bl	800231c <HAL_DMA_Start_IT>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e081      	b.n	8003786 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	68da      	ldr	r2, [r3, #12]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003690:	60da      	str	r2, [r3, #12]
      break;
 8003692:	e048      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0x1a6>
=======
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	4a4f      	ldr	r2, [pc, #316]	; (8003688 <HAL_TIM_PWM_Start_DMA+0x210>)
 800354a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003550:	4a4e      	ldr	r2, [pc, #312]	; (800368c <HAL_TIM_PWM_Start_DMA+0x214>)
 8003552:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003558:	4a4d      	ldr	r2, [pc, #308]	; (8003690 <HAL_TIM_PWM_Start_DMA+0x218>)
 800355a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	3338      	adds	r3, #56	; 0x38
 8003568:	461a      	mov	r2, r3
 800356a:	887b      	ldrh	r3, [r7, #2]
 800356c:	f7fe fe52 	bl	8002214 <HAL_DMA_Start_IT>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d001      	beq.n	800357a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e081      	b.n	800367e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68da      	ldr	r2, [r3, #12]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003588:	60da      	str	r2, [r3, #12]
      break;
 800358a:	e048      	b.n	800361e <HAL_TIM_PWM_Start_DMA+0x1a6>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003698:	4a3d      	ldr	r2, [pc, #244]	; (8003790 <HAL_TIM_PWM_Start_DMA+0x210>)
 800369a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a0:	4a3c      	ldr	r2, [pc, #240]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x214>)
 80036a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a3b      	ldr	r2, [pc, #236]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x218>)
 80036aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80036b0:	6879      	ldr	r1, [r7, #4]
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	333c      	adds	r3, #60	; 0x3c
 80036b8:	461a      	mov	r2, r3
 80036ba:	887b      	ldrh	r3, [r7, #2]
 80036bc:	f7fe fe2e 	bl	800231c <HAL_DMA_Start_IT>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d001      	beq.n	80036ca <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e05d      	b.n	8003786 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	68da      	ldr	r2, [r3, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036d8:	60da      	str	r2, [r3, #12]
      break;
 80036da:	e024      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0x1a6>
=======
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003590:	4a3d      	ldr	r2, [pc, #244]	; (8003688 <HAL_TIM_PWM_Start_DMA+0x210>)
 8003592:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	4a3c      	ldr	r2, [pc, #240]	; (800368c <HAL_TIM_PWM_Start_DMA+0x214>)
 800359a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a0:	4a3b      	ldr	r2, [pc, #236]	; (8003690 <HAL_TIM_PWM_Start_DMA+0x218>)
 80035a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	333c      	adds	r3, #60	; 0x3c
 80035b0:	461a      	mov	r2, r3
 80035b2:	887b      	ldrh	r3, [r7, #2]
 80035b4:	f7fe fe2e 	bl	8002214 <HAL_DMA_Start_IT>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d001      	beq.n	80035c2 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e05d      	b.n	800367e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	68da      	ldr	r2, [r3, #12]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d0:	60da      	str	r2, [r3, #12]
      break;
 80035d2:	e024      	b.n	800361e <HAL_TIM_PWM_Start_DMA+0x1a6>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
<<<<<<< HEAD
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e0:	4a2b      	ldr	r2, [pc, #172]	; (8003790 <HAL_TIM_PWM_Start_DMA+0x210>)
 80036e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e8:	4a2a      	ldr	r2, [pc, #168]	; (8003794 <HAL_TIM_PWM_Start_DMA+0x214>)
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f0:	4a29      	ldr	r2, [pc, #164]	; (8003798 <HAL_TIM_PWM_Start_DMA+0x218>)
 80036f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80036f8:	6879      	ldr	r1, [r7, #4]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	3340      	adds	r3, #64	; 0x40
 8003700:	461a      	mov	r2, r3
 8003702:	887b      	ldrh	r3, [r7, #2]
 8003704:	f7fe fe0a 	bl	800231c <HAL_DMA_Start_IT>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e039      	b.n	8003786 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003720:	60da      	str	r2, [r3, #12]
      break;
 8003722:	e000      	b.n	8003726 <HAL_TIM_PWM_Start_DMA+0x1a6>
=======
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	4a2b      	ldr	r2, [pc, #172]	; (8003688 <HAL_TIM_PWM_Start_DMA+0x210>)
 80035da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e0:	4a2a      	ldr	r2, [pc, #168]	; (800368c <HAL_TIM_PWM_Start_DMA+0x214>)
 80035e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e8:	4a29      	ldr	r2, [pc, #164]	; (8003690 <HAL_TIM_PWM_Start_DMA+0x218>)
 80035ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80035f0:	6879      	ldr	r1, [r7, #4]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	3340      	adds	r3, #64	; 0x40
 80035f8:	461a      	mov	r2, r3
 80035fa:	887b      	ldrh	r3, [r7, #2]
 80035fc:	f7fe fe0a 	bl	8002214 <HAL_DMA_Start_IT>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d001      	beq.n	800360a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8003606:	2301      	movs	r3, #1
 8003608:	e039      	b.n	800367e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	68da      	ldr	r2, [r3, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003618:	60da      	str	r2, [r3, #12]
      break;
 800361a:	e000      	b.n	800361e <HAL_TIM_PWM_Start_DMA+0x1a6>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    default:
      break;
<<<<<<< HEAD
 8003724:	bf00      	nop
=======
 800361c:	bf00      	nop
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
<<<<<<< HEAD
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2201      	movs	r2, #1
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 ff30 	bl	8004594 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a18      	ldr	r2, [pc, #96]	; (800379c <HAL_TIM_PWM_Start_DMA+0x21c>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a17      	ldr	r2, [pc, #92]	; (80037a0 <HAL_TIM_PWM_Start_DMA+0x220>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_TIM_PWM_Start_DMA+0x1cc>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_TIM_PWM_Start_DMA+0x1ce>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d007      	beq.n	8003762 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003760:	645a      	str	r2, [r3, #68]	; 0x44
=======
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2201      	movs	r2, #1
 8003624:	68b9      	ldr	r1, [r7, #8]
 8003626:	4618      	mov	r0, r3
 8003628:	f000 ff30 	bl	800448c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a18      	ldr	r2, [pc, #96]	; (8003694 <HAL_TIM_PWM_Start_DMA+0x21c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIM_PWM_Start_DMA+0x1c8>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <HAL_TIM_PWM_Start_DMA+0x220>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d101      	bne.n	8003644 <HAL_TIM_PWM_Start_DMA+0x1cc>
 8003640:	2301      	movs	r3, #1
 8003642:	e000      	b.n	8003646 <HAL_TIM_PWM_Start_DMA+0x1ce>
 8003644:	2300      	movs	r3, #0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d007      	beq.n	800365a <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003658:	645a      	str	r2, [r3, #68]	; 0x44
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
<<<<<<< HEAD
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f003 0307 	and.w	r3, r3, #7
 800376c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800376e:	697b      	ldr	r3, [r7, #20]
 8003770:	2b06      	cmp	r3, #6
 8003772:	d007      	beq.n	8003784 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	681a      	ldr	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f042 0201 	orr.w	r2, r2, #1
 8003782:	601a      	str	r2, [r3, #0]
=======
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	f003 0307 	and.w	r3, r3, #7
 8003664:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003666:	697b      	ldr	r3, [r7, #20]
 8003668:	2b06      	cmp	r3, #6
 800366a:	d007      	beq.n	800367c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0201 	orr.w	r2, r2, #1
 800367a:	601a      	str	r2, [r3, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Return function status */
  return HAL_OK;
<<<<<<< HEAD
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3718      	adds	r7, #24
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	08003edf 	.word	0x08003edf
 8003794:	08003f4f 	.word	0x08003f4f
 8003798:	08003ebb 	.word	0x08003ebb
 800379c:	40010000 	.word	0x40010000
 80037a0:	40010400 	.word	0x40010400

080037a4 <HAL_TIM_Encoder_Init>:
=======
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3718      	adds	r7, #24
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	08003dd7 	.word	0x08003dd7
 800368c:	08003e47 	.word	0x08003e47
 8003690:	08003db3 	.word	0x08003db3
 8003694:	40010000 	.word	0x40010000
 8003698:	40010400 	.word	0x40010400

0800369c <HAL_TIM_Encoder_Init>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
<<<<<<< HEAD
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b086      	sub	sp, #24
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
=======
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
<<<<<<< HEAD
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d101      	bne.n	80037b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e083      	b.n	80038c0 <HAL_TIM_Encoder_Init+0x11c>
=======
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e083      	b.n	80037b8 <HAL_TIM_Encoder_Init+0x11c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
<<<<<<< HEAD
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d106      	bne.n	80037d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
=======
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d106      	bne.n	80036ca <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
<<<<<<< HEAD
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7fe f943 	bl	8001a58 <HAL_TIM_Encoder_MspInit>
=======
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fe f943 	bl	8001950 <HAL_TIM_Encoder_MspInit>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
<<<<<<< HEAD
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2202      	movs	r2, #2
 80037d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	689b      	ldr	r3, [r3, #8]
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037e8:	f023 0307 	bic.w	r3, r3, #7
 80037ec:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3304      	adds	r3, #4
 80037f6:	4619      	mov	r1, r3
 80037f8:	4610      	mov	r0, r2
 80037fa:	f000 fbe1 	bl	8003fc0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6a1b      	ldr	r3, [r3, #32]
 8003814:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	697a      	ldr	r2, [r7, #20]
 800381c:	4313      	orrs	r3, r2
 800381e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003826:	f023 0303 	bic.w	r3, r3, #3
 800382a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	689a      	ldr	r2, [r3, #8]
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	699b      	ldr	r3, [r3, #24]
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	4313      	orrs	r3, r2
 8003838:	693a      	ldr	r2, [r7, #16]
 800383a:	4313      	orrs	r3, r2
 800383c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003844:	f023 030c 	bic.w	r3, r3, #12
 8003848:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003850:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	68da      	ldr	r2, [r3, #12]
 800385a:	683b      	ldr	r3, [r7, #0]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	4313      	orrs	r3, r2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	011a      	lsls	r2, r3, #4
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	6a1b      	ldr	r3, [r3, #32]
 8003872:	031b      	lsls	r3, r3, #12
 8003874:	4313      	orrs	r3, r2
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	4313      	orrs	r3, r2
 800387a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003882:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800388a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685a      	ldr	r2, [r3, #4]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	011b      	lsls	r3, r3, #4
 8003896:	4313      	orrs	r3, r2
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4313      	orrs	r3, r2
 800389c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	693a      	ldr	r2, [r7, #16]
 80038ac:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68fa      	ldr	r2, [r7, #12]
 80038b4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3718      	adds	r7, #24
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_Encoder_Start>:
=======
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036e0:	f023 0307 	bic.w	r3, r3, #7
 80036e4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	3304      	adds	r3, #4
 80036ee:	4619      	mov	r1, r3
 80036f0:	4610      	mov	r0, r2
 80036f2:	f000 fbe1 	bl	8003eb8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	697a      	ldr	r2, [r7, #20]
 8003714:	4313      	orrs	r3, r2
 8003716:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371e:	f023 0303 	bic.w	r3, r3, #3
 8003722:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	689a      	ldr	r2, [r3, #8]
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	699b      	ldr	r3, [r3, #24]
 800372c:	021b      	lsls	r3, r3, #8
 800372e:	4313      	orrs	r3, r2
 8003730:	693a      	ldr	r2, [r7, #16]
 8003732:	4313      	orrs	r3, r2
 8003734:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800373c:	f023 030c 	bic.w	r3, r3, #12
 8003740:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003742:	693b      	ldr	r3, [r7, #16]
 8003744:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003748:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	021b      	lsls	r3, r3, #8
 8003758:	4313      	orrs	r3, r2
 800375a:	693a      	ldr	r2, [r7, #16]
 800375c:	4313      	orrs	r3, r2
 800375e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	011a      	lsls	r2, r3, #4
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	6a1b      	ldr	r3, [r3, #32]
 800376a:	031b      	lsls	r3, r3, #12
 800376c:	4313      	orrs	r3, r2
 800376e:	693a      	ldr	r2, [r7, #16]
 8003770:	4313      	orrs	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800377a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003782:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	695b      	ldr	r3, [r3, #20]
 800378c:	011b      	lsls	r3, r3, #4
 800378e:	4313      	orrs	r3, r2
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	68fa      	ldr	r2, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_TIM_Encoder_Start>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
<<<<<<< HEAD
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
=======
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b082      	sub	sp, #8
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
<<<<<<< HEAD
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <HAL_TIM_Encoder_Start+0x16>
 80038d8:	2b04      	cmp	r3, #4
 80038da:	d008      	beq.n	80038ee <HAL_TIM_Encoder_Start+0x26>
 80038dc:	e00f      	b.n	80038fe <HAL_TIM_Encoder_Start+0x36>
=======
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d002      	beq.n	80037d6 <HAL_TIM_Encoder_Start+0x16>
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d008      	beq.n	80037e6 <HAL_TIM_Encoder_Start+0x26>
 80037d4:	e00f      	b.n	80037f6 <HAL_TIM_Encoder_Start+0x36>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2201      	movs	r2, #1
 80038e4:	2100      	movs	r1, #0
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fe54 	bl	8004594 <TIM_CCxChannelCmd>
      break;
 80038ec:	e016      	b.n	800391c <HAL_TIM_Encoder_Start+0x54>
=======
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	2201      	movs	r2, #1
 80037dc:	2100      	movs	r1, #0
 80037de:	4618      	mov	r0, r3
 80037e0:	f000 fe54 	bl	800448c <TIM_CCxChannelCmd>
      break;
 80037e4:	e016      	b.n	8003814 <HAL_TIM_Encoder_Start+0x54>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2201      	movs	r2, #1
 80038f4:	2104      	movs	r1, #4
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 fe4c 	bl	8004594 <TIM_CCxChannelCmd>
      break;
 80038fc:	e00e      	b.n	800391c <HAL_TIM_Encoder_Start+0x54>
=======
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2201      	movs	r2, #1
 80037ec:	2104      	movs	r1, #4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f000 fe4c 	bl	800448c <TIM_CCxChannelCmd>
      break;
 80037f4:	e00e      	b.n	8003814 <HAL_TIM_Encoder_Start+0x54>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
<<<<<<< HEAD
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2201      	movs	r2, #1
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe44 	bl	8004594 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2201      	movs	r2, #1
 8003912:	2104      	movs	r1, #4
 8003914:	4618      	mov	r0, r3
 8003916:	f000 fe3d 	bl	8004594 <TIM_CCxChannelCmd>
      break;
 800391a:	bf00      	nop
=======
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	2201      	movs	r2, #1
 80037fc:	2100      	movs	r1, #0
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 fe44 	bl	800448c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2201      	movs	r2, #1
 800380a:	2104      	movs	r1, #4
 800380c:	4618      	mov	r0, r3
 800380e:	f000 fe3d 	bl	800448c <TIM_CCxChannelCmd>
      break;
 8003812:	bf00      	nop
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
<<<<<<< HEAD
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3708      	adds	r7, #8
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <HAL_TIM_IRQHandler>:
=======
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}

0800382e <HAL_TIM_IRQHandler>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003936:	b580      	push	{r7, lr}
 8003938:	b082      	sub	sp, #8
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f003 0302 	and.w	r3, r3, #2
 8003948:	2b02      	cmp	r3, #2
 800394a:	d122      	bne.n	8003992 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
 8003952:	f003 0302 	and.w	r3, r3, #2
 8003956:	2b02      	cmp	r3, #2
 8003958:	d11b      	bne.n	8003992 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f06f 0202 	mvn.w	r2, #2
 8003962:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	699b      	ldr	r3, [r3, #24]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b00      	cmp	r3, #0
 8003976:	d003      	beq.n	8003980 <HAL_TIM_IRQHandler+0x4a>
=======
 800382e:	b580      	push	{r7, lr}
 8003830:	b082      	sub	sp, #8
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	f003 0302 	and.w	r3, r3, #2
 8003840:	2b02      	cmp	r3, #2
 8003842:	d122      	bne.n	800388a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b02      	cmp	r3, #2
 8003850:	d11b      	bne.n	800388a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f06f 0202 	mvn.w	r2, #2
 800385a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	f003 0303 	and.w	r3, r3, #3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d003      	beq.n	8003878 <HAL_TIM_IRQHandler+0x4a>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 fa6c 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 800397e:	e005      	b.n	800398c <HAL_TIM_IRQHandler+0x56>
=======
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 fa6c 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003876:	e005      	b.n	8003884 <HAL_TIM_IRQHandler+0x56>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 fa5e 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fa6f 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	771a      	strb	r2, [r3, #28]
=======
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fa5e 	bl	8003d3a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800387e:	6878      	ldr	r0, [r7, #4]
 8003880:	f000 fa6f 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	771a      	strb	r2, [r3, #28]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
<<<<<<< HEAD
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b04      	cmp	r3, #4
 800399e:	d122      	bne.n	80039e6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	68db      	ldr	r3, [r3, #12]
 80039a6:	f003 0304 	and.w	r3, r3, #4
 80039aa:	2b04      	cmp	r3, #4
 80039ac:	d11b      	bne.n	80039e6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f06f 0204 	mvn.w	r2, #4
 80039b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2202      	movs	r2, #2
 80039bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x9e>
=======
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f003 0304 	and.w	r3, r3, #4
 8003894:	2b04      	cmp	r3, #4
 8003896:	d122      	bne.n	80038de <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	f003 0304 	and.w	r3, r3, #4
 80038a2:	2b04      	cmp	r3, #4
 80038a4:	d11b      	bne.n	80038de <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f06f 0204 	mvn.w	r2, #4
 80038ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	699b      	ldr	r3, [r3, #24]
 80038bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d003      	beq.n	80038cc <HAL_TIM_IRQHandler+0x9e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 fa42 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 80039d2:	e005      	b.n	80039e0 <HAL_TIM_IRQHandler+0xaa>
=======
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fa42 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 80038ca:	e005      	b.n	80038d8 <HAL_TIM_IRQHandler+0xaa>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 fa34 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fa45 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	771a      	strb	r2, [r3, #28]
=======
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fa34 	bl	8003d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fa45 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	771a      	strb	r2, [r3, #28]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
<<<<<<< HEAD
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
 80039ec:	f003 0308 	and.w	r3, r3, #8
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d122      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f003 0308 	and.w	r3, r3, #8
 80039fe:	2b08      	cmp	r3, #8
 8003a00:	d11b      	bne.n	8003a3a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f06f 0208 	mvn.w	r2, #8
 8003a0a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2204      	movs	r2, #4
 8003a10:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	69db      	ldr	r3, [r3, #28]
 8003a18:	f003 0303 	and.w	r3, r3, #3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <HAL_TIM_IRQHandler+0xf2>
=======
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	691b      	ldr	r3, [r3, #16]
 80038e4:	f003 0308 	and.w	r3, r3, #8
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d122      	bne.n	8003932 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	f003 0308 	and.w	r3, r3, #8
 80038f6:	2b08      	cmp	r3, #8
 80038f8:	d11b      	bne.n	8003932 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	f06f 0208 	mvn.w	r2, #8
 8003902:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2204      	movs	r2, #4
 8003908:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	f003 0303 	and.w	r3, r3, #3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d003      	beq.n	8003920 <HAL_TIM_IRQHandler+0xf2>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fa18 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003a26:	e005      	b.n	8003a34 <HAL_TIM_IRQHandler+0xfe>
=======
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 fa18 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 800391e:	e005      	b.n	800392c <HAL_TIM_IRQHandler+0xfe>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 fa0a 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 fa1b 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	771a      	strb	r2, [r3, #28]
=======
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f000 fa0a 	bl	8003d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fa1b 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	771a      	strb	r2, [r3, #28]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
<<<<<<< HEAD
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	691b      	ldr	r3, [r3, #16]
 8003a40:	f003 0310 	and.w	r3, r3, #16
 8003a44:	2b10      	cmp	r3, #16
 8003a46:	d122      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	f003 0310 	and.w	r3, r3, #16
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d11b      	bne.n	8003a8e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f06f 0210 	mvn.w	r2, #16
 8003a5e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2208      	movs	r2, #8
 8003a64:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_TIM_IRQHandler+0x146>
=======
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	691b      	ldr	r3, [r3, #16]
 8003938:	f003 0310 	and.w	r3, r3, #16
 800393c:	2b10      	cmp	r3, #16
 800393e:	d122      	bne.n	8003986 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	f003 0310 	and.w	r3, r3, #16
 800394a:	2b10      	cmp	r3, #16
 800394c:	d11b      	bne.n	8003986 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	f06f 0210 	mvn.w	r2, #16
 8003956:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2208      	movs	r2, #8
 800395c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003968:	2b00      	cmp	r3, #0
 800396a:	d003      	beq.n	8003974 <HAL_TIM_IRQHandler+0x146>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
<<<<<<< HEAD
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	f000 f9ee 	bl	8003e56 <HAL_TIM_IC_CaptureCallback>
 8003a7a:	e005      	b.n	8003a88 <HAL_TIM_IRQHandler+0x152>
=======
 800396c:	6878      	ldr	r0, [r7, #4]
 800396e:	f000 f9ee 	bl	8003d4e <HAL_TIM_IC_CaptureCallback>
 8003972:	e005      	b.n	8003980 <HAL_TIM_IRQHandler+0x152>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
<<<<<<< HEAD
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f9e0 	bl	8003e42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f000 f9f1 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	771a      	strb	r2, [r3, #28]
=======
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f000 f9e0 	bl	8003d3a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	f000 f9f1 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	771a      	strb	r2, [r3, #28]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
<<<<<<< HEAD
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0301 	and.w	r3, r3, #1
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	d10e      	bne.n	8003aba <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d107      	bne.n	8003aba <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0201 	mvn.w	r2, #1
 8003ab2:	611a      	str	r2, [r3, #16]
=======
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	f003 0301 	and.w	r3, r3, #1
 8003990:	2b01      	cmp	r3, #1
 8003992:	d10e      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	2b01      	cmp	r3, #1
 80039a0:	d107      	bne.n	80039b2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f06f 0201 	mvn.w	r2, #1
 80039aa:	611a      	str	r2, [r3, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
<<<<<<< HEAD
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7fd f969 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
=======
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f7fd f9ed 	bl	8000d8c <HAL_TIM_PeriodElapsedCallback>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
<<<<<<< HEAD
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	691b      	ldr	r3, [r3, #16]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac4:	2b80      	cmp	r3, #128	; 0x80
 8003ac6:	d10e      	bne.n	8003ae6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad2:	2b80      	cmp	r3, #128	; 0x80
 8003ad4:	d107      	bne.n	8003ae6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ade:	611a      	str	r2, [r3, #16]
=======
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	2b80      	cmp	r3, #128	; 0x80
 80039be:	d10e      	bne.n	80039de <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ca:	2b80      	cmp	r3, #128	; 0x80
 80039cc:	d107      	bne.n	80039de <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80039d6:	611a      	str	r2, [r3, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
<<<<<<< HEAD
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fe03 	bl	80046ec <HAL_TIMEx_BreakCallback>
=======
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fe03 	bl	80045e4 <HAL_TIMEx_BreakCallback>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
<<<<<<< HEAD
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	691b      	ldr	r3, [r3, #16]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b40      	cmp	r3, #64	; 0x40
 8003af2:	d10e      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003afe:	2b40      	cmp	r3, #64	; 0x40
 8003b00:	d107      	bne.n	8003b12 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b0a:	611a      	str	r2, [r3, #16]
=======
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039e8:	2b40      	cmp	r3, #64	; 0x40
 80039ea:	d10e      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039f6:	2b40      	cmp	r3, #64	; 0x40
 80039f8:	d107      	bne.n	8003a0a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a02:	611a      	str	r2, [r3, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
<<<<<<< HEAD
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 f9c0 	bl	8003e92 <HAL_TIM_TriggerCallback>
=======
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f000 f9c0 	bl	8003d8a <HAL_TIM_TriggerCallback>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
<<<<<<< HEAD
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	f003 0320 	and.w	r3, r3, #32
 8003b1c:	2b20      	cmp	r3, #32
 8003b1e:	d10e      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	f003 0320 	and.w	r3, r3, #32
 8003b2a:	2b20      	cmp	r3, #32
 8003b2c:	d107      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f06f 0220 	mvn.w	r2, #32
 8003b36:	611a      	str	r2, [r3, #16]
=======
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	f003 0320 	and.w	r3, r3, #32
 8003a14:	2b20      	cmp	r3, #32
 8003a16:	d10e      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f003 0320 	and.w	r3, r3, #32
 8003a22:	2b20      	cmp	r3, #32
 8003a24:	d107      	bne.n	8003a36 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f06f 0220 	mvn.w	r2, #32
 8003a2e:	611a      	str	r2, [r3, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
<<<<<<< HEAD
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fdcd 	bl	80046d8 <HAL_TIMEx_CommutCallback>
=======
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 fdcd 	bl	80045d0 <HAL_TIMEx_CommutCallback>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
<<<<<<< HEAD
 8003b3e:	bf00      	nop
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_TIM_PWM_ConfigChannel>:
=======
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <HAL_TIM_PWM_ConfigChannel>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
<<<<<<< HEAD
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
=======
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d101      	bne.n	8003b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003b5e:	2302      	movs	r3, #2
 8003b60:	e0b4      	b.n	8003ccc <HAL_TIM_PWM_ConfigChannel+0x184>
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2b0c      	cmp	r3, #12
 8003b76:	f200 809f 	bhi.w	8003cb8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003b7a:	a201      	add	r2, pc, #4	; (adr r2, 8003b80 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b80:	08003bb5 	.word	0x08003bb5
 8003b84:	08003cb9 	.word	0x08003cb9
 8003b88:	08003cb9 	.word	0x08003cb9
 8003b8c:	08003cb9 	.word	0x08003cb9
 8003b90:	08003bf5 	.word	0x08003bf5
 8003b94:	08003cb9 	.word	0x08003cb9
 8003b98:	08003cb9 	.word	0x08003cb9
 8003b9c:	08003cb9 	.word	0x08003cb9
 8003ba0:	08003c37 	.word	0x08003c37
 8003ba4:	08003cb9 	.word	0x08003cb9
 8003ba8:	08003cb9 	.word	0x08003cb9
 8003bac:	08003cb9 	.word	0x08003cb9
 8003bb0:	08003c77 	.word	0x08003c77
=======
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d101      	bne.n	8003a5a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003a56:	2302      	movs	r3, #2
 8003a58:	e0b4      	b.n	8003bc4 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2202      	movs	r2, #2
 8003a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b0c      	cmp	r3, #12
 8003a6e:	f200 809f 	bhi.w	8003bb0 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003a72:	a201      	add	r2, pc, #4	; (adr r2, 8003a78 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a78:	08003aad 	.word	0x08003aad
 8003a7c:	08003bb1 	.word	0x08003bb1
 8003a80:	08003bb1 	.word	0x08003bb1
 8003a84:	08003bb1 	.word	0x08003bb1
 8003a88:	08003aed 	.word	0x08003aed
 8003a8c:	08003bb1 	.word	0x08003bb1
 8003a90:	08003bb1 	.word	0x08003bb1
 8003a94:	08003bb1 	.word	0x08003bb1
 8003a98:	08003b2f 	.word	0x08003b2f
 8003a9c:	08003bb1 	.word	0x08003bb1
 8003aa0:	08003bb1 	.word	0x08003bb1
 8003aa4:	08003bb1 	.word	0x08003bb1
 8003aa8:	08003b6f 	.word	0x08003b6f
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f000 faa0 	bl	8004100 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	699a      	ldr	r2, [r3, #24]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f042 0208 	orr.w	r2, r2, #8
 8003bce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	699a      	ldr	r2, [r3, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f022 0204 	bic.w	r2, r2, #4
 8003bde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6999      	ldr	r1, [r3, #24]
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	691a      	ldr	r2, [r3, #16]
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	619a      	str	r2, [r3, #24]
      break;
 8003bf2:	e062      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	68b9      	ldr	r1, [r7, #8]
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	f000 faa0 	bl	8003ff8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	699a      	ldr	r2, [r3, #24]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0208 	orr.w	r2, r2, #8
 8003ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699a      	ldr	r2, [r3, #24]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0204 	bic.w	r2, r2, #4
 8003ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6999      	ldr	r1, [r3, #24]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	691a      	ldr	r2, [r3, #16]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	430a      	orrs	r2, r1
 8003ae8:	619a      	str	r2, [r3, #24]
      break;
 8003aea:	e062      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	68b9      	ldr	r1, [r7, #8]
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 faf0 	bl	80041e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	699a      	ldr	r2, [r3, #24]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	699a      	ldr	r2, [r3, #24]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	6999      	ldr	r1, [r3, #24]
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	021a      	lsls	r2, r3, #8
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	430a      	orrs	r2, r1
 8003c32:	619a      	str	r2, [r3, #24]
      break;
 8003c34:	e041      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	68b9      	ldr	r1, [r7, #8]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f000 faf0 	bl	80040d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	699a      	ldr	r2, [r3, #24]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	699a      	ldr	r2, [r3, #24]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	6999      	ldr	r1, [r3, #24]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	691b      	ldr	r3, [r3, #16]
 8003b22:	021a      	lsls	r2, r3, #8
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	430a      	orrs	r2, r1
 8003b2a:	619a      	str	r2, [r3, #24]
      break;
 8003b2c:	e041      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f000 fb45 	bl	80042cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	69da      	ldr	r2, [r3, #28]
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f042 0208 	orr.w	r2, r2, #8
 8003c50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	69da      	ldr	r2, [r3, #28]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f022 0204 	bic.w	r2, r2, #4
 8003c60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	69d9      	ldr	r1, [r3, #28]
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	61da      	str	r2, [r3, #28]
      break;
 8003c74:	e021      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68b9      	ldr	r1, [r7, #8]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 fb45 	bl	80041c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f042 0208 	orr.w	r2, r2, #8
 8003b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69da      	ldr	r2, [r3, #28]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f022 0204 	bic.w	r2, r2, #4
 8003b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	69d9      	ldr	r1, [r3, #28]
 8003b60:	68bb      	ldr	r3, [r7, #8]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	430a      	orrs	r2, r1
 8003b6a:	61da      	str	r2, [r3, #28]
      break;
 8003b6c:	e021      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
<<<<<<< HEAD
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68b9      	ldr	r1, [r7, #8]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	f000 fb99 	bl	80043b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	69da      	ldr	r2, [r3, #28]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ca0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	69d9      	ldr	r1, [r3, #28]
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	691b      	ldr	r3, [r3, #16]
 8003cac:	021a      	lsls	r2, r3, #8
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	430a      	orrs	r2, r1
 8003cb4:	61da      	str	r2, [r3, #28]
      break;
 8003cb6:	e000      	b.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x172>
=======
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	68b9      	ldr	r1, [r7, #8]
 8003b74:	4618      	mov	r0, r3
 8003b76:	f000 fb99 	bl	80042ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	69da      	ldr	r2, [r3, #28]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69da      	ldr	r2, [r3, #28]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	69d9      	ldr	r1, [r3, #28]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	691b      	ldr	r3, [r3, #16]
 8003ba4:	021a      	lsls	r2, r3, #8
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	430a      	orrs	r2, r1
 8003bac:	61da      	str	r2, [r3, #28]
      break;
 8003bae:	e000      	b.n	8003bb2 <HAL_TIM_PWM_ConfigChannel+0x172>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    }

    default:
      break;
<<<<<<< HEAD
 8003cb8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3710      	adds	r7, #16
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_TIM_ConfigClockSource>:
=======
 8003bb0:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_TIM_ConfigClockSource>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
<<<<<<< HEAD
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
=======
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d101      	bne.n	8003cec <HAL_TIM_ConfigClockSource+0x18>
 8003ce8:	2302      	movs	r3, #2
 8003cea:	e0a6      	b.n	8003e3a <HAL_TIM_ConfigClockSource+0x166>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2201      	movs	r2, #1
 8003cf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2202      	movs	r2, #2
 8003cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d101      	bne.n	8003be4 <HAL_TIM_ConfigClockSource+0x18>
 8003be0:	2302      	movs	r3, #2
 8003be2:	e0a6      	b.n	8003d32 <HAL_TIM_ConfigClockSource+0x166>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2202      	movs	r2, #2
 8003bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
<<<<<<< HEAD
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689b      	ldr	r3, [r3, #8]
 8003d02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68fa      	ldr	r2, [r7, #12]
 8003d1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b40      	cmp	r3, #64	; 0x40
 8003d22:	d067      	beq.n	8003df4 <HAL_TIM_ConfigClockSource+0x120>
 8003d24:	2b40      	cmp	r3, #64	; 0x40
 8003d26:	d80b      	bhi.n	8003d40 <HAL_TIM_ConfigClockSource+0x6c>
 8003d28:	2b10      	cmp	r3, #16
 8003d2a:	d073      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0x140>
 8003d2c:	2b10      	cmp	r3, #16
 8003d2e:	d802      	bhi.n	8003d36 <HAL_TIM_ConfigClockSource+0x62>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d06f      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0x140>
=======
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	2b40      	cmp	r3, #64	; 0x40
 8003c1a:	d067      	beq.n	8003cec <HAL_TIM_ConfigClockSource+0x120>
 8003c1c:	2b40      	cmp	r3, #64	; 0x40
 8003c1e:	d80b      	bhi.n	8003c38 <HAL_TIM_ConfigClockSource+0x6c>
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d073      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0x140>
 8003c24:	2b10      	cmp	r3, #16
 8003c26:	d802      	bhi.n	8003c2e <HAL_TIM_ConfigClockSource+0x62>
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d06f      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0x140>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
<<<<<<< HEAD
 8003d34:	e078      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d36:	2b20      	cmp	r3, #32
 8003d38:	d06c      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0x140>
 8003d3a:	2b30      	cmp	r3, #48	; 0x30
 8003d3c:	d06a      	beq.n	8003e14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003d3e:	e073      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d40:	2b70      	cmp	r3, #112	; 0x70
 8003d42:	d00d      	beq.n	8003d60 <HAL_TIM_ConfigClockSource+0x8c>
 8003d44:	2b70      	cmp	r3, #112	; 0x70
 8003d46:	d804      	bhi.n	8003d52 <HAL_TIM_ConfigClockSource+0x7e>
 8003d48:	2b50      	cmp	r3, #80	; 0x50
 8003d4a:	d033      	beq.n	8003db4 <HAL_TIM_ConfigClockSource+0xe0>
 8003d4c:	2b60      	cmp	r3, #96	; 0x60
 8003d4e:	d041      	beq.n	8003dd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003d50:	e06a      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003d52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d56:	d066      	beq.n	8003e26 <HAL_TIM_ConfigClockSource+0x152>
 8003d58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d5c:	d017      	beq.n	8003d8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003d5e:	e063      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6818      	ldr	r0, [r3, #0]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	6899      	ldr	r1, [r3, #8]
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685a      	ldr	r2, [r3, #4]
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	68db      	ldr	r3, [r3, #12]
 8003d70:	f000 fbf0 	bl	8004554 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003d82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	609a      	str	r2, [r3, #8]
      break;
 8003d8c:	e04c      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6818      	ldr	r0, [r3, #0]
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6899      	ldr	r1, [r3, #8]
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	685a      	ldr	r2, [r3, #4]
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f000 fbd9 	bl	8004554 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	689a      	ldr	r2, [r3, #8]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003db0:	609a      	str	r2, [r3, #8]
      break;
 8003db2:	e039      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6818      	ldr	r0, [r3, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	6859      	ldr	r1, [r3, #4]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f000 fb4d 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	2150      	movs	r1, #80	; 0x50
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fba6 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003dd2:	e029      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	6818      	ldr	r0, [r3, #0]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	6859      	ldr	r1, [r3, #4]
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	68db      	ldr	r3, [r3, #12]
 8003de0:	461a      	mov	r2, r3
 8003de2:	f000 fb6c 	bl	80044be <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	2160      	movs	r1, #96	; 0x60
 8003dec:	4618      	mov	r0, r3
 8003dee:	f000 fb96 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003df2:	e019      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6818      	ldr	r0, [r3, #0]
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	6859      	ldr	r1, [r3, #4]
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 fb2d 	bl	8004460 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2140      	movs	r1, #64	; 0x40
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f000 fb86 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003e12:	e009      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f000 fb7d 	bl	800451e <TIM_ITRx_SetConfig>
      break;
 8003e24:	e000      	b.n	8003e28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003e26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2201      	movs	r2, #1
 8003e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e38:	2300      	movs	r3, #0
}
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <HAL_TIM_OC_DelayElapsedCallback>:
=======
 8003c2c:	e078      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c2e:	2b20      	cmp	r3, #32
 8003c30:	d06c      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0x140>
 8003c32:	2b30      	cmp	r3, #48	; 0x30
 8003c34:	d06a      	beq.n	8003d0c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003c36:	e073      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c38:	2b70      	cmp	r3, #112	; 0x70
 8003c3a:	d00d      	beq.n	8003c58 <HAL_TIM_ConfigClockSource+0x8c>
 8003c3c:	2b70      	cmp	r3, #112	; 0x70
 8003c3e:	d804      	bhi.n	8003c4a <HAL_TIM_ConfigClockSource+0x7e>
 8003c40:	2b50      	cmp	r3, #80	; 0x50
 8003c42:	d033      	beq.n	8003cac <HAL_TIM_ConfigClockSource+0xe0>
 8003c44:	2b60      	cmp	r3, #96	; 0x60
 8003c46:	d041      	beq.n	8003ccc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003c48:	e06a      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003c4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c4e:	d066      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0x152>
 8003c50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c54:	d017      	beq.n	8003c86 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003c56:	e063      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6818      	ldr	r0, [r3, #0]
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	6899      	ldr	r1, [r3, #8]
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685a      	ldr	r2, [r3, #4]
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	f000 fbf0 	bl	800444c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c7a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	68fa      	ldr	r2, [r7, #12]
 8003c82:	609a      	str	r2, [r3, #8]
      break;
 8003c84:	e04c      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6818      	ldr	r0, [r3, #0]
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	6899      	ldr	r1, [r3, #8]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	685a      	ldr	r2, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f000 fbd9 	bl	800444c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ca8:	609a      	str	r2, [r3, #8]
      break;
 8003caa:	e039      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6818      	ldr	r0, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	6859      	ldr	r1, [r3, #4]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	68db      	ldr	r3, [r3, #12]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f000 fb4d 	bl	8004358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2150      	movs	r1, #80	; 0x50
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f000 fba6 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003cca:	e029      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6818      	ldr	r0, [r3, #0]
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	6859      	ldr	r1, [r3, #4]
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	461a      	mov	r2, r3
 8003cda:	f000 fb6c 	bl	80043b6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2160      	movs	r1, #96	; 0x60
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb96 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003cea:	e019      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6818      	ldr	r0, [r3, #0]
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	6859      	ldr	r1, [r3, #4]
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	f000 fb2d 	bl	8004358 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2140      	movs	r1, #64	; 0x40
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fb86 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d0a:	e009      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fb7d 	bl	8004416 <TIM_ITRx_SetConfig>
      break;
 8003d1c:	e000      	b.n	8003d20 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8003d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}

08003d3a <HAL_TIM_OC_DelayElapsedCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
=======
 8003d3a:	b480      	push	{r7}
 8003d3c:	b083      	sub	sp, #12
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003e4a:	bf00      	nop
 8003e4c:	370c      	adds	r7, #12
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <HAL_TIM_IC_CaptureCallback>:
=======
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <HAL_TIM_IC_CaptureCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003e56:	b480      	push	{r7}
 8003e58:	b083      	sub	sp, #12
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	6078      	str	r0, [r7, #4]
=======
 8003d4e:	b480      	push	{r7}
 8003d50:	b083      	sub	sp, #12
 8003d52:	af00      	add	r7, sp, #0
 8003d54:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <HAL_TIM_PWM_PulseFinishedCallback>:
=======
 8003d56:	bf00      	nop
 8003d58:	370c      	adds	r7, #12
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d60:	4770      	bx	lr

08003d62 <HAL_TIM_PWM_PulseFinishedCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003e6a:	b480      	push	{r7}
 8003e6c:	b083      	sub	sp, #12
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
=======
 8003d62:	b480      	push	{r7}
 8003d64:	b083      	sub	sp, #12
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003e72:	bf00      	nop
 8003e74:	370c      	adds	r7, #12
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
=======
 8003d6a:	bf00      	nop
 8003d6c:	370c      	adds	r7, #12
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr

08003d76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003e7e:	b480      	push	{r7}
 8003e80:	b083      	sub	sp, #12
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
=======
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003e86:	bf00      	nop
 8003e88:	370c      	adds	r7, #12
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e90:	4770      	bx	lr

08003e92 <HAL_TIM_TriggerCallback>:
=======
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr

08003d8a <HAL_TIM_TriggerCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003e92:	b480      	push	{r7}
 8003e94:	b083      	sub	sp, #12
 8003e96:	af00      	add	r7, sp, #0
 8003e98:	6078      	str	r0, [r7, #4]
=======
 8003d8a:	b480      	push	{r7}
 8003d8c:	b083      	sub	sp, #12
 8003d8e:	af00      	add	r7, sp, #0
 8003d90:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003e9a:	bf00      	nop
 8003e9c:	370c      	adds	r7, #12
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea4:	4770      	bx	lr

08003ea6 <HAL_TIM_ErrorCallback>:
=======
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr

08003d9e <HAL_TIM_ErrorCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 8003ea6:	b480      	push	{r7}
 8003ea8:	b083      	sub	sp, #12
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
=======
 8003d9e:	b480      	push	{r7}
 8003da0:	b083      	sub	sp, #12
 8003da2:	af00      	add	r7, sp, #0
 8003da4:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 8003eae:	bf00      	nop
 8003eb0:	370c      	adds	r7, #12
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <TIM_DMAError>:
=======
 8003da6:	bf00      	nop
 8003da8:	370c      	adds	r7, #12
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr

08003db2 <TIM_DMAError>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b084      	sub	sp, #16
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2201      	movs	r2, #1
 8003ecc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
=======
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dbe:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
<<<<<<< HEAD
 8003ed0:	68f8      	ldr	r0, [r7, #12]
 8003ed2:	f7ff ffe8 	bl	8003ea6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003ed6:	bf00      	nop
 8003ed8:	3710      	adds	r7, #16
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <TIM_DMADelayPulseCplt>:
=======
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7ff ffe8 	bl	8003d9e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8003dce:	bf00      	nop
 8003dd0:	3710      	adds	r7, #16
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <TIM_DMADelayPulseCplt>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003ede:	b580      	push	{r7, lr}
 8003ee0:	b084      	sub	sp, #16
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eea:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	687a      	ldr	r2, [r7, #4]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d103      	bne.n	8003f06 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2201      	movs	r2, #1
 8003f02:	771a      	strb	r2, [r3, #28]
 8003f04:	e019      	b.n	8003f3a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d103      	bne.n	8003f18 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2202      	movs	r2, #2
 8003f14:	771a      	strb	r2, [r3, #28]
 8003f16:	e010      	b.n	8003f3a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f1c:	687a      	ldr	r2, [r7, #4]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d103      	bne.n	8003f2a <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2204      	movs	r2, #4
 8003f26:	771a      	strb	r2, [r3, #28]
 8003f28:	e007      	b.n	8003f3a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d102      	bne.n	8003f3a <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2208      	movs	r2, #8
 8003f38:	771a      	strb	r2, [r3, #28]
=======
 8003dd6:	b580      	push	{r7, lr}
 8003dd8:	b084      	sub	sp, #16
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de2:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	429a      	cmp	r2, r3
 8003df4:	d103      	bne.n	8003dfe <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2201      	movs	r2, #1
 8003dfa:	771a      	strb	r2, [r3, #28]
 8003dfc:	e019      	b.n	8003e32 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d103      	bne.n	8003e10 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	771a      	strb	r2, [r3, #28]
 8003e0e:	e010      	b.n	8003e32 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d103      	bne.n	8003e22 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	771a      	strb	r2, [r3, #28]
 8003e20:	e007      	b.n	8003e32 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d102      	bne.n	8003e32 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2208      	movs	r2, #8
 8003e30:	771a      	strb	r2, [r3, #28]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
<<<<<<< HEAD
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f7ff ff95 	bl	8003e6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	2200      	movs	r2, #0
 8003f44:	771a      	strb	r2, [r3, #28]
}
 8003f46:	bf00      	nop
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <TIM_DMADelayPulseHalfCplt>:
=======
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f7ff ff95 	bl	8003d62 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	771a      	strb	r2, [r3, #28]
}
 8003e3e:	bf00      	nop
 8003e40:	3710      	adds	r7, #16
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}

08003e46 <TIM_DMADelayPulseHalfCplt>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
<<<<<<< HEAD
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b084      	sub	sp, #16
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f5a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d103      	bne.n	8003f76 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	771a      	strb	r2, [r3, #28]
 8003f74:	e019      	b.n	8003faa <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f7a:	687a      	ldr	r2, [r7, #4]
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d103      	bne.n	8003f88 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2202      	movs	r2, #2
 8003f84:	771a      	strb	r2, [r3, #28]
 8003f86:	e010      	b.n	8003faa <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d103      	bne.n	8003f9a <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	2204      	movs	r2, #4
 8003f96:	771a      	strb	r2, [r3, #28]
 8003f98:	e007      	b.n	8003faa <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f9e:	687a      	ldr	r2, [r7, #4]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d102      	bne.n	8003faa <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2208      	movs	r2, #8
 8003fa8:	771a      	strb	r2, [r3, #28]
=======
 8003e46:	b580      	push	{r7, lr}
 8003e48:	b084      	sub	sp, #16
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e52:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d103      	bne.n	8003e6e <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	771a      	strb	r2, [r3, #28]
 8003e6c:	e019      	b.n	8003ea2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d103      	bne.n	8003e80 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2202      	movs	r2, #2
 8003e7c:	771a      	strb	r2, [r3, #28]
 8003e7e:	e010      	b.n	8003ea2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e84:	687a      	ldr	r2, [r7, #4]
 8003e86:	429a      	cmp	r2, r3
 8003e88:	d103      	bne.n	8003e92 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	771a      	strb	r2, [r3, #28]
 8003e90:	e007      	b.n	8003ea2 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d102      	bne.n	8003ea2 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2208      	movs	r2, #8
 8003ea0:	771a      	strb	r2, [r3, #28]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
<<<<<<< HEAD
 8003faa:	68f8      	ldr	r0, [r7, #12]
 8003fac:	f7ff ff67 	bl	8003e7e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	771a      	strb	r2, [r3, #28]
}
 8003fb6:	bf00      	nop
 8003fb8:	3710      	adds	r7, #16
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}
	...

08003fc0 <TIM_Base_SetConfig>:
=======
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f7ff ff67 	bl	8003d76 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	771a      	strb	r2, [r3, #28]
}
 8003eae:	bf00      	nop
 8003eb0:	3710      	adds	r7, #16
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}
	...

08003eb8 <TIM_Base_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
<<<<<<< HEAD
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a40      	ldr	r2, [pc, #256]	; (80040d4 <TIM_Base_SetConfig+0x114>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d00f      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a3d      	ldr	r2, [pc, #244]	; (80040d8 <TIM_Base_SetConfig+0x118>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3c      	ldr	r2, [pc, #240]	; (80040dc <TIM_Base_SetConfig+0x11c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3b      	ldr	r2, [pc, #236]	; (80040e0 <TIM_Base_SetConfig+0x120>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3a      	ldr	r2, [pc, #232]	; (80040e4 <TIM_Base_SetConfig+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d108      	bne.n	8004012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a2f      	ldr	r2, [pc, #188]	; (80040d4 <TIM_Base_SetConfig+0x114>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004020:	d027      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2c      	ldr	r2, [pc, #176]	; (80040d8 <TIM_Base_SetConfig+0x118>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d023      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2b      	ldr	r2, [pc, #172]	; (80040dc <TIM_Base_SetConfig+0x11c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2a      	ldr	r2, [pc, #168]	; (80040e0 <TIM_Base_SetConfig+0x120>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a29      	ldr	r2, [pc, #164]	; (80040e4 <TIM_Base_SetConfig+0x124>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d017      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a28      	ldr	r2, [pc, #160]	; (80040e8 <TIM_Base_SetConfig+0x128>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a27      	ldr	r2, [pc, #156]	; (80040ec <TIM_Base_SetConfig+0x12c>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a26      	ldr	r2, [pc, #152]	; (80040f0 <TIM_Base_SetConfig+0x130>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <TIM_Base_SetConfig+0x134>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <TIM_Base_SetConfig+0x138>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a23      	ldr	r2, [pc, #140]	; (80040fc <TIM_Base_SetConfig+0x13c>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
=======
 8003eb8:	b480      	push	{r7}
 8003eba:	b085      	sub	sp, #20
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	4a40      	ldr	r2, [pc, #256]	; (8003fcc <TIM_Base_SetConfig+0x114>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d013      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed6:	d00f      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a3d      	ldr	r2, [pc, #244]	; (8003fd0 <TIM_Base_SetConfig+0x118>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d00b      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	4a3c      	ldr	r2, [pc, #240]	; (8003fd4 <TIM_Base_SetConfig+0x11c>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d007      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	4a3b      	ldr	r2, [pc, #236]	; (8003fd8 <TIM_Base_SetConfig+0x120>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d003      	beq.n	8003ef8 <TIM_Base_SetConfig+0x40>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a3a      	ldr	r2, [pc, #232]	; (8003fdc <TIM_Base_SetConfig+0x124>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d108      	bne.n	8003f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	68fa      	ldr	r2, [r7, #12]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a2f      	ldr	r2, [pc, #188]	; (8003fcc <TIM_Base_SetConfig+0x114>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d02b      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f18:	d027      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4a2c      	ldr	r2, [pc, #176]	; (8003fd0 <TIM_Base_SetConfig+0x118>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d023      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	4a2b      	ldr	r2, [pc, #172]	; (8003fd4 <TIM_Base_SetConfig+0x11c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d01f      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	4a2a      	ldr	r2, [pc, #168]	; (8003fd8 <TIM_Base_SetConfig+0x120>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d01b      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	4a29      	ldr	r2, [pc, #164]	; (8003fdc <TIM_Base_SetConfig+0x124>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d017      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	4a28      	ldr	r2, [pc, #160]	; (8003fe0 <TIM_Base_SetConfig+0x128>)
 8003f3e:	4293      	cmp	r3, r2
 8003f40:	d013      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <TIM_Base_SetConfig+0x12c>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d00f      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a26      	ldr	r2, [pc, #152]	; (8003fe8 <TIM_Base_SetConfig+0x130>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d00b      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a25      	ldr	r2, [pc, #148]	; (8003fec <TIM_Base_SetConfig+0x134>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d007      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	4a24      	ldr	r2, [pc, #144]	; (8003ff0 <TIM_Base_SetConfig+0x138>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d003      	beq.n	8003f6a <TIM_Base_SetConfig+0xb2>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	4a23      	ldr	r2, [pc, #140]	; (8003ff4 <TIM_Base_SetConfig+0x13c>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d108      	bne.n	8003f7c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	4313      	orrs	r3, r2
 8003f7a:	60fb      	str	r3, [r7, #12]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
<<<<<<< HEAD
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	689a      	ldr	r2, [r3, #8]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	4a0a      	ldr	r2, [pc, #40]	; (80040d4 <TIM_Base_SetConfig+0x114>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d003      	beq.n	80040b8 <TIM_Base_SetConfig+0xf8>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	4a0c      	ldr	r2, [pc, #48]	; (80040e4 <TIM_Base_SetConfig+0x124>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d103      	bne.n	80040c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	691a      	ldr	r2, [r3, #16]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	631a      	str	r2, [r3, #48]	; 0x30
=======
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	695b      	ldr	r3, [r3, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	68fa      	ldr	r2, [r7, #12]
 8003f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	689a      	ldr	r2, [r3, #8]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	4a0a      	ldr	r2, [pc, #40]	; (8003fcc <TIM_Base_SetConfig+0x114>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d003      	beq.n	8003fb0 <TIM_Base_SetConfig+0xf8>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a0c      	ldr	r2, [pc, #48]	; (8003fdc <TIM_Base_SetConfig+0x124>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d103      	bne.n	8003fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	691a      	ldr	r2, [r3, #16]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	631a      	str	r2, [r3, #48]	; 0x30
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
<<<<<<< HEAD
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	615a      	str	r2, [r3, #20]
}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800
 80040e0:	40000c00 	.word	0x40000c00
 80040e4:	40010400 	.word	0x40010400
 80040e8:	40014000 	.word	0x40014000
 80040ec:	40014400 	.word	0x40014400
 80040f0:	40014800 	.word	0x40014800
 80040f4:	40001800 	.word	0x40001800
 80040f8:	40001c00 	.word	0x40001c00
 80040fc:	40002000 	.word	0x40002000

08004100 <TIM_OC1_SetConfig>:
=======
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	615a      	str	r2, [r3, #20]
}
 8003fbe:	bf00      	nop
 8003fc0:	3714      	adds	r7, #20
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	40010000 	.word	0x40010000
 8003fd0:	40000400 	.word	0x40000400
 8003fd4:	40000800 	.word	0x40000800
 8003fd8:	40000c00 	.word	0x40000c00
 8003fdc:	40010400 	.word	0x40010400
 8003fe0:	40014000 	.word	0x40014000
 8003fe4:	40014400 	.word	0x40014400
 8003fe8:	40014800 	.word	0x40014800
 8003fec:	40001800 	.word	0x40001800
 8003ff0:	40001c00 	.word	0x40001c00
 8003ff4:	40002000 	.word	0x40002000

08003ff8 <TIM_OC1_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
 8004108:	6039      	str	r1, [r7, #0]
=======
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
<<<<<<< HEAD
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	f023 0201 	bic.w	r2, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800412e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 0303 	bic.w	r3, r3, #3
 8004136:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	4313      	orrs	r3, r2
 8004140:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	f023 0302 	bic.w	r3, r3, #2
 8004148:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	4a20      	ldr	r2, [pc, #128]	; (80041d8 <TIM_OC1_SetConfig+0xd8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d003      	beq.n	8004164 <TIM_OC1_SetConfig+0x64>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a1f      	ldr	r2, [pc, #124]	; (80041dc <TIM_OC1_SetConfig+0xdc>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d10c      	bne.n	800417e <TIM_OC1_SetConfig+0x7e>
=======
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a1b      	ldr	r3, [r3, #32]
 8004006:	f023 0201 	bic.w	r2, r3, #1
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a1b      	ldr	r3, [r3, #32]
 8004012:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	699b      	ldr	r3, [r3, #24]
 800401e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004026:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0303 	bic.w	r3, r3, #3
 800402e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	4313      	orrs	r3, r2
 8004038:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	f023 0302 	bic.w	r3, r3, #2
 8004040:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a20      	ldr	r2, [pc, #128]	; (80040d0 <TIM_OC1_SetConfig+0xd8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d003      	beq.n	800405c <TIM_OC1_SetConfig+0x64>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a1f      	ldr	r2, [pc, #124]	; (80040d4 <TIM_OC1_SetConfig+0xdc>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d10c      	bne.n	8004076 <TIM_OC1_SetConfig+0x7e>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
<<<<<<< HEAD
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	f023 0308 	bic.w	r3, r3, #8
 800416a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	4313      	orrs	r3, r2
 8004174:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 0304 	bic.w	r3, r3, #4
 800417c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a15      	ldr	r2, [pc, #84]	; (80041d8 <TIM_OC1_SetConfig+0xd8>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d003      	beq.n	800418e <TIM_OC1_SetConfig+0x8e>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a14      	ldr	r2, [pc, #80]	; (80041dc <TIM_OC1_SetConfig+0xdc>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d111      	bne.n	80041b2 <TIM_OC1_SetConfig+0xb2>
=======
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f023 0308 	bic.w	r3, r3, #8
 8004062:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800406e:	697b      	ldr	r3, [r7, #20]
 8004070:	f023 0304 	bic.w	r3, r3, #4
 8004074:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a15      	ldr	r2, [pc, #84]	; (80040d0 <TIM_OC1_SetConfig+0xd8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d003      	beq.n	8004086 <TIM_OC1_SetConfig+0x8e>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <TIM_OC1_SetConfig+0xdc>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d111      	bne.n	80040aa <TIM_OC1_SetConfig+0xb2>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
<<<<<<< HEAD
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004194:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800419c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	695b      	ldr	r3, [r3, #20]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	4313      	orrs	r3, r2
 80041a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041a8:	683b      	ldr	r3, [r7, #0]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
=======
 8004086:	693b      	ldr	r3, [r7, #16]
 8004088:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800408c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004094:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	693a      	ldr	r2, [r7, #16]
 800409c:	4313      	orrs	r3, r2
 800409e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	693a      	ldr	r2, [r7, #16]
 80040a6:	4313      	orrs	r3, r2
 80040a8:	613b      	str	r3, [r7, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40010400 	.word	0x40010400

080041e0 <TIM_OC2_SetConfig>:
=======
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	693a      	ldr	r2, [r7, #16]
 80040ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	685a      	ldr	r2, [r3, #4]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	621a      	str	r2, [r3, #32]
}
 80040c4:	bf00      	nop
 80040c6:	371c      	adds	r7, #28
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr
 80040d0:	40010000 	.word	0x40010000
 80040d4:	40010400 	.word	0x40010400

080040d8 <TIM_OC2_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80041e0:	b480      	push	{r7}
 80041e2:	b087      	sub	sp, #28
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
=======
 80040d8:	b480      	push	{r7}
 80040da:	b087      	sub	sp, #28
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	f023 0210 	bic.w	r2, r3, #16
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	685b      	ldr	r3, [r3, #4]
 8004200:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800420e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	021b      	lsls	r3, r3, #8
 800421e:	68fa      	ldr	r2, [r7, #12]
 8004220:	4313      	orrs	r3, r2
 8004222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	f023 0320 	bic.w	r3, r3, #32
 800422a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	4a22      	ldr	r2, [pc, #136]	; (80042c4 <TIM_OC2_SetConfig+0xe4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d003      	beq.n	8004248 <TIM_OC2_SetConfig+0x68>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a21      	ldr	r2, [pc, #132]	; (80042c8 <TIM_OC2_SetConfig+0xe8>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10d      	bne.n	8004264 <TIM_OC2_SetConfig+0x84>
=======
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a1b      	ldr	r3, [r3, #32]
 80040e6:	f023 0210 	bic.w	r2, r3, #16
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6a1b      	ldr	r3, [r3, #32]
 80040f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685b      	ldr	r3, [r3, #4]
 80040f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004106:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	021b      	lsls	r3, r3, #8
 8004116:	68fa      	ldr	r2, [r7, #12]
 8004118:	4313      	orrs	r3, r2
 800411a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	f023 0320 	bic.w	r3, r3, #32
 8004122:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	697a      	ldr	r2, [r7, #20]
 800412c:	4313      	orrs	r3, r2
 800412e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4a22      	ldr	r2, [pc, #136]	; (80041bc <TIM_OC2_SetConfig+0xe4>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d003      	beq.n	8004140 <TIM_OC2_SetConfig+0x68>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a21      	ldr	r2, [pc, #132]	; (80041c0 <TIM_OC2_SetConfig+0xe8>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10d      	bne.n	800415c <TIM_OC2_SetConfig+0x84>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
<<<<<<< HEAD
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800424e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004262:	617b      	str	r3, [r7, #20]
=======
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415a:	617b      	str	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
<<<<<<< HEAD
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a17      	ldr	r2, [pc, #92]	; (80042c4 <TIM_OC2_SetConfig+0xe4>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d003      	beq.n	8004274 <TIM_OC2_SetConfig+0x94>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a16      	ldr	r2, [pc, #88]	; (80042c8 <TIM_OC2_SetConfig+0xe8>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d113      	bne.n	800429c <TIM_OC2_SetConfig+0xbc>
=======
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a17      	ldr	r2, [pc, #92]	; (80041bc <TIM_OC2_SetConfig+0xe4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d003      	beq.n	800416c <TIM_OC2_SetConfig+0x94>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a16      	ldr	r2, [pc, #88]	; (80041c0 <TIM_OC2_SetConfig+0xe8>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d113      	bne.n	8004194 <TIM_OC2_SetConfig+0xbc>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
<<<<<<< HEAD
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800427a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004282:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	695b      	ldr	r3, [r3, #20]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	693a      	ldr	r2, [r7, #16]
 800428c:	4313      	orrs	r3, r2
 800428e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004290:	683b      	ldr	r3, [r7, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	4313      	orrs	r3, r2
 800429a:	613b      	str	r3, [r7, #16]
=======
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004172:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800417a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	695b      	ldr	r3, [r3, #20]
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	4313      	orrs	r3, r2
 8004186:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	4313      	orrs	r3, r2
 8004192:	613b      	str	r3, [r7, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	693a      	ldr	r2, [r7, #16]
 80042a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	68fa      	ldr	r2, [r7, #12]
 80042a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
 80042c2:	bf00      	nop
 80042c4:	40010000 	.word	0x40010000
 80042c8:	40010400 	.word	0x40010400

080042cc <TIM_OC3_SetConfig>:
=======
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	693a      	ldr	r2, [r7, #16]
 8004198:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685a      	ldr	r2, [r3, #4]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	621a      	str	r2, [r3, #32]
}
 80041ae:	bf00      	nop
 80041b0:	371c      	adds	r7, #28
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	40010000 	.word	0x40010000
 80041c0:	40010400 	.word	0x40010400

080041c4 <TIM_OC3_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80042cc:	b480      	push	{r7}
 80042ce:	b087      	sub	sp, #28
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
=======
 80041c4:	b480      	push	{r7}
 80041c6:	b087      	sub	sp, #28
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
<<<<<<< HEAD
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6a1b      	ldr	r3, [r3, #32]
 80042da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6a1b      	ldr	r3, [r3, #32]
 80042e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	69db      	ldr	r3, [r3, #28]
 80042f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	f023 0303 	bic.w	r3, r3, #3
 8004302:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	4313      	orrs	r3, r2
 800430c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004314:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	021b      	lsls	r3, r3, #8
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	4313      	orrs	r3, r2
 8004320:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	4a21      	ldr	r2, [pc, #132]	; (80043ac <TIM_OC3_SetConfig+0xe0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d003      	beq.n	8004332 <TIM_OC3_SetConfig+0x66>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	4a20      	ldr	r2, [pc, #128]	; (80043b0 <TIM_OC3_SetConfig+0xe4>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d10d      	bne.n	800434e <TIM_OC3_SetConfig+0x82>
=======
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f023 0303 	bic.w	r3, r3, #3
 80041fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	68fa      	ldr	r2, [r7, #12]
 8004202:	4313      	orrs	r3, r2
 8004204:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800420c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	021b      	lsls	r3, r3, #8
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a21      	ldr	r2, [pc, #132]	; (80042a4 <TIM_OC3_SetConfig+0xe0>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d003      	beq.n	800422a <TIM_OC3_SetConfig+0x66>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a20      	ldr	r2, [pc, #128]	; (80042a8 <TIM_OC3_SetConfig+0xe4>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d10d      	bne.n	8004246 <TIM_OC3_SetConfig+0x82>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
<<<<<<< HEAD
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800433a:	683b      	ldr	r3, [r7, #0]
 800433c:	68db      	ldr	r3, [r3, #12]
 800433e:	021b      	lsls	r3, r3, #8
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	4313      	orrs	r3, r2
 8004344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800434c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4a16      	ldr	r2, [pc, #88]	; (80043ac <TIM_OC3_SetConfig+0xe0>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d003      	beq.n	800435e <TIM_OC3_SetConfig+0x92>
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	4a15      	ldr	r2, [pc, #84]	; (80043b0 <TIM_OC3_SetConfig+0xe4>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d113      	bne.n	8004386 <TIM_OC3_SetConfig+0xba>
=======
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004230:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	021b      	lsls	r3, r3, #8
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	4313      	orrs	r3, r2
 800423c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004244:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a16      	ldr	r2, [pc, #88]	; (80042a4 <TIM_OC3_SetConfig+0xe0>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d003      	beq.n	8004256 <TIM_OC3_SetConfig+0x92>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a15      	ldr	r2, [pc, #84]	; (80042a8 <TIM_OC3_SetConfig+0xe4>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d113      	bne.n	800427e <TIM_OC3_SetConfig+0xba>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
<<<<<<< HEAD
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004364:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800436c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	695b      	ldr	r3, [r3, #20]
 8004372:	011b      	lsls	r3, r3, #4
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	4313      	orrs	r3, r2
 8004378:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	011b      	lsls	r3, r3, #4
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	4313      	orrs	r3, r2
 8004384:	613b      	str	r3, [r7, #16]
=======
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800425c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004264:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	011b      	lsls	r3, r3, #4
 800426c:	693a      	ldr	r2, [r7, #16]
 800426e:	4313      	orrs	r3, r2
 8004270:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004272:	683b      	ldr	r3, [r7, #0]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	011b      	lsls	r3, r3, #4
 8004278:	693a      	ldr	r2, [r7, #16]
 800427a:	4313      	orrs	r3, r2
 800427c:	613b      	str	r3, [r7, #16]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685a      	ldr	r2, [r3, #4]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	621a      	str	r2, [r3, #32]
}
 80043a0:	bf00      	nop
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40010400 	.word	0x40010400

080043b4 <TIM_OC4_SetConfig>:
=======
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	693a      	ldr	r2, [r7, #16]
 8004282:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	685a      	ldr	r2, [r3, #4]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	697a      	ldr	r2, [r7, #20]
 8004296:	621a      	str	r2, [r3, #32]
}
 8004298:	bf00      	nop
 800429a:	371c      	adds	r7, #28
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	40010000 	.word	0x40010000
 80042a8:	40010400 	.word	0x40010400

080042ac <TIM_OC4_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
<<<<<<< HEAD
 80043b4:	b480      	push	{r7}
 80043b6:	b087      	sub	sp, #28
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
=======
 80042ac:	b480      	push	{r7}
 80042ae:	b087      	sub	sp, #28
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
<<<<<<< HEAD
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	021b      	lsls	r3, r3, #8
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	4313      	orrs	r3, r2
 80043f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80043fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	031b      	lsls	r3, r3, #12
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	4313      	orrs	r3, r2
 800440a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	4a12      	ldr	r2, [pc, #72]	; (8004458 <TIM_OC4_SetConfig+0xa4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d003      	beq.n	800441c <TIM_OC4_SetConfig+0x68>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	4a11      	ldr	r2, [pc, #68]	; (800445c <TIM_OC4_SetConfig+0xa8>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d109      	bne.n	8004430 <TIM_OC4_SetConfig+0x7c>
=======
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	021b      	lsls	r3, r3, #8
 80042ea:	68fa      	ldr	r2, [r7, #12]
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	689b      	ldr	r3, [r3, #8]
 80042fc:	031b      	lsls	r3, r3, #12
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	4313      	orrs	r3, r2
 8004302:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	4a12      	ldr	r2, [pc, #72]	; (8004350 <TIM_OC4_SetConfig+0xa4>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d003      	beq.n	8004314 <TIM_OC4_SetConfig+0x68>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	4a11      	ldr	r2, [pc, #68]	; (8004354 <TIM_OC4_SetConfig+0xa8>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d109      	bne.n	8004328 <TIM_OC4_SetConfig+0x7c>
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
<<<<<<< HEAD
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004422:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695b      	ldr	r3, [r3, #20]
 8004428:	019b      	lsls	r3, r3, #6
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	4313      	orrs	r3, r2
 800442e:	617b      	str	r3, [r7, #20]
=======
 8004314:	697b      	ldr	r3, [r7, #20]
 8004316:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800431a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	695b      	ldr	r3, [r3, #20]
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	4313      	orrs	r3, r2
 8004326:	617b      	str	r3, [r7, #20]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
<<<<<<< HEAD
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	68fa      	ldr	r2, [r7, #12]
 800443a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	693a      	ldr	r2, [r7, #16]
 8004448:	621a      	str	r2, [r3, #32]
}
 800444a:	bf00      	nop
 800444c:	371c      	adds	r7, #28
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40010400 	.word	0x40010400

08004460 <TIM_TI1_ConfigInputStage>:
=======
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	697a      	ldr	r2, [r7, #20]
 800432c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	685a      	ldr	r2, [r3, #4]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	693a      	ldr	r2, [r7, #16]
 8004340:	621a      	str	r2, [r3, #32]
}
 8004342:	bf00      	nop
 8004344:	371c      	adds	r7, #28
 8004346:	46bd      	mov	sp, r7
 8004348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40010000 	.word	0x40010000
 8004354:	40010400 	.word	0x40010400

08004358 <TIM_TI1_ConfigInputStage>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]
=======
 8004358:	b480      	push	{r7}
 800435a:	b087      	sub	sp, #28
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	607a      	str	r2, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
<<<<<<< HEAD
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a1b      	ldr	r3, [r3, #32]
 8004470:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	6a1b      	ldr	r3, [r3, #32]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	699b      	ldr	r3, [r3, #24]
 8004482:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004484:	693b      	ldr	r3, [r7, #16]
 8004486:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800448a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	693a      	ldr	r2, [r7, #16]
 8004492:	4313      	orrs	r3, r2
 8004494:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	f023 030a 	bic.w	r3, r3, #10
 800449c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	693a      	ldr	r2, [r7, #16]
 80044aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	697a      	ldr	r2, [r7, #20]
 80044b0:	621a      	str	r2, [r3, #32]
}
 80044b2:	bf00      	nop
 80044b4:	371c      	adds	r7, #28
 80044b6:	46bd      	mov	sp, r7
 80044b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044bc:	4770      	bx	lr

080044be <TIM_TI2_ConfigInputStage>:
=======
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f023 0201 	bic.w	r2, r3, #1
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004382:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	f023 030a 	bic.w	r3, r3, #10
 8004394:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <TIM_TI2_ConfigInputStage>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
<<<<<<< HEAD
 80044be:	b480      	push	{r7}
 80044c0:	b087      	sub	sp, #28
 80044c2:	af00      	add	r7, sp, #0
 80044c4:	60f8      	str	r0, [r7, #12]
 80044c6:	60b9      	str	r1, [r7, #8]
 80044c8:	607a      	str	r2, [r7, #4]
=======
 80043b6:	b480      	push	{r7}
 80043b8:	b087      	sub	sp, #28
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	60f8      	str	r0, [r7, #12]
 80043be:	60b9      	str	r1, [r7, #8]
 80043c0:	607a      	str	r2, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
<<<<<<< HEAD
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	f023 0210 	bic.w	r2, r3, #16
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	699b      	ldr	r3, [r3, #24]
 80044da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6a1b      	ldr	r3, [r3, #32]
 80044e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80044e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	031b      	lsls	r3, r3, #12
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80044fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	011b      	lsls	r3, r3, #4
 8004500:	693a      	ldr	r2, [r7, #16]
 8004502:	4313      	orrs	r3, r2
 8004504:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	697a      	ldr	r2, [r7, #20]
 800450a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	693a      	ldr	r2, [r7, #16]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <TIM_ITRx_SetConfig>:
=======
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0210 	bic.w	r2, r3, #16
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a1b      	ldr	r3, [r3, #32]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	031b      	lsls	r3, r3, #12
 80043e6:	697a      	ldr	r2, [r7, #20]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	011b      	lsls	r3, r3, #4
 80043f8:	693a      	ldr	r2, [r7, #16]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	697a      	ldr	r2, [r7, #20]
 8004402:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	693a      	ldr	r2, [r7, #16]
 8004408:	621a      	str	r2, [r3, #32]
}
 800440a:	bf00      	nop
 800440c:	371c      	adds	r7, #28
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <TIM_ITRx_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
<<<<<<< HEAD
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]
=======
 8004416:	b480      	push	{r7}
 8004418:	b085      	sub	sp, #20
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
<<<<<<< HEAD
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	4313      	orrs	r3, r2
 800453c:	f043 0307 	orr.w	r3, r3, #7
 8004540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	68fa      	ldr	r2, [r7, #12]
 8004546:	609a      	str	r2, [r3, #8]
}
 8004548:	bf00      	nop
 800454a:	3714      	adds	r7, #20
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <TIM_ETR_SetConfig>:
=======
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4313      	orrs	r3, r2
 8004434:	f043 0307 	orr.w	r3, r3, #7
 8004438:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68fa      	ldr	r2, [r7, #12]
 800443e:	609a      	str	r2, [r3, #8]
}
 8004440:	bf00      	nop
 8004442:	3714      	adds	r7, #20
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr

0800444c <TIM_ETR_SetConfig>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
<<<<<<< HEAD
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	60f8      	str	r0, [r7, #12]
 800455c:	60b9      	str	r1, [r7, #8]
 800455e:	607a      	str	r2, [r7, #4]
 8004560:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800456e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	021a      	lsls	r2, r3, #8
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	431a      	orrs	r2, r3
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	4313      	orrs	r3, r2
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	609a      	str	r2, [r3, #8]
}
 8004588:	bf00      	nop
 800458a:	371c      	adds	r7, #28
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <TIM_CCxChannelCmd>:
=======
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
 8004458:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	689b      	ldr	r3, [r3, #8]
 800445e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004466:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	021a      	lsls	r2, r3, #8
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	431a      	orrs	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	4313      	orrs	r3, r2
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	4313      	orrs	r3, r2
 8004478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	609a      	str	r2, [r3, #8]
}
 8004480:	bf00      	nop
 8004482:	371c      	adds	r7, #28
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <TIM_CCxChannelCmd>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
<<<<<<< HEAD
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
=======
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	607a      	str	r2, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
<<<<<<< HEAD
 80045a0:	68bb      	ldr	r3, [r7, #8]
 80045a2:	f003 031f 	and.w	r3, r3, #31
 80045a6:	2201      	movs	r2, #1
 80045a8:	fa02 f303 	lsl.w	r3, r2, r3
 80045ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6a1a      	ldr	r2, [r3, #32]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	43db      	mvns	r3, r3
 80045b6:	401a      	ands	r2, r3
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	6a1a      	ldr	r2, [r3, #32]
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 031f 	and.w	r3, r3, #31
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	fa01 f303 	lsl.w	r3, r1, r3
 80045cc:	431a      	orrs	r2, r3
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	621a      	str	r2, [r3, #32]
}
 80045d2:	bf00      	nop
 80045d4:	371c      	adds	r7, #28
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_TIMEx_MasterConfigSynchronization>:
=======
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	f003 031f 	and.w	r3, r3, #31
 800449e:	2201      	movs	r2, #1
 80044a0:	fa02 f303 	lsl.w	r3, r2, r3
 80044a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	6a1a      	ldr	r2, [r3, #32]
 80044aa:	697b      	ldr	r3, [r7, #20]
 80044ac:	43db      	mvns	r3, r3
 80044ae:	401a      	ands	r2, r3
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	fa01 f303 	lsl.w	r3, r1, r3
 80044c4:	431a      	orrs	r2, r3
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	621a      	str	r2, [r3, #32]
}
 80044ca:	bf00      	nop
 80044cc:	371c      	adds	r7, #28
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
	...

080044d8 <HAL_TIMEx_MasterConfigSynchronization>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
<<<<<<< HEAD
 80045e0:	b480      	push	{r7}
 80045e2:	b085      	sub	sp, #20
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
=======
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
<<<<<<< HEAD
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d101      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045f4:	2302      	movs	r3, #2
 80045f6:	e05a      	b.n	80046ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2202      	movs	r2, #2
 8004604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	685b      	ldr	r3, [r3, #4]
 800460e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	68fa      	ldr	r2, [r7, #12]
 8004626:	4313      	orrs	r3, r2
 8004628:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a21      	ldr	r2, [pc, #132]	; (80046bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d022      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004644:	d01d      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a1d      	ldr	r2, [pc, #116]	; (80046c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d018      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a1b      	ldr	r2, [pc, #108]	; (80046c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d013      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a1a      	ldr	r2, [pc, #104]	; (80046c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d00e      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	; (80046cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d009      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a17      	ldr	r2, [pc, #92]	; (80046d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d004      	beq.n	8004682 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a15      	ldr	r2, [pc, #84]	; (80046d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d10c      	bne.n	800469c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004682:	68bb      	ldr	r3, [r7, #8]
 8004684:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	685b      	ldr	r3, [r3, #4]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	4313      	orrs	r3, r2
 8004692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
=======
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d101      	bne.n	80044f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044ec:	2302      	movs	r3, #2
 80044ee:	e05a      	b.n	80045a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2202      	movs	r2, #2
 80044fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004516:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	68fa      	ldr	r2, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a21      	ldr	r2, [pc, #132]	; (80045b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d022      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453c:	d01d      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d018      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d013      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a1a      	ldr	r2, [pc, #104]	; (80045c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d00e      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a18      	ldr	r2, [pc, #96]	; (80045c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d009      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a17      	ldr	r2, [pc, #92]	; (80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d004      	beq.n	800457a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	4a15      	ldr	r2, [pc, #84]	; (80045cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d10c      	bne.n	8004594 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004580:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	68ba      	ldr	r2, [r7, #8]
 8004588:	4313      	orrs	r3, r2
 800458a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	609a      	str	r2, [r3, #8]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
<<<<<<< HEAD
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80046ac:	2300      	movs	r3, #0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3714      	adds	r7, #20
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	40010000 	.word	0x40010000
 80046c0:	40000400 	.word	0x40000400
 80046c4:	40000800 	.word	0x40000800
 80046c8:	40000c00 	.word	0x40000c00
 80046cc:	40010400 	.word	0x40010400
 80046d0:	40014000 	.word	0x40014000
 80046d4:	40001800 	.word	0x40001800

080046d8 <HAL_TIMEx_CommutCallback>:
=======
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045a4:	2300      	movs	r3, #0
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3714      	adds	r7, #20
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
 80045b2:	bf00      	nop
 80045b4:	40010000 	.word	0x40010000
 80045b8:	40000400 	.word	0x40000400
 80045bc:	40000800 	.word	0x40000800
 80045c0:	40000c00 	.word	0x40000c00
 80045c4:	40010400 	.word	0x40010400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40001800 	.word	0x40001800

080045d0 <HAL_TIMEx_CommutCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80046d8:	b480      	push	{r7}
 80046da:	b083      	sub	sp, #12
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
=======
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80046e0:	bf00      	nop
 80046e2:	370c      	adds	r7, #12
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <HAL_TIMEx_BreakCallback>:
=======
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <HAL_TIMEx_BreakCallback>:
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
<<<<<<< HEAD
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
=======
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
<<<<<<< HEAD
 80046f4:	bf00      	nop
 80046f6:	370c      	adds	r7, #12
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <__libc_init_array>:
 8004700:	b570      	push	{r4, r5, r6, lr}
 8004702:	4e0d      	ldr	r6, [pc, #52]	; (8004738 <__libc_init_array+0x38>)
 8004704:	4c0d      	ldr	r4, [pc, #52]	; (800473c <__libc_init_array+0x3c>)
 8004706:	1ba4      	subs	r4, r4, r6
 8004708:	10a4      	asrs	r4, r4, #2
 800470a:	2500      	movs	r5, #0
 800470c:	42a5      	cmp	r5, r4
 800470e:	d109      	bne.n	8004724 <__libc_init_array+0x24>
 8004710:	4e0b      	ldr	r6, [pc, #44]	; (8004740 <__libc_init_array+0x40>)
 8004712:	4c0c      	ldr	r4, [pc, #48]	; (8004744 <__libc_init_array+0x44>)
 8004714:	f000 f820 	bl	8004758 <_init>
 8004718:	1ba4      	subs	r4, r4, r6
 800471a:	10a4      	asrs	r4, r4, #2
 800471c:	2500      	movs	r5, #0
 800471e:	42a5      	cmp	r5, r4
 8004720:	d105      	bne.n	800472e <__libc_init_array+0x2e>
 8004722:	bd70      	pop	{r4, r5, r6, pc}
 8004724:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004728:	4798      	blx	r3
 800472a:	3501      	adds	r5, #1
 800472c:	e7ee      	b.n	800470c <__libc_init_array+0xc>
 800472e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004732:	4798      	blx	r3
 8004734:	3501      	adds	r5, #1
 8004736:	e7f2      	b.n	800471e <__libc_init_array+0x1e>
 8004738:	08004790 	.word	0x08004790
 800473c:	08004790 	.word	0x08004790
 8004740:	08004790 	.word	0x08004790
 8004744:	08004794 	.word	0x08004794

08004748 <memset>:
 8004748:	4402      	add	r2, r0
 800474a:	4603      	mov	r3, r0
 800474c:	4293      	cmp	r3, r2
 800474e:	d100      	bne.n	8004752 <memset+0xa>
 8004750:	4770      	bx	lr
 8004752:	f803 1b01 	strb.w	r1, [r3], #1
 8004756:	e7f9      	b.n	800474c <memset+0x4>

08004758 <_init>:
 8004758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800475a:	bf00      	nop
 800475c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800475e:	bc08      	pop	{r3}
 8004760:	469e      	mov	lr, r3
 8004762:	4770      	bx	lr

08004764 <_fini>:
 8004764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004766:	bf00      	nop
 8004768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800476a:	bc08      	pop	{r3}
 800476c:	469e      	mov	lr, r3
 800476e:	4770      	bx	lr
=======
 80045ec:	bf00      	nop
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <__libc_init_array>:
 80045f8:	b570      	push	{r4, r5, r6, lr}
 80045fa:	4e0d      	ldr	r6, [pc, #52]	; (8004630 <__libc_init_array+0x38>)
 80045fc:	4c0d      	ldr	r4, [pc, #52]	; (8004634 <__libc_init_array+0x3c>)
 80045fe:	1ba4      	subs	r4, r4, r6
 8004600:	10a4      	asrs	r4, r4, #2
 8004602:	2500      	movs	r5, #0
 8004604:	42a5      	cmp	r5, r4
 8004606:	d109      	bne.n	800461c <__libc_init_array+0x24>
 8004608:	4e0b      	ldr	r6, [pc, #44]	; (8004638 <__libc_init_array+0x40>)
 800460a:	4c0c      	ldr	r4, [pc, #48]	; (800463c <__libc_init_array+0x44>)
 800460c:	f000 f820 	bl	8004650 <_init>
 8004610:	1ba4      	subs	r4, r4, r6
 8004612:	10a4      	asrs	r4, r4, #2
 8004614:	2500      	movs	r5, #0
 8004616:	42a5      	cmp	r5, r4
 8004618:	d105      	bne.n	8004626 <__libc_init_array+0x2e>
 800461a:	bd70      	pop	{r4, r5, r6, pc}
 800461c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004620:	4798      	blx	r3
 8004622:	3501      	adds	r5, #1
 8004624:	e7ee      	b.n	8004604 <__libc_init_array+0xc>
 8004626:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800462a:	4798      	blx	r3
 800462c:	3501      	adds	r5, #1
 800462e:	e7f2      	b.n	8004616 <__libc_init_array+0x1e>
 8004630:	08004688 	.word	0x08004688
 8004634:	08004688 	.word	0x08004688
 8004638:	08004688 	.word	0x08004688
 800463c:	0800468c 	.word	0x0800468c

08004640 <memset>:
 8004640:	4402      	add	r2, r0
 8004642:	4603      	mov	r3, r0
 8004644:	4293      	cmp	r3, r2
 8004646:	d100      	bne.n	800464a <memset+0xa>
 8004648:	4770      	bx	lr
 800464a:	f803 1b01 	strb.w	r1, [r3], #1
 800464e:	e7f9      	b.n	8004644 <memset+0x4>

08004650 <_init>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	bf00      	nop
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr

0800465c <_fini>:
 800465c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800465e:	bf00      	nop
 8004660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004662:	bc08      	pop	{r3}
 8004664:	469e      	mov	lr, r3
 8004666:	4770      	bx	lr
>>>>>>> d55e907f1d5c87405c75caa268ee7dab4d8410c8
