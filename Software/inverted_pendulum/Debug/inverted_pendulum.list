
inverted_pendulum.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3e4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800a578  0800a578  0001a578  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a924  0800a924  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a924  0800a924  0001a924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a92c  0800a92c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a92c  0800a92c  0001a92c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a930  0800a930  0001a930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800a934  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  200001e8  0800ab18  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000708  0800ab18  00020708  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c597  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001bd6  00000000  00000000  0002c7ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cc0  00000000  00000000  0002e388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000bd8  00000000  00000000  0002f048  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002487  00000000  00000000  0002fc20  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009bb8  00000000  00000000  000320a7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ca426  00000000  00000000  0003bc5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00106085  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  00106100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a55c 	.word	0x0800a55c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800a55c 	.word	0x0800a55c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003de:	f1a4 0401 	sub.w	r4, r4, #1
 80003e2:	d1e9      	bne.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b972 	b.w	8000fa4 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f806 	bl	8000cd8 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__udivmoddi4>:
 8000cd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cdc:	9e08      	ldr	r6, [sp, #32]
 8000cde:	4604      	mov	r4, r0
 8000ce0:	4688      	mov	r8, r1
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d14b      	bne.n	8000d7e <__udivmoddi4+0xa6>
 8000ce6:	428a      	cmp	r2, r1
 8000ce8:	4615      	mov	r5, r2
 8000cea:	d967      	bls.n	8000dbc <__udivmoddi4+0xe4>
 8000cec:	fab2 f282 	clz	r2, r2
 8000cf0:	b14a      	cbz	r2, 8000d06 <__udivmoddi4+0x2e>
 8000cf2:	f1c2 0720 	rsb	r7, r2, #32
 8000cf6:	fa01 f302 	lsl.w	r3, r1, r2
 8000cfa:	fa20 f707 	lsr.w	r7, r0, r7
 8000cfe:	4095      	lsls	r5, r2
 8000d00:	ea47 0803 	orr.w	r8, r7, r3
 8000d04:	4094      	lsls	r4, r2
 8000d06:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d0a:	0c23      	lsrs	r3, r4, #16
 8000d0c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000d10:	fa1f fc85 	uxth.w	ip, r5
 8000d14:	fb0e 8817 	mls	r8, lr, r7, r8
 8000d18:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d1c:	fb07 f10c 	mul.w	r1, r7, ip
 8000d20:	4299      	cmp	r1, r3
 8000d22:	d909      	bls.n	8000d38 <__udivmoddi4+0x60>
 8000d24:	18eb      	adds	r3, r5, r3
 8000d26:	f107 30ff 	add.w	r0, r7, #4294967295
 8000d2a:	f080 811b 	bcs.w	8000f64 <__udivmoddi4+0x28c>
 8000d2e:	4299      	cmp	r1, r3
 8000d30:	f240 8118 	bls.w	8000f64 <__udivmoddi4+0x28c>
 8000d34:	3f02      	subs	r7, #2
 8000d36:	442b      	add	r3, r5
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d4c:	45a4      	cmp	ip, r4
 8000d4e:	d909      	bls.n	8000d64 <__udivmoddi4+0x8c>
 8000d50:	192c      	adds	r4, r5, r4
 8000d52:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d56:	f080 8107 	bcs.w	8000f68 <__udivmoddi4+0x290>
 8000d5a:	45a4      	cmp	ip, r4
 8000d5c:	f240 8104 	bls.w	8000f68 <__udivmoddi4+0x290>
 8000d60:	3802      	subs	r0, #2
 8000d62:	442c      	add	r4, r5
 8000d64:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d68:	eba4 040c 	sub.w	r4, r4, ip
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	b11e      	cbz	r6, 8000d78 <__udivmoddi4+0xa0>
 8000d70:	40d4      	lsrs	r4, r2
 8000d72:	2300      	movs	r3, #0
 8000d74:	e9c6 4300 	strd	r4, r3, [r6]
 8000d78:	4639      	mov	r1, r7
 8000d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7e:	428b      	cmp	r3, r1
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0xbe>
 8000d82:	2e00      	cmp	r6, #0
 8000d84:	f000 80eb 	beq.w	8000f5e <__udivmoddi4+0x286>
 8000d88:	2700      	movs	r7, #0
 8000d8a:	e9c6 0100 	strd	r0, r1, [r6]
 8000d8e:	4638      	mov	r0, r7
 8000d90:	4639      	mov	r1, r7
 8000d92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d96:	fab3 f783 	clz	r7, r3
 8000d9a:	2f00      	cmp	r7, #0
 8000d9c:	d147      	bne.n	8000e2e <__udivmoddi4+0x156>
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d302      	bcc.n	8000da8 <__udivmoddi4+0xd0>
 8000da2:	4282      	cmp	r2, r0
 8000da4:	f200 80fa 	bhi.w	8000f9c <__udivmoddi4+0x2c4>
 8000da8:	1a84      	subs	r4, r0, r2
 8000daa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dae:	2001      	movs	r0, #1
 8000db0:	4698      	mov	r8, r3
 8000db2:	2e00      	cmp	r6, #0
 8000db4:	d0e0      	beq.n	8000d78 <__udivmoddi4+0xa0>
 8000db6:	e9c6 4800 	strd	r4, r8, [r6]
 8000dba:	e7dd      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000dbc:	b902      	cbnz	r2, 8000dc0 <__udivmoddi4+0xe8>
 8000dbe:	deff      	udf	#255	; 0xff
 8000dc0:	fab2 f282 	clz	r2, r2
 8000dc4:	2a00      	cmp	r2, #0
 8000dc6:	f040 808f 	bne.w	8000ee8 <__udivmoddi4+0x210>
 8000dca:	1b49      	subs	r1, r1, r5
 8000dcc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000dd0:	fa1f f885 	uxth.w	r8, r5
 8000dd4:	2701      	movs	r7, #1
 8000dd6:	fbb1 fcfe 	udiv	ip, r1, lr
 8000dda:	0c23      	lsrs	r3, r4, #16
 8000ddc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000de0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de4:	fb08 f10c 	mul.w	r1, r8, ip
 8000de8:	4299      	cmp	r1, r3
 8000dea:	d907      	bls.n	8000dfc <__udivmoddi4+0x124>
 8000dec:	18eb      	adds	r3, r5, r3
 8000dee:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000df2:	d202      	bcs.n	8000dfa <__udivmoddi4+0x122>
 8000df4:	4299      	cmp	r1, r3
 8000df6:	f200 80cd 	bhi.w	8000f94 <__udivmoddi4+0x2bc>
 8000dfa:	4684      	mov	ip, r0
 8000dfc:	1a59      	subs	r1, r3, r1
 8000dfe:	b2a3      	uxth	r3, r4
 8000e00:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e04:	fb0e 1410 	mls	r4, lr, r0, r1
 8000e08:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000e0c:	fb08 f800 	mul.w	r8, r8, r0
 8000e10:	45a0      	cmp	r8, r4
 8000e12:	d907      	bls.n	8000e24 <__udivmoddi4+0x14c>
 8000e14:	192c      	adds	r4, r5, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	d202      	bcs.n	8000e22 <__udivmoddi4+0x14a>
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	f200 80b6 	bhi.w	8000f8e <__udivmoddi4+0x2b6>
 8000e22:	4618      	mov	r0, r3
 8000e24:	eba4 0408 	sub.w	r4, r4, r8
 8000e28:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e2c:	e79f      	b.n	8000d6e <__udivmoddi4+0x96>
 8000e2e:	f1c7 0c20 	rsb	ip, r7, #32
 8000e32:	40bb      	lsls	r3, r7
 8000e34:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000e38:	ea4e 0e03 	orr.w	lr, lr, r3
 8000e3c:	fa01 f407 	lsl.w	r4, r1, r7
 8000e40:	fa20 f50c 	lsr.w	r5, r0, ip
 8000e44:	fa21 f30c 	lsr.w	r3, r1, ip
 8000e48:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000e4c:	4325      	orrs	r5, r4
 8000e4e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000e52:	0c2c      	lsrs	r4, r5, #16
 8000e54:	fb08 3319 	mls	r3, r8, r9, r3
 8000e58:	fa1f fa8e 	uxth.w	sl, lr
 8000e5c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e60:	fb09 f40a 	mul.w	r4, r9, sl
 8000e64:	429c      	cmp	r4, r3
 8000e66:	fa02 f207 	lsl.w	r2, r2, r7
 8000e6a:	fa00 f107 	lsl.w	r1, r0, r7
 8000e6e:	d90b      	bls.n	8000e88 <__udivmoddi4+0x1b0>
 8000e70:	eb1e 0303 	adds.w	r3, lr, r3
 8000e74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e78:	f080 8087 	bcs.w	8000f8a <__udivmoddi4+0x2b2>
 8000e7c:	429c      	cmp	r4, r3
 8000e7e:	f240 8084 	bls.w	8000f8a <__udivmoddi4+0x2b2>
 8000e82:	f1a9 0902 	sub.w	r9, r9, #2
 8000e86:	4473      	add	r3, lr
 8000e88:	1b1b      	subs	r3, r3, r4
 8000e8a:	b2ad      	uxth	r5, r5
 8000e8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e90:	fb08 3310 	mls	r3, r8, r0, r3
 8000e94:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e98:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e9c:	45a2      	cmp	sl, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x1da>
 8000ea0:	eb1e 0404 	adds.w	r4, lr, r4
 8000ea4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ea8:	d26b      	bcs.n	8000f82 <__udivmoddi4+0x2aa>
 8000eaa:	45a2      	cmp	sl, r4
 8000eac:	d969      	bls.n	8000f82 <__udivmoddi4+0x2aa>
 8000eae:	3802      	subs	r0, #2
 8000eb0:	4474      	add	r4, lr
 8000eb2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000eba:	eba4 040a 	sub.w	r4, r4, sl
 8000ebe:	454c      	cmp	r4, r9
 8000ec0:	46c2      	mov	sl, r8
 8000ec2:	464b      	mov	r3, r9
 8000ec4:	d354      	bcc.n	8000f70 <__udivmoddi4+0x298>
 8000ec6:	d051      	beq.n	8000f6c <__udivmoddi4+0x294>
 8000ec8:	2e00      	cmp	r6, #0
 8000eca:	d069      	beq.n	8000fa0 <__udivmoddi4+0x2c8>
 8000ecc:	ebb1 050a 	subs.w	r5, r1, sl
 8000ed0:	eb64 0403 	sbc.w	r4, r4, r3
 8000ed4:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ed8:	40fd      	lsrs	r5, r7
 8000eda:	40fc      	lsrs	r4, r7
 8000edc:	ea4c 0505 	orr.w	r5, ip, r5
 8000ee0:	e9c6 5400 	strd	r5, r4, [r6]
 8000ee4:	2700      	movs	r7, #0
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000ee8:	f1c2 0320 	rsb	r3, r2, #32
 8000eec:	fa20 f703 	lsr.w	r7, r0, r3
 8000ef0:	4095      	lsls	r5, r2
 8000ef2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ef6:	fa21 f303 	lsr.w	r3, r1, r3
 8000efa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000efe:	4338      	orrs	r0, r7
 8000f00:	0c01      	lsrs	r1, r0, #16
 8000f02:	fbb3 f7fe 	udiv	r7, r3, lr
 8000f06:	fa1f f885 	uxth.w	r8, r5
 8000f0a:	fb0e 3317 	mls	r3, lr, r7, r3
 8000f0e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f12:	fb07 f308 	mul.w	r3, r7, r8
 8000f16:	428b      	cmp	r3, r1
 8000f18:	fa04 f402 	lsl.w	r4, r4, r2
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x256>
 8000f1e:	1869      	adds	r1, r5, r1
 8000f20:	f107 3cff 	add.w	ip, r7, #4294967295
 8000f24:	d22f      	bcs.n	8000f86 <__udivmoddi4+0x2ae>
 8000f26:	428b      	cmp	r3, r1
 8000f28:	d92d      	bls.n	8000f86 <__udivmoddi4+0x2ae>
 8000f2a:	3f02      	subs	r7, #2
 8000f2c:	4429      	add	r1, r5
 8000f2e:	1acb      	subs	r3, r1, r3
 8000f30:	b281      	uxth	r1, r0
 8000f32:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f36:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f3a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f3e:	fb00 f308 	mul.w	r3, r0, r8
 8000f42:	428b      	cmp	r3, r1
 8000f44:	d907      	bls.n	8000f56 <__udivmoddi4+0x27e>
 8000f46:	1869      	adds	r1, r5, r1
 8000f48:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f4c:	d217      	bcs.n	8000f7e <__udivmoddi4+0x2a6>
 8000f4e:	428b      	cmp	r3, r1
 8000f50:	d915      	bls.n	8000f7e <__udivmoddi4+0x2a6>
 8000f52:	3802      	subs	r0, #2
 8000f54:	4429      	add	r1, r5
 8000f56:	1ac9      	subs	r1, r1, r3
 8000f58:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f5c:	e73b      	b.n	8000dd6 <__udivmoddi4+0xfe>
 8000f5e:	4637      	mov	r7, r6
 8000f60:	4630      	mov	r0, r6
 8000f62:	e709      	b.n	8000d78 <__udivmoddi4+0xa0>
 8000f64:	4607      	mov	r7, r0
 8000f66:	e6e7      	b.n	8000d38 <__udivmoddi4+0x60>
 8000f68:	4618      	mov	r0, r3
 8000f6a:	e6fb      	b.n	8000d64 <__udivmoddi4+0x8c>
 8000f6c:	4541      	cmp	r1, r8
 8000f6e:	d2ab      	bcs.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f70:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f74:	eb69 020e 	sbc.w	r2, r9, lr
 8000f78:	3801      	subs	r0, #1
 8000f7a:	4613      	mov	r3, r2
 8000f7c:	e7a4      	b.n	8000ec8 <__udivmoddi4+0x1f0>
 8000f7e:	4660      	mov	r0, ip
 8000f80:	e7e9      	b.n	8000f56 <__udivmoddi4+0x27e>
 8000f82:	4618      	mov	r0, r3
 8000f84:	e795      	b.n	8000eb2 <__udivmoddi4+0x1da>
 8000f86:	4667      	mov	r7, ip
 8000f88:	e7d1      	b.n	8000f2e <__udivmoddi4+0x256>
 8000f8a:	4681      	mov	r9, r0
 8000f8c:	e77c      	b.n	8000e88 <__udivmoddi4+0x1b0>
 8000f8e:	3802      	subs	r0, #2
 8000f90:	442c      	add	r4, r5
 8000f92:	e747      	b.n	8000e24 <__udivmoddi4+0x14c>
 8000f94:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f98:	442b      	add	r3, r5
 8000f9a:	e72f      	b.n	8000dfc <__udivmoddi4+0x124>
 8000f9c:	4638      	mov	r0, r7
 8000f9e:	e708      	b.n	8000db2 <__udivmoddi4+0xda>
 8000fa0:	4637      	mov	r7, r6
 8000fa2:	e6e9      	b.n	8000d78 <__udivmoddi4+0xa0>

08000fa4 <__aeabi_idiv0>:
 8000fa4:	4770      	bx	lr
 8000fa6:	bf00      	nop

08000fa8 <HAL_GPIO_EXTI_Callback>:

	return x;
}

/* Interrupts */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000fa8:	b480      	push	{r7}
 8000faa:	b083      	sub	sp, #12
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == START_POS_Pin){
 8000fb2:	88fb      	ldrh	r3, [r7, #6]
 8000fb4:	2b80      	cmp	r3, #128	; 0x80
 8000fb6:	d103      	bne.n	8000fc0 <HAL_GPIO_EXTI_Callback+0x18>
		START_POSITION_FLAG=1;
 8000fb8:	4b0b      	ldr	r3, [pc, #44]	; (8000fe8 <HAL_GPIO_EXTI_Callback+0x40>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	701a      	strb	r2, [r3, #0]
		END_POSITION_FLAG=1;
	}
	else if(GPIO_Pin == Button_Pin){
		START_BALANCING = 1;
	}
}
 8000fbe:	e00d      	b.n	8000fdc <HAL_GPIO_EXTI_Callback+0x34>
	else if(GPIO_Pin == END_POS_Pin){
 8000fc0:	88fb      	ldrh	r3, [r7, #6]
 8000fc2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fc6:	d103      	bne.n	8000fd0 <HAL_GPIO_EXTI_Callback+0x28>
		END_POSITION_FLAG=1;
 8000fc8:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_GPIO_EXTI_Callback+0x44>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	701a      	strb	r2, [r3, #0]
}
 8000fce:	e005      	b.n	8000fdc <HAL_GPIO_EXTI_Callback+0x34>
	else if(GPIO_Pin == Button_Pin){
 8000fd0:	88fb      	ldrh	r3, [r7, #6]
 8000fd2:	2b01      	cmp	r3, #1
 8000fd4:	d102      	bne.n	8000fdc <HAL_GPIO_EXTI_Callback+0x34>
		START_BALANCING = 1;
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_GPIO_EXTI_Callback+0x48>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	701a      	strb	r2, [r3, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr
 8000fe8:	20000204 	.word	0x20000204
 8000fec:	20000205 	.word	0x20000205
 8000ff0:	20000206 	.word	0x20000206

08000ff4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
	if(htim==&htim10){
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	4a12      	ldr	r2, [pc, #72]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d103      	bne.n	800100c <HAL_TIM_PeriodElapsedCallback+0x18>
		LED_FLAG = 1;
 8001004:	4b11      	ldr	r3, [pc, #68]	; (800104c <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
		PWM_FLAG = 1;
	}
	else if(htim==&htim6){
		PENDULUM_PID_FLAG = 1;
	}
}
 800100a:	e016      	b.n	800103a <HAL_TIM_PeriodElapsedCallback+0x46>
	else if(htim==&htim11){
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a10      	ldr	r2, [pc, #64]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d103      	bne.n	800101c <HAL_TIM_PeriodElapsedCallback+0x28>
		MOTOR_PID_FLAG = 1;
 8001014:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001016:	2201      	movs	r2, #1
 8001018:	701a      	strb	r2, [r3, #0]
}
 800101a:	e00e      	b.n	800103a <HAL_TIM_PeriodElapsedCallback+0x46>
	else if(htim==&htim13){
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a0e      	ldr	r2, [pc, #56]	; (8001058 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d103      	bne.n	800102c <HAL_TIM_PeriodElapsedCallback+0x38>
		PWM_FLAG = 1;
 8001024:	4b0d      	ldr	r3, [pc, #52]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001026:	2201      	movs	r2, #1
 8001028:	701a      	strb	r2, [r3, #0]
}
 800102a:	e006      	b.n	800103a <HAL_TIM_PeriodElapsedCallback+0x46>
	else if(htim==&htim6){
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a0c      	ldr	r2, [pc, #48]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d102      	bne.n	800103a <HAL_TIM_PeriodElapsedCallback+0x46>
		PENDULUM_PID_FLAG = 1;
 8001034:	4b0b      	ldr	r3, [pc, #44]	; (8001064 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001036:	2201      	movs	r2, #1
 8001038:	701a      	strb	r2, [r3, #0]
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	20000398 	.word	0x20000398
 800104c:	20000207 	.word	0x20000207
 8001050:	20000540 	.word	0x20000540
 8001054:	20000209 	.word	0x20000209
 8001058:	20000500 	.word	0x20000500
 800105c:	2000020a 	.word	0x2000020a
 8001060:	20000580 	.word	0x20000580
 8001064:	2000020c 	.word	0x2000020c

08001068 <parse>:

void parse(){
 8001068:	b5b0      	push	{r4, r5, r7, lr}
 800106a:	b090      	sub	sp, #64	; 0x40
 800106c:	af04      	add	r7, sp, #16
	char header[2];
	double _p=0.0, _i=0.0, _d=0.0, _x=0.0, _y=0.0;
 800106e:	f04f 0200 	mov.w	r2, #0
 8001072:	f04f 0300 	mov.w	r3, #0
 8001076:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800107a:	f04f 0200 	mov.w	r2, #0
 800107e:	f04f 0300 	mov.w	r3, #0
 8001082:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8001086:	f04f 0200 	mov.w	r2, #0
 800108a:	f04f 0300 	mov.w	r3, #0
 800108e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001092:	f04f 0200 	mov.w	r2, #0
 8001096:	f04f 0300 	mov.w	r3, #0
 800109a:	e9c7 2302 	strd	r2, r3, [r7, #8]
 800109e:	f04f 0200 	mov.w	r2, #0
 80010a2:	f04f 0300 	mov.w	r3, #0
 80010a6:	e9c7 2300 	strd	r2, r3, [r7]
	sscanf(buf, "%s %lf %lf %lf %lf %lf %lf", &header, &_p, &_i, &_d, &_x, &_y);
 80010aa:	f107 0120 	add.w	r1, r7, #32
 80010ae:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 80010b2:	463b      	mov	r3, r7
 80010b4:	9303      	str	r3, [sp, #12]
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	9302      	str	r3, [sp, #8]
 80010bc:	f107 0310 	add.w	r3, r7, #16
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	f107 0318 	add.w	r3, r7, #24
 80010c6:	9300      	str	r3, [sp, #0]
 80010c8:	460b      	mov	r3, r1
 80010ca:	494c      	ldr	r1, [pc, #304]	; (80011fc <parse+0x194>)
 80010cc:	484c      	ldr	r0, [pc, #304]	; (8001200 <parse+0x198>)
 80010ce:	f005 ff3f 	bl	8006f50 <siscanf>
	if(!strcmp(header, "P")){
 80010d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010d6:	494b      	ldr	r1, [pc, #300]	; (8001204 <parse+0x19c>)
 80010d8:	4618      	mov	r0, r3
 80010da:	f7ff f879 	bl	80001d0 <strcmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f040 8087 	bne.w	80011f4 <parse+0x18c>
		if(_p>=0.0 && _p<=50.0) pendulum_pid.p = -_p;
 80010e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80010ea:	f04f 0200 	mov.w	r2, #0
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	f7ff fd17 	bl	8000b24 <__aeabi_dcmpge>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d011      	beq.n	8001120 <parse+0xb8>
 80010fc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001100:	f04f 0200 	mov.w	r2, #0
 8001104:	4b40      	ldr	r3, [pc, #256]	; (8001208 <parse+0x1a0>)
 8001106:	f7ff fd03 	bl	8000b10 <__aeabi_dcmple>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d007      	beq.n	8001120 <parse+0xb8>
 8001110:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001114:	4614      	mov	r4, r2
 8001116:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 800111a:	4b3c      	ldr	r3, [pc, #240]	; (800120c <parse+0x1a4>)
 800111c:	e9c3 4500 	strd	r4, r5, [r3]
		if(_i>=0.0 && _i<=50.0) pendulum_pid.i = _i;
 8001120:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001124:	f04f 0200 	mov.w	r2, #0
 8001128:	f04f 0300 	mov.w	r3, #0
 800112c:	f7ff fcfa 	bl	8000b24 <__aeabi_dcmpge>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00e      	beq.n	8001154 <parse+0xec>
 8001136:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800113a:	f04f 0200 	mov.w	r2, #0
 800113e:	4b32      	ldr	r3, [pc, #200]	; (8001208 <parse+0x1a0>)
 8001140:	f7ff fce6 	bl	8000b10 <__aeabi_dcmple>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d004      	beq.n	8001154 <parse+0xec>
 800114a:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800114e:	4a2f      	ldr	r2, [pc, #188]	; (800120c <parse+0x1a4>)
 8001150:	e9c2 3402 	strd	r3, r4, [r2, #8]
		if(_d>=0.0 && _d<=50.0) wsp1 = _d;
 8001154:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001158:	f04f 0200 	mov.w	r2, #0
 800115c:	f04f 0300 	mov.w	r3, #0
 8001160:	f7ff fce0 	bl	8000b24 <__aeabi_dcmpge>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d00e      	beq.n	8001188 <parse+0x120>
 800116a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800116e:	f04f 0200 	mov.w	r2, #0
 8001172:	4b25      	ldr	r3, [pc, #148]	; (8001208 <parse+0x1a0>)
 8001174:	f7ff fccc 	bl	8000b10 <__aeabi_dcmple>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <parse+0x120>
 800117e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001182:	4a23      	ldr	r2, [pc, #140]	; (8001210 <parse+0x1a8>)
 8001184:	e9c2 3400 	strd	r3, r4, [r2]
		if(_x>=0.0 && _x<=50.0) motor_pid.p = _x;
 8001188:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800118c:	f04f 0200 	mov.w	r2, #0
 8001190:	f04f 0300 	mov.w	r3, #0
 8001194:	f7ff fcc6 	bl	8000b24 <__aeabi_dcmpge>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d00e      	beq.n	80011bc <parse+0x154>
 800119e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	4b18      	ldr	r3, [pc, #96]	; (8001208 <parse+0x1a0>)
 80011a8:	f7ff fcb2 	bl	8000b10 <__aeabi_dcmple>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d004      	beq.n	80011bc <parse+0x154>
 80011b2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80011b6:	4a17      	ldr	r2, [pc, #92]	; (8001214 <parse+0x1ac>)
 80011b8:	e9c2 3400 	strd	r3, r4, [r2]
		if(_y>=0.0 && _y<=50.0) motor_pid.d = _y;
 80011bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	f04f 0300 	mov.w	r3, #0
 80011c8:	f7ff fcac 	bl	8000b24 <__aeabi_dcmpge>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d100      	bne.n	80011d4 <parse+0x16c>
	}
}
 80011d2:	e00f      	b.n	80011f4 <parse+0x18c>
		if(_y>=0.0 && _y<=50.0) motor_pid.d = _y;
 80011d4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011d8:	f04f 0200 	mov.w	r2, #0
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <parse+0x1a0>)
 80011de:	f7ff fc97 	bl	8000b10 <__aeabi_dcmple>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d100      	bne.n	80011ea <parse+0x182>
}
 80011e8:	e004      	b.n	80011f4 <parse+0x18c>
		if(_y>=0.0 && _y<=50.0) motor_pid.d = _y;
 80011ea:	e9d7 3400 	ldrd	r3, r4, [r7]
 80011ee:	4a09      	ldr	r2, [pc, #36]	; (8001214 <parse+0x1ac>)
 80011f0:	e9c2 3404 	strd	r3, r4, [r2, #16]
}
 80011f4:	bf00      	nop
 80011f6:	3730      	adds	r7, #48	; 0x30
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bdb0      	pop	{r4, r5, r7, pc}
 80011fc:	0800a578 	.word	0x0800a578
 8001200:	2000022c 	.word	0x2000022c
 8001204:	0800a594 	.word	0x0800a594
 8001208:	40490000 	.word	0x40490000
 800120c:	20000270 	.word	0x20000270
 8001210:	20000000 	.word	0x20000000
 8001214:	200003d8 	.word	0x200003d8

08001218 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800121c:	b099      	sub	sp, #100	; 0x64
 800121e:	af08      	add	r7, sp, #32
 8001220:	6078      	str	r0, [r7, #4]
	uint16_t size = 0;
 8001222:	2300      	movs	r3, #0
 8001224:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint8_t data[50];
	parse();
 8001226:	f7ff ff1f 	bl	8001068 <parse>
	size = sprintf(data, "{\"mp\":%.1f,\"mi\":%.1f,\"md\":%.1f,\"pp\":%.1f,\"pd\":%.1f}", -pendulum_pid.p, pendulum_pid.i, wsp1, motor_pid.p, motor_pid.d);
 800122a:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <HAL_UART_RxCpltCallback+0x7c>)
 800122c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001230:	469a      	mov	sl, r3
 8001232:	f084 4b00 	eor.w	fp, r4, #2147483648	; 0x80000000
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <HAL_UART_RxCpltCallback+0x7c>)
 8001238:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800123c:	4a16      	ldr	r2, [pc, #88]	; (8001298 <HAL_UART_RxCpltCallback+0x80>)
 800123e:	e9d2 1200 	ldrd	r1, r2, [r2]
 8001242:	4816      	ldr	r0, [pc, #88]	; (800129c <HAL_UART_RxCpltCallback+0x84>)
 8001244:	e9d0 5600 	ldrd	r5, r6, [r0]
 8001248:	4814      	ldr	r0, [pc, #80]	; (800129c <HAL_UART_RxCpltCallback+0x84>)
 800124a:	e9d0 8904 	ldrd	r8, r9, [r0, #16]
 800124e:	f107 000c 	add.w	r0, r7, #12
 8001252:	e9cd 8906 	strd	r8, r9, [sp, #24]
 8001256:	e9cd 5604 	strd	r5, r6, [sp, #16]
 800125a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800125e:	e9cd 3400 	strd	r3, r4, [sp]
 8001262:	4652      	mov	r2, sl
 8001264:	465b      	mov	r3, fp
 8001266:	490e      	ldr	r1, [pc, #56]	; (80012a0 <HAL_UART_RxCpltCallback+0x88>)
 8001268:	f005 fe52 	bl	8006f10 <siprintf>
 800126c:	4603      	mov	r3, r0
 800126e:	87fb      	strh	r3, [r7, #62]	; 0x3e
	HAL_UART_Transmit_IT(&huart2, data, size);
 8001270:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8001272:	f107 030c 	add.w	r3, r7, #12
 8001276:	4619      	mov	r1, r3
 8001278:	480a      	ldr	r0, [pc, #40]	; (80012a4 <HAL_UART_RxCpltCallback+0x8c>)
 800127a:	f004 f986 	bl	800558a <HAL_UART_Transmit_IT>
	HAL_UART_Receive_IT(&huart2, &buf, 28);
 800127e:	221c      	movs	r2, #28
 8001280:	4909      	ldr	r1, [pc, #36]	; (80012a8 <HAL_UART_RxCpltCallback+0x90>)
 8001282:	4808      	ldr	r0, [pc, #32]	; (80012a4 <HAL_UART_RxCpltCallback+0x8c>)
 8001284:	f004 f9c6 	bl	8005614 <HAL_UART_Receive_IT>
}
 8001288:	bf00      	nop
 800128a:	3744      	adds	r7, #68	; 0x44
 800128c:	46bd      	mov	sp, r7
 800128e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001292:	bf00      	nop
 8001294:	20000270 	.word	0x20000270
 8001298:	20000000 	.word	0x20000000
 800129c:	200003d8 	.word	0x200003d8
 80012a0:	0800a598 	.word	0x0800a598
 80012a4:	200006c0 	.word	0x200006c0
 80012a8:	2000022c 	.word	0x2000022c

080012ac <ramp>:

uint16_t ramp(uint16_t dest){
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	4603      	mov	r3, r0
 80012b4:	80fb      	strh	r3, [r7, #6]
	int16_t ramp_duty = 0;
 80012b6:	2300      	movs	r3, #0
 80012b8:	81fb      	strh	r3, [r7, #14]
	if(dest > 0 && dest < 27 ) dest = 27;
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d004      	beq.n	80012ca <ramp+0x1e>
 80012c0:	88fb      	ldrh	r3, [r7, #6]
 80012c2:	2b1a      	cmp	r3, #26
 80012c4:	d801      	bhi.n	80012ca <ramp+0x1e>
 80012c6:	231b      	movs	r3, #27
 80012c8:	80fb      	strh	r3, [r7, #6]
	if(dest/5 == motor_pwm_duty/5) return motor_pwm_duty;
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	4a1a      	ldr	r2, [pc, #104]	; (8001338 <ramp+0x8c>)
 80012ce:	fba2 2303 	umull	r2, r3, r2, r3
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	b29a      	uxth	r2, r3
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <ramp+0x90>)
 80012d8:	881b      	ldrh	r3, [r3, #0]
 80012da:	4917      	ldr	r1, [pc, #92]	; (8001338 <ramp+0x8c>)
 80012dc:	fba1 1303 	umull	r1, r3, r1, r3
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <ramp+0x42>
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <ramp+0x90>)
 80012ea:	881b      	ldrh	r3, [r3, #0]
 80012ec:	e01d      	b.n	800132a <ramp+0x7e>
	else{
		if(dest > motor_pwm_duty){
 80012ee:	4b13      	ldr	r3, [pc, #76]	; (800133c <ramp+0x90>)
 80012f0:	881b      	ldrh	r3, [r3, #0]
 80012f2:	88fa      	ldrh	r2, [r7, #6]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d90c      	bls.n	8001312 <ramp+0x66>
			ramp_duty=motor_pwm_duty+5;
 80012f8:	4b10      	ldr	r3, [pc, #64]	; (800133c <ramp+0x90>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	3305      	adds	r3, #5
 80012fe:	b29b      	uxth	r3, r3
 8001300:	81fb      	strh	r3, [r7, #14]
			if(ramp_duty>=100) return 100;
 8001302:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001306:	2b63      	cmp	r3, #99	; 0x63
 8001308:	dd01      	ble.n	800130e <ramp+0x62>
 800130a:	2364      	movs	r3, #100	; 0x64
 800130c:	e00d      	b.n	800132a <ramp+0x7e>
			else return ramp_duty;
 800130e:	89fb      	ldrh	r3, [r7, #14]
 8001310:	e00b      	b.n	800132a <ramp+0x7e>
		}
		else{
			ramp_duty=motor_pwm_duty-5;
 8001312:	4b0a      	ldr	r3, [pc, #40]	; (800133c <ramp+0x90>)
 8001314:	881b      	ldrh	r3, [r3, #0]
 8001316:	3b05      	subs	r3, #5
 8001318:	b29b      	uxth	r3, r3
 800131a:	81fb      	strh	r3, [r7, #14]
			if(ramp_duty<=0) return 0;
 800131c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001320:	2b00      	cmp	r3, #0
 8001322:	dc01      	bgt.n	8001328 <ramp+0x7c>
 8001324:	2300      	movs	r3, #0
 8001326:	e000      	b.n	800132a <ramp+0x7e>
			else return ramp_duty;
 8001328:	89fb      	ldrh	r3, [r7, #14]
		}
	}
}
 800132a:	4618      	mov	r0, r3
 800132c:	3714      	adds	r7, #20
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop
 8001338:	cccccccd 	.word	0xcccccccd
 800133c:	20000220 	.word	0x20000220

08001340 <motor_speed>:

void motor_speed(int16_t speed){
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
	if(speed * prev_speed < 0)
 800134a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800134e:	4a4d      	ldr	r2, [pc, #308]	; (8001484 <motor_speed+0x144>)
 8001350:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001354:	fb02 f303 	mul.w	r3, r2, r3
 8001358:	2b00      	cmp	r3, #0
 800135a:	da07      	bge.n	800136c <motor_speed+0x2c>
		motor_pwm_duty=ramp(0);
 800135c:	2000      	movs	r0, #0
 800135e:	f7ff ffa5 	bl	80012ac <ramp>
 8001362:	4603      	mov	r3, r0
 8001364:	461a      	mov	r2, r3
 8001366:	4b48      	ldr	r3, [pc, #288]	; (8001488 <motor_speed+0x148>)
 8001368:	801a      	strh	r2, [r3, #0]
 800136a:	e084      	b.n	8001476 <motor_speed+0x136>
	else{
		if(speed < 0){
 800136c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001370:	2b00      	cmp	r3, #0
 8001372:	da3a      	bge.n	80013ea <motor_speed+0xaa>
			if(cart_position > 5){
 8001374:	4b45      	ldr	r3, [pc, #276]	; (800148c <motor_speed+0x14c>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	b21b      	sxth	r3, r3
 800137a:	2b05      	cmp	r3, #5
 800137c:	dd27      	ble.n	80013ce <motor_speed+0x8e>
				if(cart_position > 30){
 800137e:	4b43      	ldr	r3, [pc, #268]	; (800148c <motor_speed+0x14c>)
 8001380:	881b      	ldrh	r3, [r3, #0]
 8001382:	b21b      	sxth	r3, r3
 8001384:	2b1e      	cmp	r3, #30
 8001386:	dd14      	ble.n	80013b2 <motor_speed+0x72>
					HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001388:	2200      	movs	r2, #0
 800138a:	2120      	movs	r1, #32
 800138c:	4840      	ldr	r0, [pc, #256]	; (8001490 <motor_speed+0x150>)
 800138e:	f002 fae3 	bl	8003958 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 8001392:	2201      	movs	r2, #1
 8001394:	2110      	movs	r1, #16
 8001396:	483e      	ldr	r0, [pc, #248]	; (8001490 <motor_speed+0x150>)
 8001398:	f002 fade 	bl	8003958 <HAL_GPIO_WritePin>
					motor_pwm_duty=ramp(-speed);
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	425b      	negs	r3, r3
 80013a0:	b29b      	uxth	r3, r3
 80013a2:	4618      	mov	r0, r3
 80013a4:	f7ff ff82 	bl	80012ac <ramp>
 80013a8:	4603      	mov	r3, r0
 80013aa:	461a      	mov	r2, r3
 80013ac:	4b36      	ldr	r3, [pc, #216]	; (8001488 <motor_speed+0x148>)
 80013ae:	801a      	strh	r2, [r3, #0]
 80013b0:	e061      	b.n	8001476 <motor_speed+0x136>
				}
				else{
					HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 80013b2:	2201      	movs	r2, #1
 80013b4:	2120      	movs	r1, #32
 80013b6:	4836      	ldr	r0, [pc, #216]	; (8001490 <motor_speed+0x150>)
 80013b8:	f002 face 	bl	8003958 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 80013bc:	2201      	movs	r2, #1
 80013be:	2110      	movs	r1, #16
 80013c0:	4833      	ldr	r0, [pc, #204]	; (8001490 <motor_speed+0x150>)
 80013c2:	f002 fac9 	bl	8003958 <HAL_GPIO_WritePin>
					motor_pwm_duty=100;
 80013c6:	4b30      	ldr	r3, [pc, #192]	; (8001488 <motor_speed+0x148>)
 80013c8:	2264      	movs	r2, #100	; 0x64
 80013ca:	801a      	strh	r2, [r3, #0]
 80013cc:	e053      	b.n	8001476 <motor_speed+0x136>
				}
			}
			else{
				HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 80013ce:	2200      	movs	r2, #0
 80013d0:	2120      	movs	r1, #32
 80013d2:	482f      	ldr	r0, [pc, #188]	; (8001490 <motor_speed+0x150>)
 80013d4:	f002 fac0 	bl	8003958 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 80013d8:	2200      	movs	r2, #0
 80013da:	2110      	movs	r1, #16
 80013dc:	482c      	ldr	r0, [pc, #176]	; (8001490 <motor_speed+0x150>)
 80013de:	f002 fabb 	bl	8003958 <HAL_GPIO_WritePin>
				motor_pwm_duty = 100;
 80013e2:	4b29      	ldr	r3, [pc, #164]	; (8001488 <motor_speed+0x148>)
 80013e4:	2264      	movs	r2, #100	; 0x64
 80013e6:	801a      	strh	r2, [r3, #0]
 80013e8:	e045      	b.n	8001476 <motor_speed+0x136>
			}
		}
		else if(speed > 0){
 80013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	dd3a      	ble.n	8001468 <motor_speed+0x128>
			if(cart_position < 428){
 80013f2:	4b26      	ldr	r3, [pc, #152]	; (800148c <motor_speed+0x14c>)
 80013f4:	881b      	ldrh	r3, [r3, #0]
 80013f6:	b21b      	sxth	r3, r3
 80013f8:	f5b3 7fd6 	cmp.w	r3, #428	; 0x1ac
 80013fc:	da26      	bge.n	800144c <motor_speed+0x10c>
				if(cart_position < 400){
 80013fe:	4b23      	ldr	r3, [pc, #140]	; (800148c <motor_speed+0x14c>)
 8001400:	881b      	ldrh	r3, [r3, #0]
 8001402:	b21b      	sxth	r3, r3
 8001404:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8001408:	da12      	bge.n	8001430 <motor_speed+0xf0>
					HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 800140a:	2201      	movs	r2, #1
 800140c:	2120      	movs	r1, #32
 800140e:	4820      	ldr	r0, [pc, #128]	; (8001490 <motor_speed+0x150>)
 8001410:	f002 faa2 	bl	8003958 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8001414:	2200      	movs	r2, #0
 8001416:	2110      	movs	r1, #16
 8001418:	481d      	ldr	r0, [pc, #116]	; (8001490 <motor_speed+0x150>)
 800141a:	f002 fa9d 	bl	8003958 <HAL_GPIO_WritePin>
					motor_pwm_duty=ramp(speed);
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff43 	bl	80012ac <ramp>
 8001426:	4603      	mov	r3, r0
 8001428:	461a      	mov	r2, r3
 800142a:	4b17      	ldr	r3, [pc, #92]	; (8001488 <motor_speed+0x148>)
 800142c:	801a      	strh	r2, [r3, #0]
 800142e:	e022      	b.n	8001476 <motor_speed+0x136>
				}
				else{
					HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 8001430:	2201      	movs	r2, #1
 8001432:	2120      	movs	r1, #32
 8001434:	4816      	ldr	r0, [pc, #88]	; (8001490 <motor_speed+0x150>)
 8001436:	f002 fa8f 	bl	8003958 <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 800143a:	2201      	movs	r2, #1
 800143c:	2110      	movs	r1, #16
 800143e:	4814      	ldr	r0, [pc, #80]	; (8001490 <motor_speed+0x150>)
 8001440:	f002 fa8a 	bl	8003958 <HAL_GPIO_WritePin>
					motor_pwm_duty=100;
 8001444:	4b10      	ldr	r3, [pc, #64]	; (8001488 <motor_speed+0x148>)
 8001446:	2264      	movs	r2, #100	; 0x64
 8001448:	801a      	strh	r2, [r3, #0]
 800144a:	e014      	b.n	8001476 <motor_speed+0x136>
				}
			}
			else{
				HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 800144c:	2200      	movs	r2, #0
 800144e:	2120      	movs	r1, #32
 8001450:	480f      	ldr	r0, [pc, #60]	; (8001490 <motor_speed+0x150>)
 8001452:	f002 fa81 	bl	8003958 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 8001456:	2200      	movs	r2, #0
 8001458:	2110      	movs	r1, #16
 800145a:	480d      	ldr	r0, [pc, #52]	; (8001490 <motor_speed+0x150>)
 800145c:	f002 fa7c 	bl	8003958 <HAL_GPIO_WritePin>
				motor_pwm_duty = 100;
 8001460:	4b09      	ldr	r3, [pc, #36]	; (8001488 <motor_speed+0x148>)
 8001462:	2264      	movs	r2, #100	; 0x64
 8001464:	801a      	strh	r2, [r3, #0]
 8001466:	e006      	b.n	8001476 <motor_speed+0x136>
			}
		}
		else{
			motor_pwm_duty = ramp(0);
 8001468:	2000      	movs	r0, #0
 800146a:	f7ff ff1f 	bl	80012ac <ramp>
 800146e:	4603      	mov	r3, r0
 8001470:	461a      	mov	r2, r3
 8001472:	4b05      	ldr	r3, [pc, #20]	; (8001488 <motor_speed+0x148>)
 8001474:	801a      	strh	r2, [r3, #0]
		}
	}
	prev_speed = speed;
 8001476:	4a03      	ldr	r2, [pc, #12]	; (8001484 <motor_speed+0x144>)
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	8013      	strh	r3, [r2, #0]
}
 800147c:	bf00      	nop
 800147e:	3708      	adds	r7, #8
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000228 	.word	0x20000228
 8001488:	20000220 	.word	0x20000220
 800148c:	2000021a 	.word	0x2000021a
 8001490:	40020400 	.word	0x40020400

08001494 <motor_stop>:

void motor_stop(){
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001498:	2200      	movs	r2, #0
 800149a:	2120      	movs	r1, #32
 800149c:	4806      	ldr	r0, [pc, #24]	; (80014b8 <motor_stop+0x24>)
 800149e:	f002 fa5b 	bl	8003958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 80014a2:	2200      	movs	r2, #0
 80014a4:	2110      	movs	r1, #16
 80014a6:	4804      	ldr	r0, [pc, #16]	; (80014b8 <motor_stop+0x24>)
 80014a8:	f002 fa56 	bl	8003958 <HAL_GPIO_WritePin>
	motor_pwm_duty=0;
 80014ac:	4b03      	ldr	r3, [pc, #12]	; (80014bc <motor_stop+0x28>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	801a      	strh	r2, [r3, #0]
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40020400 	.word	0x40020400
 80014bc:	20000220 	.word	0x20000220

080014c0 <motor_init>:

void motor_init(){
 80014c0:	b580      	push	{r7, lr}
 80014c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_SET);
 80014c4:	2201      	movs	r2, #1
 80014c6:	2120      	movs	r1, #32
 80014c8:	480e      	ldr	r0, [pc, #56]	; (8001504 <motor_init+0x44>)
 80014ca:	f002 fa45 	bl	8003958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_RESET);
 80014ce:	2200      	movs	r2, #0
 80014d0:	2110      	movs	r1, #16
 80014d2:	480c      	ldr	r0, [pc, #48]	; (8001504 <motor_init+0x44>)
 80014d4:	f002 fa40 	bl	8003958 <HAL_GPIO_WritePin>
	motor_pwm_duty=60;
 80014d8:	4b0b      	ldr	r3, [pc, #44]	; (8001508 <motor_init+0x48>)
 80014da:	223c      	movs	r2, #60	; 0x3c
 80014dc:	801a      	strh	r2, [r3, #0]
	HAL_Delay(100);
 80014de:	2064      	movs	r0, #100	; 0x64
 80014e0:	f001 fbdc 	bl	8002c9c <HAL_Delay>
	HAL_GPIO_WritePin(MOTOR_IN1_GPIO_Port, MOTOR_IN1_Pin, GPIO_PIN_RESET);
 80014e4:	2200      	movs	r2, #0
 80014e6:	2120      	movs	r1, #32
 80014e8:	4806      	ldr	r0, [pc, #24]	; (8001504 <motor_init+0x44>)
 80014ea:	f002 fa35 	bl	8003958 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(MOTOR_IN2_GPIO_Port, MOTOR_IN2_Pin, GPIO_PIN_SET);
 80014ee:	2201      	movs	r2, #1
 80014f0:	2110      	movs	r1, #16
 80014f2:	4804      	ldr	r0, [pc, #16]	; (8001504 <motor_init+0x44>)
 80014f4:	f002 fa30 	bl	8003958 <HAL_GPIO_WritePin>
	motor_pwm_duty=30;
 80014f8:	4b03      	ldr	r3, [pc, #12]	; (8001508 <motor_init+0x48>)
 80014fa:	221e      	movs	r2, #30
 80014fc:	801a      	strh	r2, [r3, #0]
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	40020400 	.word	0x40020400
 8001508:	20000220 	.word	0x20000220
 800150c:	00000000 	.word	0x00000000

08001510 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001512:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001514:	f001 fb50 	bl	8002bb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001518:	f000 fa62 	bl	80019e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800151c:	f000 fcf0 	bl	8001f00 <MX_GPIO_Init>
  MX_DMA_Init();
 8001520:	f000 fcb6 	bl	8001e90 <MX_DMA_Init>
  MX_TIM4_Init();
 8001524:	f000 fb72 	bl	8001c0c <MX_TIM4_Init>
  MX_TIM1_Init();
 8001528:	f000 fac4 	bl	8001ab4 <MX_TIM1_Init>
  MX_TIM3_Init();
 800152c:	f000 fb1a 	bl	8001b64 <MX_TIM3_Init>
  MX_TIM10_Init();
 8001530:	f000 fc18 	bl	8001d64 <MX_TIM10_Init>
  MX_TIM11_Init();
 8001534:	f000 fc3a 	bl	8001dac <MX_TIM11_Init>
  MX_TIM13_Init();
 8001538:	f000 fc5c 	bl	8001df4 <MX_TIM13_Init>
  MX_USART2_UART_Init();
 800153c:	f000 fc7e 	bl	8001e3c <MX_USART2_UART_Init>
  MX_TIM6_Init();
 8001540:	f000 fbda 	bl	8001cf8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001544:	213c      	movs	r1, #60	; 0x3c
 8001546:	48b2      	ldr	r0, [pc, #712]	; (8001810 <main+0x300>)
 8001548:	f003 f8b6 	bl	80046b8 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 800154c:	213c      	movs	r1, #60	; 0x3c
 800154e:	48b1      	ldr	r0, [pc, #708]	; (8001814 <main+0x304>)
 8001550:	f003 f8b2 	bl	80046b8 <HAL_TIM_Encoder_Start>
  //HAL_TIM_Encoder_Start_DMA(&htim3, TIM_CHANNEL_ALL, pData1, pData2, 8);

  HAL_TIM_Base_Start_IT(&htim10);
 8001554:	48b0      	ldr	r0, [pc, #704]	; (8001818 <main+0x308>)
 8001556:	f002 feb2 	bl	80042be <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim11);
 800155a:	48b0      	ldr	r0, [pc, #704]	; (800181c <main+0x30c>)
 800155c:	f002 feaf 	bl	80042be <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim13);
 8001560:	48af      	ldr	r0, [pc, #700]	; (8001820 <main+0x310>)
 8001562:	f002 feac 	bl	80042be <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8001566:	48af      	ldr	r0, [pc, #700]	; (8001824 <main+0x314>)
 8001568:	f002 fea9 	bl	80042be <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start_DMA(&htim4, TIM_CHANNEL_1, &motor_pwm_duty, 1);
 800156c:	2301      	movs	r3, #1
 800156e:	4aae      	ldr	r2, [pc, #696]	; (8001828 <main+0x318>)
 8001570:	2100      	movs	r1, #0
 8001572:	48ae      	ldr	r0, [pc, #696]	; (800182c <main+0x31c>)
 8001574:	f002 fefc 	bl	8004370 <HAL_TIM_PWM_Start_DMA>

  motor_init();
 8001578:	f7ff ffa2 	bl	80014c0 <motor_init>

	pid_init(&motor_pid, 5.0, 0.0, 0.7, 20);
 800157c:	ed9f 2b98 	vldr	d2, [pc, #608]	; 80017e0 <main+0x2d0>
 8001580:	ed9f 1aab 	vldr	s2, [pc, #684]	; 8001830 <main+0x320>
 8001584:	eddf 0aab 	vldr	s1, [pc, #684]	; 8001834 <main+0x324>
 8001588:	eeb1 0a04 	vmov.f32	s0, #20	; 0x40a00000  5.0
 800158c:	48aa      	ldr	r0, [pc, #680]	; (8001838 <main+0x328>)
 800158e:	f000 fd83 	bl	8002098 <pid_init>
	motor_pid.p_max = 4095;
 8001592:	4aa9      	ldr	r2, [pc, #676]	; (8001838 <main+0x328>)
 8001594:	a494      	add	r4, pc, #592	; (adr r4, 80017e8 <main+0x2d8>)
 8001596:	e9d4 3400 	ldrd	r3, r4, [r4]
 800159a:	e9c2 3406 	strd	r3, r4, [r2, #24]
	motor_pid.p_min = -4095;
 800159e:	4aa6      	ldr	r2, [pc, #664]	; (8001838 <main+0x328>)
 80015a0:	a493      	add	r4, pc, #588	; (adr r4, 80017f0 <main+0x2e0>)
 80015a2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015a6:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	motor_pid.i_max = 4095;
 80015aa:	4aa3      	ldr	r2, [pc, #652]	; (8001838 <main+0x328>)
 80015ac:	a48e      	add	r4, pc, #568	; (adr r4, 80017e8 <main+0x2d8>)
 80015ae:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015b2:	e9c2 3408 	strd	r3, r4, [r2, #32]
	motor_pid.i_min = -4095;
 80015b6:	4aa0      	ldr	r2, [pc, #640]	; (8001838 <main+0x328>)
 80015b8:	a48d      	add	r4, pc, #564	; (adr r4, 80017f0 <main+0x2e0>)
 80015ba:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015be:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	motor_pid.d_max = 4095;
 80015c2:	4a9d      	ldr	r2, [pc, #628]	; (8001838 <main+0x328>)
 80015c4:	a488      	add	r4, pc, #544	; (adr r4, 80017e8 <main+0x2d8>)
 80015c6:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015ca:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	motor_pid.d_min = -4095;
 80015ce:	4a9a      	ldr	r2, [pc, #616]	; (8001838 <main+0x328>)
 80015d0:	a487      	add	r4, pc, #540	; (adr r4, 80017f0 <main+0x2e0>)
 80015d2:	e9d4 3400 	ldrd	r3, r4, [r4]
 80015d6:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	motor_pid.total_max = 100;
 80015da:	4a97      	ldr	r2, [pc, #604]	; (8001838 <main+0x328>)
 80015dc:	f04f 0300 	mov.w	r3, #0
 80015e0:	4c96      	ldr	r4, [pc, #600]	; (800183c <main+0x32c>)
 80015e2:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	motor_pid.total_min = -100;
 80015e6:	4a94      	ldr	r2, [pc, #592]	; (8001838 <main+0x328>)
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	4c94      	ldr	r4, [pc, #592]	; (8001840 <main+0x330>)
 80015ee:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70


	pid_init(&pendulum_pid, -40.f, 2.0, 0.0f, 2);
 80015f2:	ed9f 2b81 	vldr	d2, [pc, #516]	; 80017f8 <main+0x2e8>
 80015f6:	ed9f 1a8f 	vldr	s2, [pc, #572]	; 8001834 <main+0x324>
 80015fa:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 80015fe:	ed9f 0a91 	vldr	s0, [pc, #580]	; 8001844 <main+0x334>
 8001602:	4891      	ldr	r0, [pc, #580]	; (8001848 <main+0x338>)
 8001604:	f000 fd48 	bl	8002098 <pid_init>
	pendulum_pid.p_max = 4095;
 8001608:	4a8f      	ldr	r2, [pc, #572]	; (8001848 <main+0x338>)
 800160a:	a477      	add	r4, pc, #476	; (adr r4, 80017e8 <main+0x2d8>)
 800160c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001610:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pendulum_pid.p_min = -4095;
 8001614:	4a8c      	ldr	r2, [pc, #560]	; (8001848 <main+0x338>)
 8001616:	a476      	add	r4, pc, #472	; (adr r4, 80017f0 <main+0x2e0>)
 8001618:	e9d4 3400 	ldrd	r3, r4, [r4]
 800161c:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30
	pendulum_pid.i_max = 4095;
 8001620:	4a89      	ldr	r2, [pc, #548]	; (8001848 <main+0x338>)
 8001622:	a471      	add	r4, pc, #452	; (adr r4, 80017e8 <main+0x2d8>)
 8001624:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001628:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pendulum_pid.i_min = -4095;
 800162c:	4a86      	ldr	r2, [pc, #536]	; (8001848 <main+0x338>)
 800162e:	a470      	add	r4, pc, #448	; (adr r4, 80017f0 <main+0x2e0>)
 8001630:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001634:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38
	pendulum_pid.d_max = 4095;
 8001638:	4a83      	ldr	r2, [pc, #524]	; (8001848 <main+0x338>)
 800163a:	a46b      	add	r4, pc, #428	; (adr r4, 80017e8 <main+0x2d8>)
 800163c:	e9d4 3400 	ldrd	r3, r4, [r4]
 8001640:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pendulum_pid.d_min = -4095;
 8001644:	4a80      	ldr	r2, [pc, #512]	; (8001848 <main+0x338>)
 8001646:	a46a      	add	r4, pc, #424	; (adr r4, 80017f0 <main+0x2e0>)
 8001648:	e9d4 3400 	ldrd	r3, r4, [r4]
 800164c:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40
	pendulum_pid.total_max = 100;
 8001650:	4a7d      	ldr	r2, [pc, #500]	; (8001848 <main+0x338>)
 8001652:	f04f 0300 	mov.w	r3, #0
 8001656:	4c79      	ldr	r4, [pc, #484]	; (800183c <main+0x32c>)
 8001658:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pendulum_pid.total_min = -100;
 800165c:	4a7a      	ldr	r2, [pc, #488]	; (8001848 <main+0x338>)
 800165e:	f04f 0300 	mov.w	r3, #0
 8001662:	4c77      	ldr	r4, [pc, #476]	; (8001840 <main+0x330>)
 8001664:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	HAL_UART_Receive_IT(&huart2, buf, 28);
 8001668:	221c      	movs	r2, #28
 800166a:	4978      	ldr	r1, [pc, #480]	; (800184c <main+0x33c>)
 800166c:	4878      	ldr	r0, [pc, #480]	; (8001850 <main+0x340>)
 800166e:	f003 ffd1 	bl	8005614 <HAL_UART_Receive_IT>
	 // if(HAL_GetTick()<1000) cycle++;
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  pendulum_pulse_count = TIM3->CNT;
 8001672:	4b78      	ldr	r3, [pc, #480]	; (8001854 <main+0x344>)
 8001674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001676:	b21a      	sxth	r2, r3
 8001678:	4b77      	ldr	r3, [pc, #476]	; (8001858 <main+0x348>)
 800167a:	801a      	strh	r2, [r3, #0]
	  pendulum_degree = pendulum_pulse_count*360.0/1600.0;
 800167c:	4b76      	ldr	r3, [pc, #472]	; (8001858 <main+0x348>)
 800167e:	881b      	ldrh	r3, [r3, #0]
 8001680:	b21b      	sxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	f7fe ff5e 	bl	8000544 <__aeabi_i2d>
 8001688:	f04f 0200 	mov.w	r2, #0
 800168c:	4b73      	ldr	r3, [pc, #460]	; (800185c <main+0x34c>)
 800168e:	f7fe ffc3 	bl	8000618 <__aeabi_dmul>
 8001692:	4603      	mov	r3, r0
 8001694:	460c      	mov	r4, r1
 8001696:	4618      	mov	r0, r3
 8001698:	4621      	mov	r1, r4
 800169a:	f04f 0200 	mov.w	r2, #0
 800169e:	4b70      	ldr	r3, [pc, #448]	; (8001860 <main+0x350>)
 80016a0:	f7ff f8e4 	bl	800086c <__aeabi_ddiv>
 80016a4:	4603      	mov	r3, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	4a6e      	ldr	r2, [pc, #440]	; (8001864 <main+0x354>)
 80016aa:	e9c2 3400 	strd	r3, r4, [r2]

	  motor_pulse_count = TIM1->CNT;
 80016ae:	4b6e      	ldr	r3, [pc, #440]	; (8001868 <main+0x358>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	b21a      	sxth	r2, r3
 80016b4:	4b6d      	ldr	r3, [pc, #436]	; (800186c <main+0x35c>)
 80016b6:	801a      	strh	r2, [r3, #0]
	  cart_position = -motor_pulse_count/64.0/19.0*25.7*PI;
 80016b8:	4b6c      	ldr	r3, [pc, #432]	; (800186c <main+0x35c>)
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	b21b      	sxth	r3, r3
 80016be:	425b      	negs	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7fe ff3f 	bl	8000544 <__aeabi_i2d>
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	4b69      	ldr	r3, [pc, #420]	; (8001870 <main+0x360>)
 80016cc:	f7ff f8ce 	bl	800086c <__aeabi_ddiv>
 80016d0:	4603      	mov	r3, r0
 80016d2:	460c      	mov	r4, r1
 80016d4:	4618      	mov	r0, r3
 80016d6:	4621      	mov	r1, r4
 80016d8:	f04f 0200 	mov.w	r2, #0
 80016dc:	4b65      	ldr	r3, [pc, #404]	; (8001874 <main+0x364>)
 80016de:	f7ff f8c5 	bl	800086c <__aeabi_ddiv>
 80016e2:	4603      	mov	r3, r0
 80016e4:	460c      	mov	r4, r1
 80016e6:	4618      	mov	r0, r3
 80016e8:	4621      	mov	r1, r4
 80016ea:	a345      	add	r3, pc, #276	; (adr r3, 8001800 <main+0x2f0>)
 80016ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016f0:	f7fe ff92 	bl	8000618 <__aeabi_dmul>
 80016f4:	4603      	mov	r3, r0
 80016f6:	460c      	mov	r4, r1
 80016f8:	4618      	mov	r0, r3
 80016fa:	4621      	mov	r1, r4
 80016fc:	a342      	add	r3, pc, #264	; (adr r3, 8001808 <main+0x2f8>)
 80016fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001702:	f7fe ff89 	bl	8000618 <__aeabi_dmul>
 8001706:	4603      	mov	r3, r0
 8001708:	460c      	mov	r4, r1
 800170a:	4618      	mov	r0, r3
 800170c:	4621      	mov	r1, r4
 800170e:	f7ff fa33 	bl	8000b78 <__aeabi_d2iz>
 8001712:	4603      	mov	r3, r0
 8001714:	b21a      	sxth	r2, r3
 8001716:	4b58      	ldr	r3, [pc, #352]	; (8001878 <main+0x368>)
 8001718:	801a      	strh	r2, [r3, #0]

	  if(LED_FLAG && !ERROR_FLAG){
 800171a:	4b58      	ldr	r3, [pc, #352]	; (800187c <main+0x36c>)
 800171c:	781b      	ldrb	r3, [r3, #0]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d00b      	beq.n	800173a <main+0x22a>
 8001722:	4b57      	ldr	r3, [pc, #348]	; (8001880 <main+0x370>)
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d107      	bne.n	800173a <main+0x22a>
		  HAL_GPIO_TogglePin(LED_B_GPIO_Port, LED_B_Pin);
 800172a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800172e:	4855      	ldr	r0, [pc, #340]	; (8001884 <main+0x374>)
 8001730:	f002 f92b 	bl	800398a <HAL_GPIO_TogglePin>
		  LED_FLAG = 0;
 8001734:	4b51      	ldr	r3, [pc, #324]	; (800187c <main+0x36c>)
 8001736:	2200      	movs	r2, #0
 8001738:	701a      	strb	r2, [r3, #0]
	  }

	  if(LED_FLAG && ERROR_FLAG){
 800173a:	4b50      	ldr	r3, [pc, #320]	; (800187c <main+0x36c>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d011      	beq.n	8001766 <main+0x256>
 8001742:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <main+0x370>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00d      	beq.n	8001766 <main+0x256>
		  HAL_GPIO_WritePin(LED_B_GPIO_Port, LED_B_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001750:	484c      	ldr	r0, [pc, #304]	; (8001884 <main+0x374>)
 8001752:	f002 f901 	bl	8003958 <HAL_GPIO_WritePin>
		  HAL_GPIO_TogglePin(LED_R_GPIO_Port, LED_R_Pin);
 8001756:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800175a:	484a      	ldr	r0, [pc, #296]	; (8001884 <main+0x374>)
 800175c:	f002 f915 	bl	800398a <HAL_GPIO_TogglePin>
		  LED_FLAG = 0;
 8001760:	4b46      	ldr	r3, [pc, #280]	; (800187c <main+0x36c>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
	  }

	  if(START_POSITION_FLAG && !FLAG_READY){
 8001766:	4b48      	ldr	r3, [pc, #288]	; (8001888 <main+0x378>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d010      	beq.n	8001790 <main+0x280>
 800176e:	4b47      	ldr	r3, [pc, #284]	; (800188c <main+0x37c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10c      	bne.n	8001790 <main+0x280>
		  motor_stop();
 8001776:	f7ff fe8d 	bl	8001494 <motor_stop>
		  TIM1->CNT=0;
 800177a:	4b3b      	ldr	r3, [pc, #236]	; (8001868 <main+0x358>)
 800177c:	2200      	movs	r2, #0
 800177e:	625a      	str	r2, [r3, #36]	; 0x24
		  START_POSITION_FLAG=0;
 8001780:	4b41      	ldr	r3, [pc, #260]	; (8001888 <main+0x378>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
		  timer_1=HAL_GetTick();
 8001786:	f001 fa7d 	bl	8002c84 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	4b40      	ldr	r3, [pc, #256]	; (8001890 <main+0x380>)
 800178e:	601a      	str	r2, [r3, #0]
	  }

	  if((START_POSITION_FLAG || END_POSITION_FLAG) && FLAG_READY){
 8001790:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <main+0x378>)
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d103      	bne.n	80017a0 <main+0x290>
 8001798:	4b3e      	ldr	r3, [pc, #248]	; (8001894 <main+0x384>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <main+0x2a2>
 80017a0:	4b3a      	ldr	r3, [pc, #232]	; (800188c <main+0x37c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d004      	beq.n	80017b2 <main+0x2a2>
		  motor_stop();
 80017a8:	f7ff fe74 	bl	8001494 <motor_stop>
		  ERROR_FLAG = 1;
 80017ac:	4b34      	ldr	r3, [pc, #208]	; (8001880 <main+0x370>)
 80017ae:	2201      	movs	r2, #1
 80017b0:	701a      	strb	r2, [r3, #0]
	  }

	  if(FLAG_READY){
 80017b2:	4b36      	ldr	r3, [pc, #216]	; (800188c <main+0x37c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	f000 80d7 	beq.w	800196a <main+0x45a>
		  if(PWM_FLAG){
 80017bc:	4b36      	ldr	r3, [pc, #216]	; (8001898 <main+0x388>)
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	f000 8092 	beq.w	80018ea <main+0x3da>
			  PWM_FLAG=0;
 80017c6:	4b34      	ldr	r3, [pc, #208]	; (8001898 <main+0x388>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	701a      	strb	r2, [r3, #0]
			  pid_controll = pendulum_pid_controll-wsp1*motor_pid_controll;
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <main+0x38c>)
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	b21b      	sxth	r3, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f7fe feb6 	bl	8000544 <__aeabi_i2d>
 80017d8:	4605      	mov	r5, r0
 80017da:	460e      	mov	r6, r1
 80017dc:	e060      	b.n	80018a0 <main+0x390>
 80017de:	bf00      	nop
 80017e0:	00000000 	.word	0x00000000
 80017e4:	40340000 	.word	0x40340000
 80017e8:	00000000 	.word	0x00000000
 80017ec:	40affe00 	.word	0x40affe00
 80017f0:	00000000 	.word	0x00000000
 80017f4:	c0affe00 	.word	0xc0affe00
 80017f8:	00000000 	.word	0x00000000
 80017fc:	40000000 	.word	0x40000000
 8001800:	33333333 	.word	0x33333333
 8001804:	4039b333 	.word	0x4039b333
 8001808:	54442d18 	.word	0x54442d18
 800180c:	400921fb 	.word	0x400921fb
 8001810:	200005c0 	.word	0x200005c0
 8001814:	20000460 	.word	0x20000460
 8001818:	20000398 	.word	0x20000398
 800181c:	20000540 	.word	0x20000540
 8001820:	20000500 	.word	0x20000500
 8001824:	20000580 	.word	0x20000580
 8001828:	20000220 	.word	0x20000220
 800182c:	20000358 	.word	0x20000358
 8001830:	3f333333 	.word	0x3f333333
 8001834:	00000000 	.word	0x00000000
 8001838:	200003d8 	.word	0x200003d8
 800183c:	40590000 	.word	0x40590000
 8001840:	c0590000 	.word	0xc0590000
 8001844:	c2200000 	.word	0xc2200000
 8001848:	20000270 	.word	0x20000270
 800184c:	2000022c 	.word	0x2000022c
 8001850:	200006c0 	.word	0x200006c0
 8001854:	40000400 	.word	0x40000400
 8001858:	2000020e 	.word	0x2000020e
 800185c:	40768000 	.word	0x40768000
 8001860:	40990000 	.word	0x40990000
 8001864:	20000210 	.word	0x20000210
 8001868:	40010000 	.word	0x40010000
 800186c:	20000218 	.word	0x20000218
 8001870:	40500000 	.word	0x40500000
 8001874:	40330000 	.word	0x40330000
 8001878:	2000021a 	.word	0x2000021a
 800187c:	20000207 	.word	0x20000207
 8001880:	2000020b 	.word	0x2000020b
 8001884:	40020c00 	.word	0x40020c00
 8001888:	20000204 	.word	0x20000204
 800188c:	20000208 	.word	0x20000208
 8001890:	2000021c 	.word	0x2000021c
 8001894:	20000205 	.word	0x20000205
 8001898:	2000020a 	.word	0x2000020a
 800189c:	20000224 	.word	0x20000224
 80018a0:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <main+0x4a0>)
 80018a2:	881b      	ldrh	r3, [r3, #0]
 80018a4:	b21b      	sxth	r3, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe fe4c 	bl	8000544 <__aeabi_i2d>
 80018ac:	4b41      	ldr	r3, [pc, #260]	; (80019b4 <main+0x4a4>)
 80018ae:	e9d3 3400 	ldrd	r3, r4, [r3]
 80018b2:	461a      	mov	r2, r3
 80018b4:	4623      	mov	r3, r4
 80018b6:	f7fe feaf 	bl	8000618 <__aeabi_dmul>
 80018ba:	4603      	mov	r3, r0
 80018bc:	460c      	mov	r4, r1
 80018be:	461a      	mov	r2, r3
 80018c0:	4623      	mov	r3, r4
 80018c2:	4628      	mov	r0, r5
 80018c4:	4631      	mov	r1, r6
 80018c6:	f7fe fcef 	bl	80002a8 <__aeabi_dsub>
 80018ca:	4603      	mov	r3, r0
 80018cc:	460c      	mov	r4, r1
 80018ce:	4618      	mov	r0, r3
 80018d0:	4621      	mov	r1, r4
 80018d2:	f7ff f951 	bl	8000b78 <__aeabi_d2iz>
 80018d6:	4603      	mov	r3, r0
 80018d8:	b21a      	sxth	r2, r3
 80018da:	4b37      	ldr	r3, [pc, #220]	; (80019b8 <main+0x4a8>)
 80018dc:	801a      	strh	r2, [r3, #0]
			  motor_speed(pid_controll);
 80018de:	4b36      	ldr	r3, [pc, #216]	; (80019b8 <main+0x4a8>)
 80018e0:	881b      	ldrh	r3, [r3, #0]
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	4618      	mov	r0, r3
 80018e6:	f7ff fd2b 	bl	8001340 <motor_speed>
		  }
		  if(PENDULUM_PID_FLAG){
 80018ea:	4b34      	ldr	r3, [pc, #208]	; (80019bc <main+0x4ac>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d01b      	beq.n	800192a <main+0x41a>
			  PENDULUM_PID_FLAG=0;
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <main+0x4ac>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	701a      	strb	r2, [r3, #0]
			  pendulum_pid_controll = pid_calc(&pendulum_pid, pendulum_pulse_count, 800);
 80018f8:	4b31      	ldr	r3, [pc, #196]	; (80019c0 <main+0x4b0>)
 80018fa:	881b      	ldrh	r3, [r3, #0]
 80018fc:	b21b      	sxth	r3, r3
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fe20 	bl	8000544 <__aeabi_i2d>
 8001904:	4603      	mov	r3, r0
 8001906:	460c      	mov	r4, r1
 8001908:	ed9f 1b25 	vldr	d1, [pc, #148]	; 80019a0 <main+0x490>
 800190c:	ec44 3b10 	vmov	d0, r3, r4
 8001910:	482c      	ldr	r0, [pc, #176]	; (80019c4 <main+0x4b4>)
 8001912:	f000 fc33 	bl	800217c <pid_calc>
 8001916:	ec54 3b10 	vmov	r3, r4, d0
 800191a:	4618      	mov	r0, r3
 800191c:	4621      	mov	r1, r4
 800191e:	f7ff f92b 	bl	8000b78 <__aeabi_d2iz>
 8001922:	4603      	mov	r3, r0
 8001924:	b21a      	sxth	r2, r3
 8001926:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <main+0x4b8>)
 8001928:	801a      	strh	r2, [r3, #0]
		  }
		  if(MOTOR_PID_FLAG){
 800192a:	4b28      	ldr	r3, [pc, #160]	; (80019cc <main+0x4bc>)
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d01b      	beq.n	800196a <main+0x45a>
			  motor_pid_controll = pid_calc(&motor_pid, cart_position, 215);
 8001932:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <main+0x4c0>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	b21b      	sxth	r3, r3
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe fe03 	bl	8000544 <__aeabi_i2d>
 800193e:	4603      	mov	r3, r0
 8001940:	460c      	mov	r4, r1
 8001942:	ed9f 1b19 	vldr	d1, [pc, #100]	; 80019a8 <main+0x498>
 8001946:	ec44 3b10 	vmov	d0, r3, r4
 800194a:	4822      	ldr	r0, [pc, #136]	; (80019d4 <main+0x4c4>)
 800194c:	f000 fc16 	bl	800217c <pid_calc>
 8001950:	ec54 3b10 	vmov	r3, r4, d0
 8001954:	4618      	mov	r0, r3
 8001956:	4621      	mov	r1, r4
 8001958:	f7ff f90e 	bl	8000b78 <__aeabi_d2iz>
 800195c:	4603      	mov	r3, r0
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <main+0x4a0>)
 8001962:	801a      	strh	r2, [r3, #0]
			  MOTOR_PID_FLAG=0;
 8001964:	4b19      	ldr	r3, [pc, #100]	; (80019cc <main+0x4bc>)
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
		  }
	  }

	  if(START_BALANCING){
 800196a:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <main+0x4c8>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	f43f ae7f 	beq.w	8001672 <main+0x162>

		  HAL_Delay(50);
 8001974:	2032      	movs	r0, #50	; 0x32
 8001976:	f001 f991 	bl	8002c9c <HAL_Delay>
		  if(!FLAG_READY){
 800197a:	4b18      	ldr	r3, [pc, #96]	; (80019dc <main+0x4cc>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d103      	bne.n	800198a <main+0x47a>
			  FLAG_READY=1;
 8001982:	4b16      	ldr	r3, [pc, #88]	; (80019dc <main+0x4cc>)
 8001984:	2201      	movs	r2, #1
 8001986:	701a      	strb	r2, [r3, #0]
 8001988:	e004      	b.n	8001994 <main+0x484>
		  }
		  else{
			  FLAG_READY=0;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <main+0x4cc>)
 800198c:	2200      	movs	r2, #0
 800198e:	701a      	strb	r2, [r3, #0]
			  motor_stop();
 8001990:	f7ff fd80 	bl	8001494 <motor_stop>
		  }
		  START_BALANCING=0;
 8001994:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <main+0x4c8>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
	  pendulum_pulse_count = TIM3->CNT;
 800199a:	e66a      	b.n	8001672 <main+0x162>
 800199c:	f3af 8000 	nop.w
 80019a0:	00000000 	.word	0x00000000
 80019a4:	40890000 	.word	0x40890000
 80019a8:	00000000 	.word	0x00000000
 80019ac:	406ae000 	.word	0x406ae000
 80019b0:	20000222 	.word	0x20000222
 80019b4:	20000000 	.word	0x20000000
 80019b8:	20000226 	.word	0x20000226
 80019bc:	2000020c 	.word	0x2000020c
 80019c0:	2000020e 	.word	0x2000020e
 80019c4:	20000270 	.word	0x20000270
 80019c8:	20000224 	.word	0x20000224
 80019cc:	20000209 	.word	0x20000209
 80019d0:	2000021a 	.word	0x2000021a
 80019d4:	200003d8 	.word	0x200003d8
 80019d8:	20000206 	.word	0x20000206
 80019dc:	20000208 	.word	0x20000208

080019e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b094      	sub	sp, #80	; 0x50
 80019e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019e6:	f107 0320 	add.w	r3, r7, #32
 80019ea:	2230      	movs	r2, #48	; 0x30
 80019ec:	2100      	movs	r1, #0
 80019ee:	4618      	mov	r0, r3
 80019f0:	f004 fc42 	bl	8006278 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019f4:	f107 030c 	add.w	r3, r7, #12
 80019f8:	2200      	movs	r2, #0
 80019fa:	601a      	str	r2, [r3, #0]
 80019fc:	605a      	str	r2, [r3, #4]
 80019fe:	609a      	str	r2, [r3, #8]
 8001a00:	60da      	str	r2, [r3, #12]
 8001a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b28      	ldr	r3, [pc, #160]	; (8001aac <SystemClock_Config+0xcc>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <SystemClock_Config+0xcc>)
 8001a0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
 8001a14:	4b25      	ldr	r3, [pc, #148]	; (8001aac <SystemClock_Config+0xcc>)
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a20:	2300      	movs	r3, #0
 8001a22:	607b      	str	r3, [r7, #4]
 8001a24:	4b22      	ldr	r3, [pc, #136]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a21      	ldr	r2, [pc, #132]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a2a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b1f      	ldr	r3, [pc, #124]	; (8001ab0 <SystemClock_Config+0xd0>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a38:	607b      	str	r3, [r7, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a40:	2301      	movs	r3, #1
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a44:	2310      	movs	r3, #16
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a50:	2308      	movs	r3, #8
 8001a52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a54:	2364      	movs	r3, #100	; 0x64
 8001a56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a58:	2302      	movs	r3, #2
 8001a5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a60:	f107 0320 	add.w	r3, r7, #32
 8001a64:	4618      	mov	r0, r3
 8001a66:	f001 ffc3 	bl	80039f0 <HAL_RCC_OscConfig>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a70:	f000 fb08 	bl	8002084 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a74:	230f      	movs	r3, #15
 8001a76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a78:	2302      	movs	r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a80:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a86:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a8c:	f107 030c 	add.w	r3, r7, #12
 8001a90:	2103      	movs	r1, #3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f002 fa1c 	bl	8003ed0 <HAL_RCC_ClockConfig>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a9e:	f000 faf1 	bl	8002084 <Error_Handler>
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	3750      	adds	r7, #80	; 0x50
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40023800 	.word	0x40023800
 8001ab0:	40007000 	.word	0x40007000

08001ab4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b08c      	sub	sp, #48	; 0x30
 8001ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001aba:	f107 030c 	add.w	r3, r7, #12
 8001abe:	2224      	movs	r2, #36	; 0x24
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f004 fbd8 	bl	8006278 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ac8:	1d3b      	adds	r3, r7, #4
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
 8001ace:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ad0:	4b22      	ldr	r3, [pc, #136]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ad2:	4a23      	ldr	r2, [pc, #140]	; (8001b60 <MX_TIM1_Init+0xac>)
 8001ad4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001ad6:	4b21      	ldr	r3, [pc, #132]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ad8:	2200      	movs	r2, #0
 8001ada:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001adc:	4b1f      	ldr	r3, [pc, #124]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ade:	2200      	movs	r2, #0
 8001ae0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001ae2:	4b1e      	ldr	r3, [pc, #120]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001ae4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001af0:	4b1a      	ldr	r3, [pc, #104]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001af6:	4b19      	ldr	r3, [pc, #100]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001afc:	2303      	movs	r3, #3
 8001afe:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b00:	2300      	movs	r3, #0
 8001b02:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b04:	2301      	movs	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b10:	2300      	movs	r3, #0
 8001b12:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b14:	2301      	movs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	4619      	mov	r1, r3
 8001b26:	480d      	ldr	r0, [pc, #52]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001b28:	f002 fd34 	bl	8004594 <HAL_TIM_Encoder_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001b32:	f000 faa7 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3e:	1d3b      	adds	r3, r7, #4
 8001b40:	4619      	mov	r1, r3
 8001b42:	4806      	ldr	r0, [pc, #24]	; (8001b5c <MX_TIM1_Init+0xa8>)
 8001b44:	f003 fc44 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d001      	beq.n	8001b52 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001b4e:	f000 fa99 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b52:	bf00      	nop
 8001b54:	3730      	adds	r7, #48	; 0x30
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	200005c0 	.word	0x200005c0
 8001b60:	40010000 	.word	0x40010000

08001b64 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b6a:	f107 030c 	add.w	r3, r7, #12
 8001b6e:	2224      	movs	r2, #36	; 0x24
 8001b70:	2100      	movs	r1, #0
 8001b72:	4618      	mov	r0, r3
 8001b74:	f004 fb80 	bl	8006278 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
 8001b7e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b80:	4b20      	ldr	r3, [pc, #128]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001b82:	4a21      	ldr	r2, [pc, #132]	; (8001c08 <MX_TIM3_Init+0xa4>)
 8001b84:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001b86:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8c:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001b94:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b98:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba0:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001baa:	2300      	movs	r3, #0
 8001bac:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001bb6:	230f      	movs	r3, #15
 8001bb8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 8001bc6:	230f      	movs	r3, #15
 8001bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001bca:	f107 030c 	add.w	r3, r7, #12
 8001bce:	4619      	mov	r1, r3
 8001bd0:	480c      	ldr	r0, [pc, #48]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001bd2:	f002 fcdf 	bl	8004594 <HAL_TIM_Encoder_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bdc:	f000 fa52 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be8:	1d3b      	adds	r3, r7, #4
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <MX_TIM3_Init+0xa0>)
 8001bee:	f003 fbef 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001bf8:	f000 fa44 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bfc:	bf00      	nop
 8001bfe:	3730      	adds	r7, #48	; 0x30
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000460 	.word	0x20000460
 8001c08:	40000400 	.word	0x40000400

08001c0c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08e      	sub	sp, #56	; 0x38
 8001c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c20:	f107 0320 	add.w	r3, r7, #32
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c2a:	1d3b      	adds	r3, r7, #4
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	605a      	str	r2, [r3, #4]
 8001c32:	609a      	str	r2, [r3, #8]
 8001c34:	60da      	str	r2, [r3, #12]
 8001c36:	611a      	str	r2, [r3, #16]
 8001c38:	615a      	str	r2, [r3, #20]
 8001c3a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c3c:	4b2c      	ldr	r3, [pc, #176]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c3e:	4a2d      	ldr	r2, [pc, #180]	; (8001cf4 <MX_TIM4_Init+0xe8>)
 8001c40:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 249;
 8001c42:	4b2b      	ldr	r3, [pc, #172]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c44:	22f9      	movs	r2, #249	; 0xf9
 8001c46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c48:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 99;
 8001c4e:	4b28      	ldr	r3, [pc, #160]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c50:	2263      	movs	r2, #99	; 0x63
 8001c52:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c54:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c5a:	4b25      	ldr	r3, [pc, #148]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001c60:	4823      	ldr	r0, [pc, #140]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c62:	f002 fb01 	bl	8004268 <HAL_TIM_Base_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8001c6c:	f000 fa0a 	bl	8002084 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c74:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001c76:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	481c      	ldr	r0, [pc, #112]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c7e:	f002 ff21 	bl	8004ac4 <HAL_TIM_ConfigClockSource>
 8001c82:	4603      	mov	r3, r0
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d001      	beq.n	8001c8c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8001c88:	f000 f9fc 	bl	8002084 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001c8c:	4818      	ldr	r0, [pc, #96]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001c8e:	f002 fb3a 	bl	8004306 <HAL_TIM_PWM_Init>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8001c98:	f000 f9f4 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ca4:	f107 0320 	add.w	r3, r7, #32
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4811      	ldr	r0, [pc, #68]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001cac:	f003 fb90 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001cb6:	f000 f9e5 	bl	8002084 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001cba:	2360      	movs	r3, #96	; 0x60
 8001cbc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cca:	1d3b      	adds	r3, r7, #4
 8001ccc:	2200      	movs	r2, #0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4807      	ldr	r0, [pc, #28]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001cd2:	f002 fe31 	bl	8004938 <HAL_TIM_PWM_ConfigChannel>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001cdc:	f000 f9d2 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ce0:	4803      	ldr	r0, [pc, #12]	; (8001cf0 <MX_TIM4_Init+0xe4>)
 8001ce2:	f000 fd55 	bl	8002790 <HAL_TIM_MspPostInit>

}
 8001ce6:	bf00      	nop
 8001ce8:	3738      	adds	r7, #56	; 0x38
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	20000358 	.word	0x20000358
 8001cf4:	40000800 	.word	0x40000800

08001cf8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cfe:	463b      	mov	r3, r7
 8001d00:	2200      	movs	r2, #0
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d06:	4b15      	ldr	r3, [pc, #84]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d08:	4a15      	ldr	r2, [pc, #84]	; (8001d60 <MX_TIM6_Init+0x68>)
 8001d0a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 999;
 8001d0c:	4b13      	ldr	r3, [pc, #76]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d12:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b11      	ldr	r3, [pc, #68]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001d1a:	4b10      	ldr	r3, [pc, #64]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d1c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d20:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d28:	480c      	ldr	r0, [pc, #48]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d2a:	f002 fa9d 	bl	8004268 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001d34:	f000 f9a6 	bl	8002084 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d40:	463b      	mov	r3, r7
 8001d42:	4619      	mov	r1, r3
 8001d44:	4805      	ldr	r0, [pc, #20]	; (8001d5c <MX_TIM6_Init+0x64>)
 8001d46:	f003 fb43 	bl	80053d0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001d50:	f000 f998 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d54:	bf00      	nop
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000580 	.word	0x20000580
 8001d60:	40001000 	.word	0x40001000

08001d64 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001d68:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <MX_TIM10_Init+0x40>)
 8001d6a:	4a0f      	ldr	r2, [pc, #60]	; (8001da8 <MX_TIM10_Init+0x44>)
 8001d6c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 9999;
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	; (8001da4 <MX_TIM10_Init+0x40>)
 8001d70:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d74:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d76:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <MX_TIM10_Init+0x40>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 2499;
 8001d7c:	4b09      	ldr	r3, [pc, #36]	; (8001da4 <MX_TIM10_Init+0x40>)
 8001d7e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 8001d82:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <MX_TIM10_Init+0x40>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d8a:	4b06      	ldr	r3, [pc, #24]	; (8001da4 <MX_TIM10_Init+0x40>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001d90:	4804      	ldr	r0, [pc, #16]	; (8001da4 <MX_TIM10_Init+0x40>)
 8001d92:	f002 fa69 	bl	8004268 <HAL_TIM_Base_Init>
 8001d96:	4603      	mov	r3, r0
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001d9c:	f000 f972 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001da0:	bf00      	nop
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000398 	.word	0x20000398
 8001da8:	40014400 	.word	0x40014400

08001dac <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001db0:	4b0e      	ldr	r3, [pc, #56]	; (8001dec <MX_TIM11_Init+0x40>)
 8001db2:	4a0f      	ldr	r2, [pc, #60]	; (8001df0 <MX_TIM11_Init+0x44>)
 8001db4:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 999;
 8001db6:	4b0d      	ldr	r3, [pc, #52]	; (8001dec <MX_TIM11_Init+0x40>)
 8001db8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001dbc:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <MX_TIM11_Init+0x40>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 4999;
 8001dc4:	4b09      	ldr	r3, [pc, #36]	; (8001dec <MX_TIM11_Init+0x40>)
 8001dc6:	f241 3287 	movw	r2, #4999	; 0x1387
 8001dca:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dcc:	4b07      	ldr	r3, [pc, #28]	; (8001dec <MX_TIM11_Init+0x40>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd2:	4b06      	ldr	r3, [pc, #24]	; (8001dec <MX_TIM11_Init+0x40>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001dd8:	4804      	ldr	r0, [pc, #16]	; (8001dec <MX_TIM11_Init+0x40>)
 8001dda:	f002 fa45 	bl	8004268 <HAL_TIM_Base_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001de4:	f000 f94e 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001de8:	bf00      	nop
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000540 	.word	0x20000540
 8001df0:	40014800 	.word	0x40014800

08001df4 <MX_TIM13_Init>:
  * @brief TIM13 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM13_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM13_Init 0 */

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  htim13.Instance = TIM13;
 8001df8:	4b0e      	ldr	r3, [pc, #56]	; (8001e34 <MX_TIM13_Init+0x40>)
 8001dfa:	4a0f      	ldr	r2, [pc, #60]	; (8001e38 <MX_TIM13_Init+0x44>)
 8001dfc:	601a      	str	r2, [r3, #0]
  htim13.Init.Prescaler = 999;
 8001dfe:	4b0d      	ldr	r3, [pc, #52]	; (8001e34 <MX_TIM13_Init+0x40>)
 8001e00:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001e04:	605a      	str	r2, [r3, #4]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e06:	4b0b      	ldr	r3, [pc, #44]	; (8001e34 <MX_TIM13_Init+0x40>)
 8001e08:	2200      	movs	r2, #0
 8001e0a:	609a      	str	r2, [r3, #8]
  htim13.Init.Period = 99;
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <MX_TIM13_Init+0x40>)
 8001e0e:	2263      	movs	r2, #99	; 0x63
 8001e10:	60da      	str	r2, [r3, #12]
  htim13.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e12:	4b08      	ldr	r3, [pc, #32]	; (8001e34 <MX_TIM13_Init+0x40>)
 8001e14:	2200      	movs	r2, #0
 8001e16:	611a      	str	r2, [r3, #16]
  htim13.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e18:	4b06      	ldr	r3, [pc, #24]	; (8001e34 <MX_TIM13_Init+0x40>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim13) != HAL_OK)
 8001e1e:	4805      	ldr	r0, [pc, #20]	; (8001e34 <MX_TIM13_Init+0x40>)
 8001e20:	f002 fa22 	bl	8004268 <HAL_TIM_Base_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM13_Init+0x3a>
  {
    Error_Handler();
 8001e2a:	f000 f92b 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8001e2e:	bf00      	nop
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	20000500 	.word	0x20000500
 8001e38:	40001c00 	.word	0x40001c00

08001e3c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e40:	4b11      	ldr	r3, [pc, #68]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e42:	4a12      	ldr	r2, [pc, #72]	; (8001e8c <MX_USART2_UART_Init+0x50>)
 8001e44:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e46:	4b10      	ldr	r3, [pc, #64]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e4c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e4e:	4b0e      	ldr	r3, [pc, #56]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e54:	4b0c      	ldr	r3, [pc, #48]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e5a:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e60:	4b09      	ldr	r3, [pc, #36]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e62:	220c      	movs	r2, #12
 8001e64:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e6c:	4b06      	ldr	r3, [pc, #24]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e72:	4805      	ldr	r0, [pc, #20]	; (8001e88 <MX_USART2_UART_Init+0x4c>)
 8001e74:	f003 fb3c 	bl	80054f0 <HAL_UART_Init>
 8001e78:	4603      	mov	r3, r0
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d001      	beq.n	8001e82 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e7e:	f000 f901 	bl	8002084 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	200006c0 	.word	0x200006c0
 8001e8c:	40004400 	.word	0x40004400

08001e90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	607b      	str	r3, [r7, #4]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	; (8001efc <MX_DMA_Init+0x6c>)
 8001e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9e:	4a17      	ldr	r2, [pc, #92]	; (8001efc <MX_DMA_Init+0x6c>)
 8001ea0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ea6:	4b15      	ldr	r3, [pc, #84]	; (8001efc <MX_DMA_Init+0x6c>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eae:	607b      	str	r3, [r7, #4]
 8001eb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	200b      	movs	r0, #11
 8001eb8:	f000 ffed 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001ebc:	200b      	movs	r0, #11
 8001ebe:	f001 f806 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	200d      	movs	r0, #13
 8001ec8:	f000 ffe5 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001ecc:	200d      	movs	r0, #13
 8001ece:	f000 fffe 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	2100      	movs	r1, #0
 8001ed6:	2010      	movs	r0, #16
 8001ed8:	f000 ffdd 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001edc:	2010      	movs	r0, #16
 8001ede:	f000 fff6 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2011      	movs	r0, #17
 8001ee8:	f000 ffd5 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001eec:	2011      	movs	r0, #17
 8001eee:	f000 ffee 	bl	8002ece <HAL_NVIC_EnableIRQ>

}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023800 	.word	0x40023800

08001f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b08c      	sub	sp, #48	; 0x30
 8001f04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f06:	f107 031c 	add.w	r3, r7, #28
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	601a      	str	r2, [r3, #0]
 8001f0e:	605a      	str	r2, [r3, #4]
 8001f10:	609a      	str	r2, [r3, #8]
 8001f12:	60da      	str	r2, [r3, #12]
 8001f14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	4b53      	ldr	r3, [pc, #332]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1e:	4a52      	ldr	r2, [pc, #328]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f24:	6313      	str	r3, [r2, #48]	; 0x30
 8001f26:	4b50      	ldr	r3, [pc, #320]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f32:	2300      	movs	r3, #0
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	4b4c      	ldr	r3, [pc, #304]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f3a:	4a4b      	ldr	r2, [pc, #300]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f3c:	f043 0301 	orr.w	r3, r3, #1
 8001f40:	6313      	str	r3, [r2, #48]	; 0x30
 8001f42:	4b49      	ldr	r3, [pc, #292]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b45      	ldr	r3, [pc, #276]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a44      	ldr	r2, [pc, #272]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f58:	f043 0310 	orr.w	r3, r3, #16
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b42      	ldr	r3, [pc, #264]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0310 	and.w	r3, r3, #16
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b3e      	ldr	r3, [pc, #248]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a3d      	ldr	r2, [pc, #244]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f74:	f043 0308 	orr.w	r3, r3, #8
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b3b      	ldr	r3, [pc, #236]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0308 	and.w	r3, r3, #8
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b37      	ldr	r3, [pc, #220]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a36      	ldr	r2, [pc, #216]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f90:	f043 0304 	orr.w	r3, r3, #4
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b34      	ldr	r3, [pc, #208]	; (8002068 <MX_GPIO_Init+0x168>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0304 	and.w	r3, r3, #4
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b30      	ldr	r3, [pc, #192]	; (8002068 <MX_GPIO_Init+0x168>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a2f      	ldr	r2, [pc, #188]	; (8002068 <MX_GPIO_Init+0x168>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b2d      	ldr	r3, [pc, #180]	; (8002068 <MX_GPIO_Init+0x168>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_G_Pin|LED_O_Pin|LED_R_Pin|LED_B_Pin, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001fc4:	4829      	ldr	r0, [pc, #164]	; (800206c <MX_GPIO_Init+0x16c>)
 8001fc6:	f001 fcc7 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MOTOR_IN2_Pin|MOTOR_IN1_Pin, GPIO_PIN_RESET);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2130      	movs	r1, #48	; 0x30
 8001fce:	4828      	ldr	r0, [pc, #160]	; (8002070 <MX_GPIO_Init+0x170>)
 8001fd0:	f001 fcc2 	bl	8003958 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fd8:	4b26      	ldr	r3, [pc, #152]	; (8002074 <MX_GPIO_Init+0x174>)
 8001fda:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8001fe0:	f107 031c 	add.w	r3, r7, #28
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	4824      	ldr	r0, [pc, #144]	; (8002078 <MX_GPIO_Init+0x178>)
 8001fe8:	f001 fb1c 	bl	8003624 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_G_Pin LED_O_Pin LED_R_Pin LED_B_Pin */
  GPIO_InitStruct.Pin = LED_G_Pin|LED_O_Pin|LED_R_Pin|LED_B_Pin;
 8001fec:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8001ff0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ffe:	f107 031c 	add.w	r3, r7, #28
 8002002:	4619      	mov	r1, r3
 8002004:	4819      	ldr	r0, [pc, #100]	; (800206c <MX_GPIO_Init+0x16c>)
 8002006:	f001 fb0d 	bl	8003624 <HAL_GPIO_Init>

  /*Configure GPIO pins : START_POS_Pin END_POS_Pin */
  GPIO_InitStruct.Pin = START_POS_Pin|END_POS_Pin;
 800200a:	f44f 7320 	mov.w	r3, #640	; 0x280
 800200e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002010:	4b1a      	ldr	r3, [pc, #104]	; (800207c <MX_GPIO_Init+0x17c>)
 8002012:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002018:	f107 031c 	add.w	r3, r7, #28
 800201c:	4619      	mov	r1, r3
 800201e:	4818      	ldr	r0, [pc, #96]	; (8002080 <MX_GPIO_Init+0x180>)
 8002020:	f001 fb00 	bl	8003624 <HAL_GPIO_Init>

  /*Configure GPIO pins : MOTOR_IN2_Pin MOTOR_IN1_Pin */
  GPIO_InitStruct.Pin = MOTOR_IN2_Pin|MOTOR_IN1_Pin;
 8002024:	2330      	movs	r3, #48	; 0x30
 8002026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002028:	2301      	movs	r3, #1
 800202a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202c:	2300      	movs	r3, #0
 800202e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002030:	2300      	movs	r3, #0
 8002032:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002034:	f107 031c 	add.w	r3, r7, #28
 8002038:	4619      	mov	r1, r3
 800203a:	480d      	ldr	r0, [pc, #52]	; (8002070 <MX_GPIO_Init+0x170>)
 800203c:	f001 faf2 	bl	8003624 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002040:	2200      	movs	r2, #0
 8002042:	2100      	movs	r1, #0
 8002044:	2006      	movs	r0, #6
 8002046:	f000 ff26 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800204a:	2006      	movs	r0, #6
 800204c:	f000 ff3f 	bl	8002ece <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002050:	2200      	movs	r2, #0
 8002052:	2100      	movs	r1, #0
 8002054:	2017      	movs	r0, #23
 8002056:	f000 ff1e 	bl	8002e96 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800205a:	2017      	movs	r0, #23
 800205c:	f000 ff37 	bl	8002ece <HAL_NVIC_EnableIRQ>

}
 8002060:	bf00      	nop
 8002062:	3730      	adds	r7, #48	; 0x30
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40023800 	.word	0x40023800
 800206c:	40020c00 	.word	0x40020c00
 8002070:	40020400 	.word	0x40020400
 8002074:	10210000 	.word	0x10210000
 8002078:	40020000 	.word	0x40020000
 800207c:	10110000 	.word	0x10110000
 8002080:	40020800 	.word	0x40020800

08002084 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	0000      	movs	r0, r0
 8002094:	0000      	movs	r0, r0
	...

08002098 <pid_init>:
 *  Created on: May 17, 2020
 *      Author: Mike
 */
#include "pid.h"

void pid_init(cpid_t *pid, float p, float i, float d, double dt_ms) {
 8002098:	b590      	push	{r4, r7, lr}
 800209a:	b087      	sub	sp, #28
 800209c:	af00      	add	r7, sp, #0
 800209e:	6178      	str	r0, [r7, #20]
 80020a0:	ed87 0a04 	vstr	s0, [r7, #16]
 80020a4:	edc7 0a03 	vstr	s1, [r7, #12]
 80020a8:	ed87 1a02 	vstr	s2, [r7, #8]
 80020ac:	ed87 2b00 	vstr	d2, [r7]
	pid->p = p;
 80020b0:	6938      	ldr	r0, [r7, #16]
 80020b2:	f7fe fa59 	bl	8000568 <__aeabi_f2d>
 80020b6:	4603      	mov	r3, r0
 80020b8:	460c      	mov	r4, r1
 80020ba:	697a      	ldr	r2, [r7, #20]
 80020bc:	e9c2 3400 	strd	r3, r4, [r2]
	pid->i = i;
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f7fe fa51 	bl	8000568 <__aeabi_f2d>
 80020c6:	4603      	mov	r3, r0
 80020c8:	460c      	mov	r4, r1
 80020ca:	697a      	ldr	r2, [r7, #20]
 80020cc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	pid->d = d;
 80020d0:	68b8      	ldr	r0, [r7, #8]
 80020d2:	f7fe fa49 	bl	8000568 <__aeabi_f2d>
 80020d6:	4603      	mov	r3, r0
 80020d8:	460c      	mov	r4, r1
 80020da:	697a      	ldr	r2, [r7, #20]
 80020dc:	e9c2 3404 	strd	r3, r4, [r2, #16]

	pid->p_max = INT32_MAX;
 80020e0:	697a      	ldr	r2, [r7, #20]
 80020e2:	a423      	add	r4, pc, #140	; (adr r4, 8002170 <pid_init+0xd8>)
 80020e4:	e9d4 3400 	ldrd	r3, r4, [r4]
 80020e8:	e9c2 3406 	strd	r3, r4, [r2, #24]
	pid->p_min = INT32_MIN;
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	f04f 0300 	mov.w	r3, #0
 80020f2:	4c21      	ldr	r4, [pc, #132]	; (8002178 <pid_init+0xe0>)
 80020f4:	e9c2 340c 	strd	r3, r4, [r2, #48]	; 0x30

	pid->i_max = INT32_MAX;
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	a41d      	add	r4, pc, #116	; (adr r4, 8002170 <pid_init+0xd8>)
 80020fc:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002100:	e9c2 3408 	strd	r3, r4, [r2, #32]
	pid->i_min = INT32_MIN;
 8002104:	697a      	ldr	r2, [r7, #20]
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	4c1b      	ldr	r4, [pc, #108]	; (8002178 <pid_init+0xe0>)
 800210c:	e9c2 340e 	strd	r3, r4, [r2, #56]	; 0x38

	pid->d_max = INT32_MAX;
 8002110:	697a      	ldr	r2, [r7, #20]
 8002112:	a417      	add	r4, pc, #92	; (adr r4, 8002170 <pid_init+0xd8>)
 8002114:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002118:	e9c2 340a 	strd	r3, r4, [r2, #40]	; 0x28
	pid->d_min = INT32_MIN;
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	4c15      	ldr	r4, [pc, #84]	; (8002178 <pid_init+0xe0>)
 8002124:	e9c2 3410 	strd	r3, r4, [r2, #64]	; 0x40

	pid->e_last = 0;
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	f04f 0300 	mov.w	r3, #0
 800212e:	f04f 0400 	mov.w	r4, #0
 8002132:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	pid->e_sum = 0;
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	f04f 0300 	mov.w	r3, #0
 800213c:	f04f 0400 	mov.w	r4, #0
 8002140:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

	pid->total_max = INT32_MAX;
 8002144:	697a      	ldr	r2, [r7, #20]
 8002146:	a40a      	add	r4, pc, #40	; (adr r4, 8002170 <pid_init+0xd8>)
 8002148:	e9d4 3400 	ldrd	r3, r4, [r4]
 800214c:	e9c2 341a 	strd	r3, r4, [r2, #104]	; 0x68
	pid->total_min = INT32_MIN;
 8002150:	697a      	ldr	r2, [r7, #20]
 8002152:	f04f 0300 	mov.w	r3, #0
 8002156:	4c08      	ldr	r4, [pc, #32]	; (8002178 <pid_init+0xe0>)
 8002158:	e9c2 341c 	strd	r3, r4, [r2, #112]	; 0x70

	pid->dt_ms = dt_ms;
 800215c:	697a      	ldr	r2, [r7, #20]
 800215e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002162:	e9c2 3420 	strd	r3, r4, [r2, #128]	; 0x80
}
 8002166:	bf00      	nop
 8002168:	371c      	adds	r7, #28
 800216a:	46bd      	mov	sp, r7
 800216c:	bd90      	pop	{r4, r7, pc}
 800216e:	bf00      	nop
 8002170:	ffc00000 	.word	0xffc00000
 8002174:	41dfffff 	.word	0x41dfffff
 8002178:	c1e00000 	.word	0xc1e00000

0800217c <pid_calc>:

double pid_calc(cpid_t *pid, double mv, double dv) {
 800217c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800217e:	b091      	sub	sp, #68	; 0x44
 8002180:	af00      	add	r7, sp, #0
 8002182:	6178      	str	r0, [r7, #20]
 8002184:	ed87 0b02 	vstr	d0, [r7, #8]
 8002188:	ed87 1b00 	vstr	d1, [r7]

	double p, i, d, e, total;
	pid->mv = mv;
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002192:	e9c2 3414 	strd	r3, r4, [r2, #80]	; 0x50
	pid->dv = dv;
 8002196:	697a      	ldr	r2, [r7, #20]
 8002198:	e9d7 3400 	ldrd	r3, r4, [r7]
 800219c:	e9c2 3412 	strd	r3, r4, [r2, #72]	; 0x48

//WYLICZANIE BLEDU
	e = dv - mv;
 80021a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021a4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80021a8:	f7fe f87e 	bl	80002a8 <__aeabi_dsub>
 80021ac:	4603      	mov	r3, r0
 80021ae:	460c      	mov	r4, r1
 80021b0:	e9c7 3406 	strd	r3, r4, [r7, #24]
	//if(e > -2 && e < 2) return 0;

//CZLON PROPORCJONALNY
	p = pid->p * e;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	e9d3 3400 	ldrd	r3, r4, [r3]
 80021ba:	461a      	mov	r2, r3
 80021bc:	4623      	mov	r3, r4
 80021be:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80021c2:	f7fe fa29 	bl	8000618 <__aeabi_dmul>
 80021c6:	4603      	mov	r3, r0
 80021c8:	460c      	mov	r4, r1
 80021ca:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
	if (p > pid->p_max)
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80021d4:	461a      	mov	r2, r3
 80021d6:	4623      	mov	r3, r4
 80021d8:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80021dc:	f7fe fcac 	bl	8000b38 <__aeabi_dcmpgt>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d005      	beq.n	80021f2 <pid_calc+0x76>
		p = pid->p_max;
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	e9d3 3406 	ldrd	r3, r4, [r3, #24]
 80021ec:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
 80021f0:	e010      	b.n	8002214 <pid_calc+0x98>
	else if (p < pid->p_min)
 80021f2:	697b      	ldr	r3, [r7, #20]
 80021f4:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 80021f8:	461a      	mov	r2, r3
 80021fa:	4623      	mov	r3, r4
 80021fc:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002200:	f7fe fc7c 	bl	8000afc <__aeabi_dcmplt>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d004      	beq.n	8002214 <pid_calc+0x98>
		p = pid->p_min;
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	e9d3 340c 	ldrd	r3, r4, [r3, #48]	; 0x30
 8002210:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38

//CZLON CALKUJACY
	i=pid->e_sum;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	e9d3 3418 	ldrd	r3, r4, [r3, #96]	; 0x60
 800221a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	i += pid->i * pid->dt_ms * e / 1000;
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002224:	697b      	ldr	r3, [r7, #20]
 8002226:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 800222a:	461a      	mov	r2, r3
 800222c:	4623      	mov	r3, r4
 800222e:	f7fe f9f3 	bl	8000618 <__aeabi_dmul>
 8002232:	4603      	mov	r3, r0
 8002234:	460c      	mov	r4, r1
 8002236:	4618      	mov	r0, r3
 8002238:	4621      	mov	r1, r4
 800223a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800223e:	f7fe f9eb 	bl	8000618 <__aeabi_dmul>
 8002242:	4603      	mov	r3, r0
 8002244:	460c      	mov	r4, r1
 8002246:	4618      	mov	r0, r3
 8002248:	4621      	mov	r1, r4
 800224a:	f04f 0200 	mov.w	r2, #0
 800224e:	4b68      	ldr	r3, [pc, #416]	; (80023f0 <pid_calc+0x274>)
 8002250:	f7fe fb0c 	bl	800086c <__aeabi_ddiv>
 8002254:	4603      	mov	r3, r0
 8002256:	460c      	mov	r4, r1
 8002258:	461a      	mov	r2, r3
 800225a:	4623      	mov	r3, r4
 800225c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8002260:	f7fe f824 	bl	80002ac <__adddf3>
 8002264:	4603      	mov	r3, r0
 8002266:	460c      	mov	r4, r1
 8002268:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	if (i > pid->i_max)
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 8002272:	461a      	mov	r2, r3
 8002274:	4623      	mov	r3, r4
 8002276:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800227a:	f7fe fc5d 	bl	8000b38 <__aeabi_dcmpgt>
 800227e:	4603      	mov	r3, r0
 8002280:	2b00      	cmp	r3, #0
 8002282:	d005      	beq.n	8002290 <pid_calc+0x114>
		i = pid->i_max;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	e9d3 3408 	ldrd	r3, r4, [r3, #32]
 800228a:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
 800228e:	e010      	b.n	80022b2 <pid_calc+0x136>
	else if (i < pid->i_min)
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 8002296:	461a      	mov	r2, r3
 8002298:	4623      	mov	r3, r4
 800229a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800229e:	f7fe fc2d 	bl	8000afc <__aeabi_dcmplt>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <pid_calc+0x136>
		i = pid->i_min;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	e9d3 340e 	ldrd	r3, r4, [r3, #56]	; 0x38
 80022ae:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	pid->e_sum=i;
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80022b8:	e9c2 3418 	strd	r3, r4, [r2, #96]	; 0x60

//CZLON ROZNICZKUJACEGO
	d = 1000 * pid->d * (e - pid->e_last) / pid->dt_ms;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 80022c2:	f04f 0200 	mov.w	r2, #0
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <pid_calc+0x274>)
 80022c8:	f7fe f9a6 	bl	8000618 <__aeabi_dmul>
 80022cc:	4603      	mov	r3, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	461d      	mov	r5, r3
 80022d2:	4626      	mov	r6, r4
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	e9d3 3416 	ldrd	r3, r4, [r3, #88]	; 0x58
 80022da:	461a      	mov	r2, r3
 80022dc:	4623      	mov	r3, r4
 80022de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80022e2:	f7fd ffe1 	bl	80002a8 <__aeabi_dsub>
 80022e6:	4603      	mov	r3, r0
 80022e8:	460c      	mov	r4, r1
 80022ea:	461a      	mov	r2, r3
 80022ec:	4623      	mov	r3, r4
 80022ee:	4628      	mov	r0, r5
 80022f0:	4631      	mov	r1, r6
 80022f2:	f7fe f991 	bl	8000618 <__aeabi_dmul>
 80022f6:	4603      	mov	r3, r0
 80022f8:	460c      	mov	r4, r1
 80022fa:	4618      	mov	r0, r3
 80022fc:	4621      	mov	r1, r4
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	e9d3 3420 	ldrd	r3, r4, [r3, #128]	; 0x80
 8002304:	461a      	mov	r2, r3
 8002306:	4623      	mov	r3, r4
 8002308:	f7fe fab0 	bl	800086c <__aeabi_ddiv>
 800230c:	4603      	mov	r3, r0
 800230e:	460c      	mov	r4, r1
 8002310:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
	if (d > pid->d_max)
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 800231a:	461a      	mov	r2, r3
 800231c:	4623      	mov	r3, r4
 800231e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002322:	f7fe fc09 	bl	8000b38 <__aeabi_dcmpgt>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <pid_calc+0x1bc>
		d = pid->d_max;
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	e9d3 340a 	ldrd	r3, r4, [r3, #40]	; 0x28
 8002332:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28
 8002336:	e010      	b.n	800235a <pid_calc+0x1de>
	else if (d < pid->d_min)
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 800233e:	461a      	mov	r2, r3
 8002340:	4623      	mov	r3, r4
 8002342:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002346:	f7fe fbd9 	bl	8000afc <__aeabi_dcmplt>
 800234a:	4603      	mov	r3, r0
 800234c:	2b00      	cmp	r3, #0
 800234e:	d004      	beq.n	800235a <pid_calc+0x1de>
		d = pid->d_min;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	e9d3 3410 	ldrd	r3, r4, [r3, #64]	; 0x40
 8002356:	e9c7 340a 	strd	r3, r4, [r7, #40]	; 0x28

//Sumowanie
	total = p + i + d;
 800235a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800235e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8002362:	f7fd ffa3 	bl	80002ac <__adddf3>
 8002366:	4603      	mov	r3, r0
 8002368:	460c      	mov	r4, r1
 800236a:	461a      	mov	r2, r3
 800236c:	4623      	mov	r3, r4
 800236e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002372:	f7fd ff9b 	bl	80002ac <__adddf3>
 8002376:	4603      	mov	r3, r0
 8002378:	460c      	mov	r4, r1
 800237a:	e9c7 3408 	strd	r3, r4, [r7, #32]
	if (total > pid->total_max)
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 8002384:	461a      	mov	r2, r3
 8002386:	4623      	mov	r3, r4
 8002388:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800238c:	f7fe fbd4 	bl	8000b38 <__aeabi_dcmpgt>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <pid_calc+0x226>
		total = pid->total_max;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	e9d3 341a 	ldrd	r3, r4, [r3, #104]	; 0x68
 800239c:	e9c7 3408 	strd	r3, r4, [r7, #32]
 80023a0:	e010      	b.n	80023c4 <pid_calc+0x248>
	else if (total < pid->total_min)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80023a8:	461a      	mov	r2, r3
 80023aa:	4623      	mov	r3, r4
 80023ac:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023b0:	f7fe fba4 	bl	8000afc <__aeabi_dcmplt>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <pid_calc+0x248>
		total = pid->total_min;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	e9d3 341c 	ldrd	r3, r4, [r3, #112]	; 0x70
 80023c0:	e9c7 3408 	strd	r3, r4, [r7, #32]

	pid->control = total;
 80023c4:	697a      	ldr	r2, [r7, #20]
 80023c6:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80023ca:	e9c2 341e 	strd	r3, r4, [r2, #120]	; 0x78
	pid->e_last = e;
 80023ce:	697a      	ldr	r2, [r7, #20]
 80023d0:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 80023d4:	e9c2 3416 	strd	r3, r4, [r2, #88]	; 0x58
	return pid->control;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	e9d3 341e 	ldrd	r3, r4, [r3, #120]	; 0x78
 80023de:	ec44 3b17 	vmov	d7, r3, r4
}
 80023e2:	eeb0 0a47 	vmov.f32	s0, s14
 80023e6:	eef0 0a67 	vmov.f32	s1, s15
 80023ea:	3744      	adds	r7, #68	; 0x44
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023f0:	408f4000 	.word	0x408f4000

080023f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	607b      	str	r3, [r7, #4]
 80023fe:	4b10      	ldr	r3, [pc, #64]	; (8002440 <HAL_MspInit+0x4c>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	4a0f      	ldr	r2, [pc, #60]	; (8002440 <HAL_MspInit+0x4c>)
 8002404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002408:	6453      	str	r3, [r2, #68]	; 0x44
 800240a:	4b0d      	ldr	r3, [pc, #52]	; (8002440 <HAL_MspInit+0x4c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002412:	607b      	str	r3, [r7, #4]
 8002414:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	603b      	str	r3, [r7, #0]
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_MspInit+0x4c>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_MspInit+0x4c>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b06      	ldr	r3, [pc, #24]	; (8002440 <HAL_MspInit+0x4c>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	603b      	str	r3, [r7, #0]
 8002430:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002432:	bf00      	nop
 8002434:	370c      	adds	r7, #12
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800

08002444 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800244c:	f107 031c 	add.w	r3, r7, #28
 8002450:	2200      	movs	r2, #0
 8002452:	601a      	str	r2, [r3, #0]
 8002454:	605a      	str	r2, [r3, #4]
 8002456:	609a      	str	r2, [r3, #8]
 8002458:	60da      	str	r2, [r3, #12]
 800245a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a5a      	ldr	r2, [pc, #360]	; (80025cc <HAL_TIM_Encoder_MspInit+0x188>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d145      	bne.n	80024f2 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
 800246a:	4b59      	ldr	r3, [pc, #356]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 800246c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800246e:	4a58      	ldr	r2, [pc, #352]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002470:	f043 0301 	orr.w	r3, r3, #1
 8002474:	6453      	str	r3, [r2, #68]	; 0x44
 8002476:	4b56      	ldr	r3, [pc, #344]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	61bb      	str	r3, [r7, #24]
 8002480:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002482:	2300      	movs	r3, #0
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	4b52      	ldr	r3, [pc, #328]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248a:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 800248c:	f043 0310 	orr.w	r3, r3, #16
 8002490:	6313      	str	r3, [r2, #48]	; 0x30
 8002492:	4b4f      	ldr	r3, [pc, #316]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f003 0310 	and.w	r3, r3, #16
 800249a:	617b      	str	r3, [r7, #20]
 800249c:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11;
 800249e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80024a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	2302      	movs	r3, #2
 80024a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a8:	2300      	movs	r3, #0
 80024aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ac:	2300      	movs	r3, #0
 80024ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80024b0:	2301      	movs	r3, #1
 80024b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024b4:	f107 031c 	add.w	r3, r7, #28
 80024b8:	4619      	mov	r1, r3
 80024ba:	4846      	ldr	r0, [pc, #280]	; (80025d4 <HAL_TIM_Encoder_MspInit+0x190>)
 80024bc:	f001 f8b2 	bl	8003624 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2100      	movs	r1, #0
 80024c4:	2018      	movs	r0, #24
 80024c6:	f000 fce6 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80024ca:	2018      	movs	r0, #24
 80024cc:	f000 fcff 	bl	8002ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80024d0:	2200      	movs	r2, #0
 80024d2:	2100      	movs	r1, #0
 80024d4:	2019      	movs	r0, #25
 80024d6:	f000 fcde 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80024da:	2019      	movs	r0, #25
 80024dc:	f000 fcf7 	bl	8002ece <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80024e0:	2200      	movs	r2, #0
 80024e2:	2100      	movs	r1, #0
 80024e4:	201a      	movs	r0, #26
 80024e6:	f000 fcd6 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 80024ea:	201a      	movs	r0, #26
 80024ec:	f000 fcef 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024f0:	e068      	b.n	80025c4 <HAL_TIM_Encoder_MspInit+0x180>
  else if(htim_encoder->Instance==TIM3)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a38      	ldr	r2, [pc, #224]	; (80025d8 <HAL_TIM_Encoder_MspInit+0x194>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d163      	bne.n	80025c4 <HAL_TIM_Encoder_MspInit+0x180>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024fc:	2300      	movs	r3, #0
 80024fe:	613b      	str	r3, [r7, #16]
 8002500:	4b33      	ldr	r3, [pc, #204]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002504:	4a32      	ldr	r2, [pc, #200]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002506:	f043 0302 	orr.w	r3, r3, #2
 800250a:	6413      	str	r3, [r2, #64]	; 0x40
 800250c:	4b30      	ldr	r3, [pc, #192]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 800250e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	4b2c      	ldr	r3, [pc, #176]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 800251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002520:	4a2b      	ldr	r2, [pc, #172]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 8002522:	f043 0301 	orr.w	r3, r3, #1
 8002526:	6313      	str	r3, [r2, #48]	; 0x30
 8002528:	4b29      	ldr	r3, [pc, #164]	; (80025d0 <HAL_TIM_Encoder_MspInit+0x18c>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f003 0301 	and.w	r3, r3, #1
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002534:	23c0      	movs	r3, #192	; 0xc0
 8002536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002538:	2302      	movs	r3, #2
 800253a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800253c:	2301      	movs	r3, #1
 800253e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002540:	2300      	movs	r3, #0
 8002542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002544:	2302      	movs	r3, #2
 8002546:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	4619      	mov	r1, r3
 800254e:	4823      	ldr	r0, [pc, #140]	; (80025dc <HAL_TIM_Encoder_MspInit+0x198>)
 8002550:	f001 f868 	bl	8003624 <HAL_GPIO_Init>
    hdma_tim3_ch4_up.Instance = DMA1_Stream2;
 8002554:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002556:	4a23      	ldr	r2, [pc, #140]	; (80025e4 <HAL_TIM_Encoder_MspInit+0x1a0>)
 8002558:	601a      	str	r2, [r3, #0]
    hdma_tim3_ch4_up.Init.Channel = DMA_CHANNEL_5;
 800255a:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 800255c:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002560:	605a      	str	r2, [r3, #4]
    hdma_tim3_ch4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002562:	4b1f      	ldr	r3, [pc, #124]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002564:	2200      	movs	r2, #0
 8002566:	609a      	str	r2, [r3, #8]
    hdma_tim3_ch4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 800256a:	2200      	movs	r2, #0
 800256c:	60da      	str	r2, [r3, #12]
    hdma_tim3_ch4_up.Init.MemInc = DMA_MINC_ENABLE;
 800256e:	4b1c      	ldr	r3, [pc, #112]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002574:	611a      	str	r2, [r3, #16]
    hdma_tim3_ch4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002576:	4b1a      	ldr	r3, [pc, #104]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002578:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800257c:	615a      	str	r2, [r3, #20]
    hdma_tim3_ch4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002580:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002584:	619a      	str	r2, [r3, #24]
    hdma_tim3_ch4_up.Init.Mode = DMA_CIRCULAR;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002588:	f44f 7280 	mov.w	r2, #256	; 0x100
 800258c:	61da      	str	r2, [r3, #28]
    hdma_tim3_ch4_up.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002590:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002594:	621a      	str	r2, [r3, #32]
    hdma_tim3_ch4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 8002598:	2200      	movs	r2, #0
 800259a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim3_ch4_up) != HAL_OK)
 800259c:	4810      	ldr	r0, [pc, #64]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 800259e:	f000 fcb1 	bl	8002f04 <HAL_DMA_Init>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <HAL_TIM_Encoder_MspInit+0x168>
      Error_Handler();
 80025a8:	f7ff fd6c 	bl	8002084 <Error_Handler>
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_CC4],hdma_tim3_ch4_up);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	4a0c      	ldr	r2, [pc, #48]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 80025b0:	631a      	str	r2, [r3, #48]	; 0x30
 80025b2:	4a0b      	ldr	r2, [pc, #44]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(htim_encoder,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_ch4_up);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 80025bc:	621a      	str	r2, [r3, #32]
 80025be:	4a08      	ldr	r2, [pc, #32]	; (80025e0 <HAL_TIM_Encoder_MspInit+0x19c>)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6393      	str	r3, [r2, #56]	; 0x38
}
 80025c4:	bf00      	nop
 80025c6:	3730      	adds	r7, #48	; 0x30
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40010000 	.word	0x40010000
 80025d0:	40023800 	.word	0x40023800
 80025d4:	40021000 	.word	0x40021000
 80025d8:	40000400 	.word	0x40000400
 80025dc:	40020000 	.word	0x40020000
 80025e0:	20000600 	.word	0x20000600
 80025e4:	40026040 	.word	0x40026040

080025e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b088      	sub	sp, #32
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a5e      	ldr	r2, [pc, #376]	; (8002770 <HAL_TIM_Base_MspInit+0x188>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d147      	bne.n	800268a <HAL_TIM_Base_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	61fb      	str	r3, [r7, #28]
 80025fe:	4b5d      	ldr	r3, [pc, #372]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 8002600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002602:	4a5c      	ldr	r2, [pc, #368]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 8002604:	f043 0304 	orr.w	r3, r3, #4
 8002608:	6413      	str	r3, [r2, #64]	; 0x40
 800260a:	4b5a      	ldr	r3, [pc, #360]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	f003 0304 	and.w	r3, r3, #4
 8002612:	61fb      	str	r3, [r7, #28]
 8002614:	69fb      	ldr	r3, [r7, #28]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002616:	4b58      	ldr	r3, [pc, #352]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002618:	4a58      	ldr	r2, [pc, #352]	; (800277c <HAL_TIM_Base_MspInit+0x194>)
 800261a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800261c:	4b56      	ldr	r3, [pc, #344]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 800261e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002622:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002624:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002626:	2240      	movs	r2, #64	; 0x40
 8002628:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800262a:	4b53      	ldr	r3, [pc, #332]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 800262c:	2200      	movs	r2, #0
 800262e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002630:	4b51      	ldr	r3, [pc, #324]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002632:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002636:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002638:	4b4f      	ldr	r3, [pc, #316]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 800263a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800263e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002640:	4b4d      	ldr	r3, [pc, #308]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002642:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002646:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_CIRCULAR;
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 800264a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800264e:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002650:	4b49      	ldr	r3, [pc, #292]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002652:	2200      	movs	r2, #0
 8002654:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002656:	4b48      	ldr	r3, [pc, #288]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002658:	2200      	movs	r2, #0
 800265a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800265c:	4846      	ldr	r0, [pc, #280]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 800265e:	f000 fc51 	bl	8002f04 <HAL_DMA_Init>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d001      	beq.n	800266c <HAL_TIM_Base_MspInit+0x84>
    {
      Error_Handler();
 8002668:	f7ff fd0c 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	4a42      	ldr	r2, [pc, #264]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002670:	625a      	str	r2, [r3, #36]	; 0x24
 8002672:	4a41      	ldr	r2, [pc, #260]	; (8002778 <HAL_TIM_Base_MspInit+0x190>)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8002678:	2200      	movs	r2, #0
 800267a:	2100      	movs	r1, #0
 800267c:	201e      	movs	r0, #30
 800267e:	f000 fc0a 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002682:	201e      	movs	r0, #30
 8002684:	f000 fc23 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM13_MspInit 1 */

  /* USER CODE END TIM13_MspInit 1 */
  }

}
 8002688:	e06e      	b.n	8002768 <HAL_TIM_Base_MspInit+0x180>
  else if(htim_base->Instance==TIM6)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	4a3c      	ldr	r2, [pc, #240]	; (8002780 <HAL_TIM_Base_MspInit+0x198>)
 8002690:	4293      	cmp	r3, r2
 8002692:	d116      	bne.n	80026c2 <HAL_TIM_Base_MspInit+0xda>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002694:	2300      	movs	r3, #0
 8002696:	61bb      	str	r3, [r7, #24]
 8002698:	4b36      	ldr	r3, [pc, #216]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	4a35      	ldr	r2, [pc, #212]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 800269e:	f043 0310 	orr.w	r3, r3, #16
 80026a2:	6413      	str	r3, [r2, #64]	; 0x40
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	f003 0310 	and.w	r3, r3, #16
 80026ac:	61bb      	str	r3, [r7, #24]
 80026ae:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80026b0:	2200      	movs	r2, #0
 80026b2:	2100      	movs	r1, #0
 80026b4:	2036      	movs	r0, #54	; 0x36
 80026b6:	f000 fbee 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80026ba:	2036      	movs	r0, #54	; 0x36
 80026bc:	f000 fc07 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 80026c0:	e052      	b.n	8002768 <HAL_TIM_Base_MspInit+0x180>
  else if(htim_base->Instance==TIM10)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2f      	ldr	r2, [pc, #188]	; (8002784 <HAL_TIM_Base_MspInit+0x19c>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d116      	bne.n	80026fa <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
 80026d0:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 80026d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d4:	4a27      	ldr	r2, [pc, #156]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 80026d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80026da:	6453      	str	r3, [r2, #68]	; 0x44
 80026dc:	4b25      	ldr	r3, [pc, #148]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 80026de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80026e8:	2200      	movs	r2, #0
 80026ea:	2100      	movs	r1, #0
 80026ec:	2019      	movs	r0, #25
 80026ee:	f000 fbd2 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80026f2:	2019      	movs	r0, #25
 80026f4:	f000 fbeb 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 80026f8:	e036      	b.n	8002768 <HAL_TIM_Base_MspInit+0x180>
  else if(htim_base->Instance==TIM11)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a22      	ldr	r2, [pc, #136]	; (8002788 <HAL_TIM_Base_MspInit+0x1a0>)
 8002700:	4293      	cmp	r3, r2
 8002702:	d116      	bne.n	8002732 <HAL_TIM_Base_MspInit+0x14a>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002704:	2300      	movs	r3, #0
 8002706:	613b      	str	r3, [r7, #16]
 8002708:	4b1a      	ldr	r3, [pc, #104]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 800270a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800270c:	4a19      	ldr	r2, [pc, #100]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 800270e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002712:	6453      	str	r3, [r2, #68]	; 0x44
 8002714:	4b17      	ldr	r3, [pc, #92]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 8002716:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002718:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800271c:	613b      	str	r3, [r7, #16]
 800271e:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8002720:	2200      	movs	r2, #0
 8002722:	2100      	movs	r1, #0
 8002724:	201a      	movs	r0, #26
 8002726:	f000 fbb6 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800272a:	201a      	movs	r0, #26
 800272c:	f000 fbcf 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 8002730:	e01a      	b.n	8002768 <HAL_TIM_Base_MspInit+0x180>
  else if(htim_base->Instance==TIM13)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a15      	ldr	r2, [pc, #84]	; (800278c <HAL_TIM_Base_MspInit+0x1a4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d115      	bne.n	8002768 <HAL_TIM_Base_MspInit+0x180>
    __HAL_RCC_TIM13_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 8002742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002744:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 8002746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800274a:	6413      	str	r3, [r2, #64]	; 0x40
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_TIM_Base_MspInit+0x18c>)
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8002758:	2200      	movs	r2, #0
 800275a:	2100      	movs	r1, #0
 800275c:	202c      	movs	r0, #44	; 0x2c
 800275e:	f000 fb9a 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8002762:	202c      	movs	r0, #44	; 0x2c
 8002764:	f000 fbb3 	bl	8002ece <HAL_NVIC_EnableIRQ>
}
 8002768:	bf00      	nop
 800276a:	3720      	adds	r7, #32
 800276c:	46bd      	mov	sp, r7
 800276e:	bd80      	pop	{r7, pc}
 8002770:	40000800 	.word	0x40000800
 8002774:	40023800 	.word	0x40023800
 8002778:	20000660 	.word	0x20000660
 800277c:	40026010 	.word	0x40026010
 8002780:	40001000 	.word	0x40001000
 8002784:	40014400 	.word	0x40014400
 8002788:	40014800 	.word	0x40014800
 800278c:	40001c00 	.word	0x40001c00

08002790 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b088      	sub	sp, #32
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002798:	f107 030c 	add.w	r3, r7, #12
 800279c:	2200      	movs	r2, #0
 800279e:	601a      	str	r2, [r3, #0]
 80027a0:	605a      	str	r2, [r3, #4]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	60da      	str	r2, [r3, #12]
 80027a6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a12      	ldr	r2, [pc, #72]	; (80027f8 <HAL_TIM_MspPostInit+0x68>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d11d      	bne.n	80027ee <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027b2:	2300      	movs	r3, #0
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_TIM_MspPostInit+0x6c>)
 80027b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ba:	4a10      	ldr	r2, [pc, #64]	; (80027fc <HAL_TIM_MspPostInit+0x6c>)
 80027bc:	f043 0302 	orr.w	r3, r3, #2
 80027c0:	6313      	str	r3, [r2, #48]	; 0x30
 80027c2:	4b0e      	ldr	r3, [pc, #56]	; (80027fc <HAL_TIM_MspPostInit+0x6c>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_Pin;
 80027ce:	2340      	movs	r3, #64	; 0x40
 80027d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027d2:	2302      	movs	r3, #2
 80027d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027d6:	2300      	movs	r3, #0
 80027d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027da:	2300      	movs	r3, #0
 80027dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027de:	2302      	movs	r3, #2
 80027e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTOR_PWM_GPIO_Port, &GPIO_InitStruct);
 80027e2:	f107 030c 	add.w	r3, r7, #12
 80027e6:	4619      	mov	r1, r3
 80027e8:	4805      	ldr	r0, [pc, #20]	; (8002800 <HAL_TIM_MspPostInit+0x70>)
 80027ea:	f000 ff1b 	bl	8003624 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80027ee:	bf00      	nop
 80027f0:	3720      	adds	r7, #32
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	40000800 	.word	0x40000800
 80027fc:	40023800 	.word	0x40023800
 8002800:	40020400 	.word	0x40020400

08002804 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b08a      	sub	sp, #40	; 0x28
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280c:	f107 0314 	add.w	r3, r7, #20
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a4c      	ldr	r2, [pc, #304]	; (8002954 <HAL_UART_MspInit+0x150>)
 8002822:	4293      	cmp	r3, r2
 8002824:	f040 8092 	bne.w	800294c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
 800282c:	4b4a      	ldr	r3, [pc, #296]	; (8002958 <HAL_UART_MspInit+0x154>)
 800282e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002830:	4a49      	ldr	r2, [pc, #292]	; (8002958 <HAL_UART_MspInit+0x154>)
 8002832:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002836:	6413      	str	r3, [r2, #64]	; 0x40
 8002838:	4b47      	ldr	r3, [pc, #284]	; (8002958 <HAL_UART_MspInit+0x154>)
 800283a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002840:	613b      	str	r3, [r7, #16]
 8002842:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	2300      	movs	r3, #0
 8002846:	60fb      	str	r3, [r7, #12]
 8002848:	4b43      	ldr	r3, [pc, #268]	; (8002958 <HAL_UART_MspInit+0x154>)
 800284a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284c:	4a42      	ldr	r2, [pc, #264]	; (8002958 <HAL_UART_MspInit+0x154>)
 800284e:	f043 0301 	orr.w	r3, r3, #1
 8002852:	6313      	str	r3, [r2, #48]	; 0x30
 8002854:	4b40      	ldr	r3, [pc, #256]	; (8002958 <HAL_UART_MspInit+0x154>)
 8002856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002860:	230c      	movs	r3, #12
 8002862:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002868:	2300      	movs	r3, #0
 800286a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800286c:	2303      	movs	r3, #3
 800286e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002870:	2307      	movs	r3, #7
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002874:	f107 0314 	add.w	r3, r7, #20
 8002878:	4619      	mov	r1, r3
 800287a:	4838      	ldr	r0, [pc, #224]	; (800295c <HAL_UART_MspInit+0x158>)
 800287c:	f000 fed2 	bl	8003624 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002880:	4b37      	ldr	r3, [pc, #220]	; (8002960 <HAL_UART_MspInit+0x15c>)
 8002882:	4a38      	ldr	r2, [pc, #224]	; (8002964 <HAL_UART_MspInit+0x160>)
 8002884:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002886:	4b36      	ldr	r3, [pc, #216]	; (8002960 <HAL_UART_MspInit+0x15c>)
 8002888:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800288c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288e:	4b34      	ldr	r3, [pc, #208]	; (8002960 <HAL_UART_MspInit+0x15c>)
 8002890:	2200      	movs	r2, #0
 8002892:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002894:	4b32      	ldr	r3, [pc, #200]	; (8002960 <HAL_UART_MspInit+0x15c>)
 8002896:	2200      	movs	r2, #0
 8002898:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <HAL_UART_MspInit+0x15c>)
 800289c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028a2:	4b2f      	ldr	r3, [pc, #188]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80028ae:	4b2c      	ldr	r3, [pc, #176]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028b6:	4b2a      	ldr	r3, [pc, #168]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028bc:	4b28      	ldr	r3, [pc, #160]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028be:	2200      	movs	r2, #0
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028c2:	4827      	ldr	r0, [pc, #156]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028c4:	f000 fb1e 	bl	8002f04 <HAL_DMA_Init>
 80028c8:	4603      	mov	r3, r0
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d001      	beq.n	80028d2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80028ce:	f7ff fbd9 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	4a22      	ldr	r2, [pc, #136]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028d6:	635a      	str	r2, [r3, #52]	; 0x34
 80028d8:	4a21      	ldr	r2, [pc, #132]	; (8002960 <HAL_UART_MspInit+0x15c>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80028de:	4b22      	ldr	r3, [pc, #136]	; (8002968 <HAL_UART_MspInit+0x164>)
 80028e0:	4a22      	ldr	r2, [pc, #136]	; (800296c <HAL_UART_MspInit+0x168>)
 80028e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80028e4:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_UART_MspInit+0x164>)
 80028e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028ec:	4b1e      	ldr	r3, [pc, #120]	; (8002968 <HAL_UART_MspInit+0x164>)
 80028ee:	2240      	movs	r2, #64	; 0x40
 80028f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_UART_MspInit+0x164>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028f8:	4b1b      	ldr	r3, [pc, #108]	; (8002968 <HAL_UART_MspInit+0x164>)
 80028fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002900:	4b19      	ldr	r3, [pc, #100]	; (8002968 <HAL_UART_MspInit+0x164>)
 8002902:	2200      	movs	r2, #0
 8002904:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002906:	4b18      	ldr	r3, [pc, #96]	; (8002968 <HAL_UART_MspInit+0x164>)
 8002908:	2200      	movs	r2, #0
 800290a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_CIRCULAR;
 800290c:	4b16      	ldr	r3, [pc, #88]	; (8002968 <HAL_UART_MspInit+0x164>)
 800290e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002912:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002914:	4b14      	ldr	r3, [pc, #80]	; (8002968 <HAL_UART_MspInit+0x164>)
 8002916:	2200      	movs	r2, #0
 8002918:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800291a:	4b13      	ldr	r3, [pc, #76]	; (8002968 <HAL_UART_MspInit+0x164>)
 800291c:	2200      	movs	r2, #0
 800291e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002920:	4811      	ldr	r0, [pc, #68]	; (8002968 <HAL_UART_MspInit+0x164>)
 8002922:	f000 faef 	bl	8002f04 <HAL_DMA_Init>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d001      	beq.n	8002930 <HAL_UART_MspInit+0x12c>
    {
      Error_Handler();
 800292c:	f7ff fbaa 	bl	8002084 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a0d      	ldr	r2, [pc, #52]	; (8002968 <HAL_UART_MspInit+0x164>)
 8002934:	631a      	str	r2, [r3, #48]	; 0x30
 8002936:	4a0c      	ldr	r2, [pc, #48]	; (8002968 <HAL_UART_MspInit+0x164>)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800293c:	2200      	movs	r2, #0
 800293e:	2100      	movs	r1, #0
 8002940:	2026      	movs	r0, #38	; 0x26
 8002942:	f000 faa8 	bl	8002e96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002946:	2026      	movs	r0, #38	; 0x26
 8002948:	f000 fac1 	bl	8002ece <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800294c:	bf00      	nop
 800294e:	3728      	adds	r7, #40	; 0x28
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40004400 	.word	0x40004400
 8002958:	40023800 	.word	0x40023800
 800295c:	40020000 	.word	0x40020000
 8002960:	200002f8 	.word	0x200002f8
 8002964:	40026088 	.word	0x40026088
 8002968:	200004a0 	.word	0x200004a0
 800296c:	400260a0 	.word	0x400260a0

08002970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002970:	b480      	push	{r7}
 8002972:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002974:	bf00      	nop
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800297e:	b480      	push	{r7}
 8002980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002982:	e7fe      	b.n	8002982 <HardFault_Handler+0x4>

08002984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002988:	e7fe      	b.n	8002988 <MemManage_Handler+0x4>

0800298a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800298e:	e7fe      	b.n	800298e <BusFault_Handler+0x4>

08002990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002990:	b480      	push	{r7}
 8002992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002994:	e7fe      	b.n	8002994 <UsageFault_Handler+0x4>

08002996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002996:	b480      	push	{r7}
 8002998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr

080029b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029b2:	b480      	push	{r7}
 80029b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029b6:	bf00      	nop
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029c4:	f000 f94a 	bl	8002c5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029c8:	bf00      	nop
 80029ca:	bd80      	pop	{r7, pc}

080029cc <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80029d0:	2001      	movs	r0, #1
 80029d2:	f000 fff5 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	bd80      	pop	{r7, pc}
	...

080029dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 80029e0:	4802      	ldr	r0, [pc, #8]	; (80029ec <DMA1_Stream0_IRQHandler+0x10>)
 80029e2:	f000 fbb7 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	bd80      	pop	{r7, pc}
 80029ea:	bf00      	nop
 80029ec:	20000660 	.word	0x20000660

080029f0 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_ch4_up);
 80029f4:	4802      	ldr	r0, [pc, #8]	; (8002a00 <DMA1_Stream2_IRQHandler+0x10>)
 80029f6:	f000 fbad 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80029fa:	bf00      	nop
 80029fc:	bd80      	pop	{r7, pc}
 80029fe:	bf00      	nop
 8002a00:	20000600 	.word	0x20000600

08002a04 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a08:	4802      	ldr	r0, [pc, #8]	; (8002a14 <DMA1_Stream5_IRQHandler+0x10>)
 8002a0a:	f000 fba3 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	200002f8 	.word	0x200002f8

08002a18 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002a1c:	4802      	ldr	r0, [pc, #8]	; (8002a28 <DMA1_Stream6_IRQHandler+0x10>)
 8002a1e:	f000 fb99 	bl	8003154 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200004a0 	.word	0x200004a0

08002a2c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002a30:	2080      	movs	r0, #128	; 0x80
 8002a32:	f000 ffc5 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 8002a36:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002a3a:	f000 ffc1 	bl	80039c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
	...

08002a44 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8002a4a:	f001 fe6c 	bl	8004726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	200005c0 	.word	0x200005c0

08002a58 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a5c:	4803      	ldr	r0, [pc, #12]	; (8002a6c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8002a5e:	f001 fe62 	bl	8004726 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8002a62:	4803      	ldr	r0, [pc, #12]	; (8002a70 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8002a64:	f001 fe5f 	bl	8004726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	200005c0 	.word	0x200005c0
 8002a70:	20000398 	.word	0x20000398

08002a74 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a78:	4803      	ldr	r0, [pc, #12]	; (8002a88 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8002a7a:	f001 fe54 	bl	8004726 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8002a7e:	4803      	ldr	r0, [pc, #12]	; (8002a8c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8002a80:	f001 fe51 	bl	8004726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8002a84:	bf00      	nop
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	200005c0 	.word	0x200005c0
 8002a8c:	20000540 	.word	0x20000540

08002a90 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002a94:	4802      	ldr	r0, [pc, #8]	; (8002aa0 <TIM4_IRQHandler+0x10>)
 8002a96:	f001 fe46 	bl	8004726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002a9a:	bf00      	nop
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	20000358 	.word	0x20000358

08002aa4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002aa8:	4802      	ldr	r0, [pc, #8]	; (8002ab4 <USART2_IRQHandler+0x10>)
 8002aaa:	f002 fe09 	bl	80056c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aae:	bf00      	nop
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	200006c0 	.word	0x200006c0

08002ab8 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8002abc:	4802      	ldr	r0, [pc, #8]	; (8002ac8 <TIM8_UP_TIM13_IRQHandler+0x10>)
 8002abe:	f001 fe32 	bl	8004726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8002ac2:	bf00      	nop
 8002ac4:	bd80      	pop	{r7, pc}
 8002ac6:	bf00      	nop
 8002ac8:	20000500 	.word	0x20000500

08002acc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002ad0:	4802      	ldr	r0, [pc, #8]	; (8002adc <TIM6_DAC_IRQHandler+0x10>)
 8002ad2:	f001 fe28 	bl	8004726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002ad6:	bf00      	nop
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	20000580 	.word	0x20000580

08002ae0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	b084      	sub	sp, #16
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002ae8:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <_sbrk+0x50>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d102      	bne.n	8002af6 <_sbrk+0x16>
		heap_end = &end;
 8002af0:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <_sbrk+0x50>)
 8002af2:	4a10      	ldr	r2, [pc, #64]	; (8002b34 <_sbrk+0x54>)
 8002af4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002af6:	4b0e      	ldr	r3, [pc, #56]	; (8002b30 <_sbrk+0x50>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <_sbrk+0x50>)
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4413      	add	r3, r2
 8002b04:	466a      	mov	r2, sp
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d907      	bls.n	8002b1a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002b0a:	f003 fb8b 	bl	8006224 <__errno>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	230c      	movs	r3, #12
 8002b12:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002b14:	f04f 33ff 	mov.w	r3, #4294967295
 8002b18:	e006      	b.n	8002b28 <_sbrk+0x48>
	}

	heap_end += incr;
 8002b1a:	4b05      	ldr	r3, [pc, #20]	; (8002b30 <_sbrk+0x50>)
 8002b1c:	681a      	ldr	r2, [r3, #0]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4413      	add	r3, r2
 8002b22:	4a03      	ldr	r2, [pc, #12]	; (8002b30 <_sbrk+0x50>)
 8002b24:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002b26:	68fb      	ldr	r3, [r7, #12]
}
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3710      	adds	r7, #16
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	bd80      	pop	{r7, pc}
 8002b30:	20000260 	.word	0x20000260
 8002b34:	20000708 	.word	0x20000708

08002b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <SystemInit+0x28>)
 8002b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b42:	4a07      	ldr	r2, [pc, #28]	; (8002b60 <SystemInit+0x28>)
 8002b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b4c:	4b04      	ldr	r3, [pc, #16]	; (8002b60 <SystemInit+0x28>)
 8002b4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b52:	609a      	str	r2, [r3, #8]
#endif
}
 8002b54:	bf00      	nop
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr
 8002b5e:	bf00      	nop
 8002b60:	e000ed00 	.word	0xe000ed00

08002b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b68:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b6a:	e003      	b.n	8002b74 <LoopCopyDataInit>

08002b6c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b6e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b70:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b72:	3104      	adds	r1, #4

08002b74 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b74:	480b      	ldr	r0, [pc, #44]	; (8002ba4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b76:	4b0c      	ldr	r3, [pc, #48]	; (8002ba8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b78:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b7a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b7c:	d3f6      	bcc.n	8002b6c <CopyDataInit>
  ldr  r2, =_sbss
 8002b7e:	4a0b      	ldr	r2, [pc, #44]	; (8002bac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b80:	e002      	b.n	8002b88 <LoopFillZerobss>

08002b82 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b82:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b84:	f842 3b04 	str.w	r3, [r2], #4

08002b88 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b88:	4b09      	ldr	r3, [pc, #36]	; (8002bb0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b8a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b8c:	d3f9      	bcc.n	8002b82 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b8e:	f7ff ffd3 	bl	8002b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b92:	f003 fb4d 	bl	8006230 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b96:	f7fe fcbb 	bl	8001510 <main>
  bx  lr    
 8002b9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002b9c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002ba0:	0800a934 	.word	0x0800a934
  ldr  r0, =_sdata
 8002ba4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002ba8:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8002bac:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8002bb0:	20000708 	.word	0x20000708

08002bb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002bb4:	e7fe      	b.n	8002bb4 <ADC_IRQHandler>
	...

08002bb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_Init+0x40>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0d      	ldr	r2, [pc, #52]	; (8002bf8 <HAL_Init+0x40>)
 8002bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002bc6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002bc8:	4b0b      	ldr	r3, [pc, #44]	; (8002bf8 <HAL_Init+0x40>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	; (8002bf8 <HAL_Init+0x40>)
 8002bce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bd2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002bd4:	4b08      	ldr	r3, [pc, #32]	; (8002bf8 <HAL_Init+0x40>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a07      	ldr	r2, [pc, #28]	; (8002bf8 <HAL_Init+0x40>)
 8002bda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bde:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002be0:	2003      	movs	r0, #3
 8002be2:	f000 f94d 	bl	8002e80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002be6:	2000      	movs	r0, #0
 8002be8:	f000 f808 	bl	8002bfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bec:	f7ff fc02 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	bd80      	pop	{r7, pc}
 8002bf6:	bf00      	nop
 8002bf8:	40023c00 	.word	0x40023c00

08002bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <HAL_InitTick+0x54>)
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	4b12      	ldr	r3, [pc, #72]	; (8002c54 <HAL_InitTick+0x58>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002c16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f000 f965 	bl	8002eea <HAL_SYSTICK_Config>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00e      	b.n	8002c48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2b0f      	cmp	r3, #15
 8002c2e:	d80a      	bhi.n	8002c46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002c30:	2200      	movs	r2, #0
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	f04f 30ff 	mov.w	r0, #4294967295
 8002c38:	f000 f92d 	bl	8002e96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c3c:	4a06      	ldr	r2, [pc, #24]	; (8002c58 <HAL_InitTick+0x5c>)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
 8002c44:	e000      	b.n	8002c48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000010 	.word	0x20000010
 8002c58:	2000000c 	.word	0x2000000c

08002c5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c60:	4b06      	ldr	r3, [pc, #24]	; (8002c7c <HAL_IncTick+0x20>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	461a      	mov	r2, r3
 8002c66:	4b06      	ldr	r3, [pc, #24]	; (8002c80 <HAL_IncTick+0x24>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	4a04      	ldr	r2, [pc, #16]	; (8002c80 <HAL_IncTick+0x24>)
 8002c6e:	6013      	str	r3, [r2, #0]
}
 8002c70:	bf00      	nop
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr
 8002c7a:	bf00      	nop
 8002c7c:	20000010 	.word	0x20000010
 8002c80:	20000700 	.word	0x20000700

08002c84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c84:	b480      	push	{r7}
 8002c86:	af00      	add	r7, sp, #0
  return uwTick;
 8002c88:	4b03      	ldr	r3, [pc, #12]	; (8002c98 <HAL_GetTick+0x14>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
 8002c96:	bf00      	nop
 8002c98:	20000700 	.word	0x20000700

08002c9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ca4:	f7ff ffee 	bl	8002c84 <HAL_GetTick>
 8002ca8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb4:	d005      	beq.n	8002cc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002cb6:	4b09      	ldr	r3, [pc, #36]	; (8002cdc <HAL_Delay+0x40>)
 8002cb8:	781b      	ldrb	r3, [r3, #0]
 8002cba:	461a      	mov	r2, r3
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002cc2:	bf00      	nop
 8002cc4:	f7ff ffde 	bl	8002c84 <HAL_GetTick>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	1ad3      	subs	r3, r2, r3
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	429a      	cmp	r2, r3
 8002cd2:	d8f7      	bhi.n	8002cc4 <HAL_Delay+0x28>
  {
  }
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	20000010 	.word	0x20000010

08002ce0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f003 0307 	and.w	r3, r3, #7
 8002cee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cf6:	68ba      	ldr	r2, [r7, #8]
 8002cf8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d12:	4a04      	ldr	r2, [pc, #16]	; (8002d24 <__NVIC_SetPriorityGrouping+0x44>)
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	60d3      	str	r3, [r2, #12]
}
 8002d18:	bf00      	nop
 8002d1a:	3714      	adds	r7, #20
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d22:	4770      	bx	lr
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <__NVIC_GetPriorityGrouping+0x18>)
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	0a1b      	lsrs	r3, r3, #8
 8002d32:	f003 0307 	and.w	r3, r3, #7
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr
 8002d40:	e000ed00 	.word	0xe000ed00

08002d44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b083      	sub	sp, #12
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	db0b      	blt.n	8002d6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	f003 021f 	and.w	r2, r3, #31
 8002d5c:	4907      	ldr	r1, [pc, #28]	; (8002d7c <__NVIC_EnableIRQ+0x38>)
 8002d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d62:	095b      	lsrs	r3, r3, #5
 8002d64:	2001      	movs	r0, #1
 8002d66:	fa00 f202 	lsl.w	r2, r0, r2
 8002d6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d6e:	bf00      	nop
 8002d70:	370c      	adds	r7, #12
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	e000e100 	.word	0xe000e100

08002d80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	4603      	mov	r3, r0
 8002d88:	6039      	str	r1, [r7, #0]
 8002d8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	db0a      	blt.n	8002daa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	b2da      	uxtb	r2, r3
 8002d98:	490c      	ldr	r1, [pc, #48]	; (8002dcc <__NVIC_SetPriority+0x4c>)
 8002d9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d9e:	0112      	lsls	r2, r2, #4
 8002da0:	b2d2      	uxtb	r2, r2
 8002da2:	440b      	add	r3, r1
 8002da4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002da8:	e00a      	b.n	8002dc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	b2da      	uxtb	r2, r3
 8002dae:	4908      	ldr	r1, [pc, #32]	; (8002dd0 <__NVIC_SetPriority+0x50>)
 8002db0:	79fb      	ldrb	r3, [r7, #7]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	3b04      	subs	r3, #4
 8002db8:	0112      	lsls	r2, r2, #4
 8002dba:	b2d2      	uxtb	r2, r2
 8002dbc:	440b      	add	r3, r1
 8002dbe:	761a      	strb	r2, [r3, #24]
}
 8002dc0:	bf00      	nop
 8002dc2:	370c      	adds	r7, #12
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dca:	4770      	bx	lr
 8002dcc:	e000e100 	.word	0xe000e100
 8002dd0:	e000ed00 	.word	0xe000ed00

08002dd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b089      	sub	sp, #36	; 0x24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	f1c3 0307 	rsb	r3, r3, #7
 8002dee:	2b04      	cmp	r3, #4
 8002df0:	bf28      	it	cs
 8002df2:	2304      	movcs	r3, #4
 8002df4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	3304      	adds	r3, #4
 8002dfa:	2b06      	cmp	r3, #6
 8002dfc:	d902      	bls.n	8002e04 <NVIC_EncodePriority+0x30>
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	3b03      	subs	r3, #3
 8002e02:	e000      	b.n	8002e06 <NVIC_EncodePriority+0x32>
 8002e04:	2300      	movs	r3, #0
 8002e06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e08:	f04f 32ff 	mov.w	r2, #4294967295
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e12:	43da      	mvns	r2, r3
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	401a      	ands	r2, r3
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e1c:	f04f 31ff 	mov.w	r1, #4294967295
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	fa01 f303 	lsl.w	r3, r1, r3
 8002e26:	43d9      	mvns	r1, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e2c:	4313      	orrs	r3, r2
         );
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3724      	adds	r7, #36	; 0x24
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
	...

08002e3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	3b01      	subs	r3, #1
 8002e48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e4c:	d301      	bcc.n	8002e52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e00f      	b.n	8002e72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e52:	4a0a      	ldr	r2, [pc, #40]	; (8002e7c <SysTick_Config+0x40>)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	3b01      	subs	r3, #1
 8002e58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e5a:	210f      	movs	r1, #15
 8002e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8002e60:	f7ff ff8e 	bl	8002d80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e64:	4b05      	ldr	r3, [pc, #20]	; (8002e7c <SysTick_Config+0x40>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e6a:	4b04      	ldr	r3, [pc, #16]	; (8002e7c <SysTick_Config+0x40>)
 8002e6c:	2207      	movs	r2, #7
 8002e6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3708      	adds	r7, #8
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
 8002e7a:	bf00      	nop
 8002e7c:	e000e010 	.word	0xe000e010

08002e80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e88:	6878      	ldr	r0, [r7, #4]
 8002e8a:	f7ff ff29 	bl	8002ce0 <__NVIC_SetPriorityGrouping>
}
 8002e8e:	bf00      	nop
 8002e90:	3708      	adds	r7, #8
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}

08002e96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e96:	b580      	push	{r7, lr}
 8002e98:	b086      	sub	sp, #24
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ea8:	f7ff ff3e 	bl	8002d28 <__NVIC_GetPriorityGrouping>
 8002eac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002eae:	687a      	ldr	r2, [r7, #4]
 8002eb0:	68b9      	ldr	r1, [r7, #8]
 8002eb2:	6978      	ldr	r0, [r7, #20]
 8002eb4:	f7ff ff8e 	bl	8002dd4 <NVIC_EncodePriority>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f7ff ff5d 	bl	8002d80 <__NVIC_SetPriority>
}
 8002ec6:	bf00      	nop
 8002ec8:	3718      	adds	r7, #24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}

08002ece <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ece:	b580      	push	{r7, lr}
 8002ed0:	b082      	sub	sp, #8
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ed8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7ff ff31 	bl	8002d44 <__NVIC_EnableIRQ>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b082      	sub	sp, #8
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ef2:	6878      	ldr	r0, [r7, #4]
 8002ef4:	f7ff ffa2 	bl	8002e3c <SysTick_Config>
 8002ef8:	4603      	mov	r3, r0
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
	...

08002f04 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002f10:	f7ff feb8 	bl	8002c84 <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e099      	b.n	8003054 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f40:	e00f      	b.n	8002f62 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f42:	f7ff fe9f 	bl	8002c84 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d908      	bls.n	8002f62 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e078      	b.n	8003054 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1e8      	bne.n	8002f42 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002f78:	697a      	ldr	r2, [r7, #20]
 8002f7a:	4b38      	ldr	r3, [pc, #224]	; (800305c <HAL_DMA_Init+0x158>)
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002f8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691b      	ldr	r3, [r3, #16]
 8002f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002fa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002fae:	697a      	ldr	r2, [r7, #20]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb8:	2b04      	cmp	r3, #4
 8002fba:	d107      	bne.n	8002fcc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	697a      	ldr	r2, [r7, #20]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	697a      	ldr	r2, [r7, #20]
 8002fd2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f023 0307 	bic.w	r3, r3, #7
 8002fe2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	697a      	ldr	r2, [r7, #20]
 8002fea:	4313      	orrs	r3, r2
 8002fec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d117      	bne.n	8003026 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	697a      	ldr	r2, [r7, #20]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00e      	beq.n	8003026 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f000 fa91 	bl	8003530 <DMA_CheckFifoParam>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d008      	beq.n	8003026 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2240      	movs	r2, #64	; 0x40
 8003018:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2201      	movs	r2, #1
 800301e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003022:	2301      	movs	r3, #1
 8003024:	e016      	b.n	8003054 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fa48 	bl	80034c4 <DMA_CalcBaseAndBitshift>
 8003034:	4603      	mov	r3, r0
 8003036:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303c:	223f      	movs	r2, #63	; 0x3f
 800303e:	409a      	lsls	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2201      	movs	r2, #1
 800304e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3718      	adds	r7, #24
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}
 800305c:	f010803f 	.word	0xf010803f

08003060 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b086      	sub	sp, #24
 8003064:	af00      	add	r7, sp, #0
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	60b9      	str	r1, [r7, #8]
 800306a:	607a      	str	r2, [r7, #4]
 800306c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800306e:	2300      	movs	r3, #0
 8003070:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003076:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_DMA_Start_IT+0x26>
 8003082:	2302      	movs	r3, #2
 8003084:	e040      	b.n	8003108 <HAL_DMA_Start_IT+0xa8>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b01      	cmp	r3, #1
 8003098:	d12f      	bne.n	80030fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	68f8      	ldr	r0, [r7, #12]
 80030b0:	f000 f9da 	bl	8003468 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b8:	223f      	movs	r2, #63	; 0x3f
 80030ba:	409a      	lsls	r2, r3
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f042 0216 	orr.w	r2, r2, #22
 80030ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d007      	beq.n	80030e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0208 	orr.w	r2, r2, #8
 80030e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 0201 	orr.w	r2, r2, #1
 80030f6:	601a      	str	r2, [r3, #0]
 80030f8:	e005      	b.n	8003106 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003102:	2302      	movs	r3, #2
 8003104:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003106:	7dfb      	ldrb	r3, [r7, #23]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3718      	adds	r7, #24
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b02      	cmp	r3, #2
 8003122:	d004      	beq.n	800312e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2280      	movs	r2, #128	; 0x80
 8003128:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	e00c      	b.n	8003148 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2205      	movs	r2, #5
 8003132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0201 	bic.w	r2, r2, #1
 8003144:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	370c      	adds	r7, #12
 800314c:	46bd      	mov	sp, r7
 800314e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003152:	4770      	bx	lr

08003154 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b086      	sub	sp, #24
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800315c:	2300      	movs	r3, #0
 800315e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003160:	4b92      	ldr	r3, [pc, #584]	; (80033ac <HAL_DMA_IRQHandler+0x258>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a92      	ldr	r2, [pc, #584]	; (80033b0 <HAL_DMA_IRQHandler+0x25c>)
 8003166:	fba2 2303 	umull	r2, r3, r2, r3
 800316a:	0a9b      	lsrs	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003172:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800317e:	2208      	movs	r2, #8
 8003180:	409a      	lsls	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	4013      	ands	r3, r2
 8003186:	2b00      	cmp	r3, #0
 8003188:	d01a      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0304 	and.w	r3, r3, #4
 8003194:	2b00      	cmp	r3, #0
 8003196:	d013      	beq.n	80031c0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f022 0204 	bic.w	r2, r2, #4
 80031a6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ac:	2208      	movs	r2, #8
 80031ae:	409a      	lsls	r2, r3
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031c4:	2201      	movs	r2, #1
 80031c6:	409a      	lsls	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d012      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00b      	beq.n	80031f6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031e2:	2201      	movs	r2, #1
 80031e4:	409a      	lsls	r2, r3
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031ee:	f043 0202 	orr.w	r2, r3, #2
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fa:	2204      	movs	r2, #4
 80031fc:	409a      	lsls	r2, r3
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	4013      	ands	r3, r2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d012      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d00b      	beq.n	800322c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003218:	2204      	movs	r2, #4
 800321a:	409a      	lsls	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003224:	f043 0204 	orr.w	r2, r3, #4
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003230:	2210      	movs	r2, #16
 8003232:	409a      	lsls	r2, r3
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d043      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d03c      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324e:	2210      	movs	r2, #16
 8003250:	409a      	lsls	r2, r3
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d018      	beq.n	8003296 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800326e:	2b00      	cmp	r3, #0
 8003270:	d108      	bne.n	8003284 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d024      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	4798      	blx	r3
 8003282:	e01f      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003288:	2b00      	cmp	r3, #0
 800328a:	d01b      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	4798      	blx	r3
 8003294:	e016      	b.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d107      	bne.n	80032b4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f022 0208 	bic.w	r2, r2, #8
 80032b2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c8:	2220      	movs	r2, #32
 80032ca:	409a      	lsls	r2, r3
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	4013      	ands	r3, r2
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	f000 808e 	beq.w	80033f2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	f000 8086 	beq.w	80033f2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ea:	2220      	movs	r2, #32
 80032ec:	409a      	lsls	r2, r3
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b05      	cmp	r3, #5
 80032fc:	d136      	bne.n	800336c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0216 	bic.w	r2, r2, #22
 800330c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	695a      	ldr	r2, [r3, #20]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800331c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003322:	2b00      	cmp	r3, #0
 8003324:	d103      	bne.n	800332e <HAL_DMA_IRQHandler+0x1da>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800332a:	2b00      	cmp	r3, #0
 800332c:	d007      	beq.n	800333e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681a      	ldr	r2, [r3, #0]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003342:	223f      	movs	r2, #63	; 0x3f
 8003344:	409a      	lsls	r2, r3
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2201      	movs	r2, #1
 8003356:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800335e:	2b00      	cmp	r3, #0
 8003360:	d07d      	beq.n	800345e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	4798      	blx	r3
        }
        return;
 800336a:	e078      	b.n	800345e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d01c      	beq.n	80033b4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d108      	bne.n	800339a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338c:	2b00      	cmp	r3, #0
 800338e:	d030      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	4798      	blx	r3
 8003398:	e02b      	b.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d027      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	4798      	blx	r3
 80033aa:	e022      	b.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
 80033ac:	20000008 	.word	0x20000008
 80033b0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f022 0210 	bic.w	r2, r2, #16
 80033d0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2201      	movs	r2, #1
 80033de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d003      	beq.n	80033f2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d032      	beq.n	8003460 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d022      	beq.n	800344c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2205      	movs	r2, #5
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	681a      	ldr	r2, [r3, #0]
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f022 0201 	bic.w	r2, r2, #1
 800341c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	3301      	adds	r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	697a      	ldr	r2, [r7, #20]
 8003426:	429a      	cmp	r2, r3
 8003428:	d307      	bcc.n	800343a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0301 	and.w	r3, r3, #1
 8003434:	2b00      	cmp	r3, #0
 8003436:	d1f2      	bne.n	800341e <HAL_DMA_IRQHandler+0x2ca>
 8003438:	e000      	b.n	800343c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800343a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003450:	2b00      	cmp	r3, #0
 8003452:	d005      	beq.n	8003460 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	4798      	blx	r3
 800345c:	e000      	b.n	8003460 <HAL_DMA_IRQHandler+0x30c>
        return;
 800345e:	bf00      	nop
    }
  }
}
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop

08003468 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003468:	b480      	push	{r7}
 800346a:	b085      	sub	sp, #20
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003484:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	683a      	ldr	r2, [r7, #0]
 800348c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	2b40      	cmp	r3, #64	; 0x40
 8003494:	d108      	bne.n	80034a8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68ba      	ldr	r2, [r7, #8]
 80034a4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034a6:	e007      	b.n	80034b8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68ba      	ldr	r2, [r7, #8]
 80034ae:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	687a      	ldr	r2, [r7, #4]
 80034b6:	60da      	str	r2, [r3, #12]
}
 80034b8:	bf00      	nop
 80034ba:	3714      	adds	r7, #20
 80034bc:	46bd      	mov	sp, r7
 80034be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c2:	4770      	bx	lr

080034c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	3b10      	subs	r3, #16
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <DMA_CalcBaseAndBitshift+0x64>)
 80034d6:	fba2 2303 	umull	r2, r3, r2, r3
 80034da:	091b      	lsrs	r3, r3, #4
 80034dc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80034de:	4a13      	ldr	r2, [pc, #76]	; (800352c <DMA_CalcBaseAndBitshift+0x68>)
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	461a      	mov	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b03      	cmp	r3, #3
 80034f0:	d909      	bls.n	8003506 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80034fa:	f023 0303 	bic.w	r3, r3, #3
 80034fe:	1d1a      	adds	r2, r3, #4
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	659a      	str	r2, [r3, #88]	; 0x58
 8003504:	e007      	b.n	8003516 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800350e:	f023 0303 	bic.w	r3, r3, #3
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800351a:	4618      	mov	r0, r3
 800351c:	3714      	adds	r7, #20
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	aaaaaaab 	.word	0xaaaaaaab
 800352c:	0800a5f0 	.word	0x0800a5f0

08003530 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003538:	2300      	movs	r3, #0
 800353a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003540:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	699b      	ldr	r3, [r3, #24]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d11f      	bne.n	800358a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800354a:	68bb      	ldr	r3, [r7, #8]
 800354c:	2b03      	cmp	r3, #3
 800354e:	d855      	bhi.n	80035fc <DMA_CheckFifoParam+0xcc>
 8003550:	a201      	add	r2, pc, #4	; (adr r2, 8003558 <DMA_CheckFifoParam+0x28>)
 8003552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003556:	bf00      	nop
 8003558:	08003569 	.word	0x08003569
 800355c:	0800357b 	.word	0x0800357b
 8003560:	08003569 	.word	0x08003569
 8003564:	080035fd 	.word	0x080035fd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003570:	2b00      	cmp	r3, #0
 8003572:	d045      	beq.n	8003600 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003578:	e042      	b.n	8003600 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003582:	d13f      	bne.n	8003604 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003588:	e03c      	b.n	8003604 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003592:	d121      	bne.n	80035d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	2b03      	cmp	r3, #3
 8003598:	d836      	bhi.n	8003608 <DMA_CheckFifoParam+0xd8>
 800359a:	a201      	add	r2, pc, #4	; (adr r2, 80035a0 <DMA_CheckFifoParam+0x70>)
 800359c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035a0:	080035b1 	.word	0x080035b1
 80035a4:	080035b7 	.word	0x080035b7
 80035a8:	080035b1 	.word	0x080035b1
 80035ac:	080035c9 	.word	0x080035c9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80035b0:	2301      	movs	r3, #1
 80035b2:	73fb      	strb	r3, [r7, #15]
      break;
 80035b4:	e02f      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d024      	beq.n	800360c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e021      	b.n	800360c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035cc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80035d0:	d11e      	bne.n	8003610 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80035d6:	e01b      	b.n	8003610 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d902      	bls.n	80035e4 <DMA_CheckFifoParam+0xb4>
 80035de:	2b03      	cmp	r3, #3
 80035e0:	d003      	beq.n	80035ea <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80035e2:	e018      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	73fb      	strb	r3, [r7, #15]
      break;
 80035e8:	e015      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00e      	beq.n	8003614 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	73fb      	strb	r3, [r7, #15]
      break;
 80035fa:	e00b      	b.n	8003614 <DMA_CheckFifoParam+0xe4>
      break;
 80035fc:	bf00      	nop
 80035fe:	e00a      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 8003600:	bf00      	nop
 8003602:	e008      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 8003604:	bf00      	nop
 8003606:	e006      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 8003608:	bf00      	nop
 800360a:	e004      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 800360c:	bf00      	nop
 800360e:	e002      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;   
 8003610:	bf00      	nop
 8003612:	e000      	b.n	8003616 <DMA_CheckFifoParam+0xe6>
      break;
 8003614:	bf00      	nop
    }
  } 
  
  return status; 
 8003616:	7bfb      	ldrb	r3, [r7, #15]
}
 8003618:	4618      	mov	r0, r3
 800361a:	3714      	adds	r7, #20
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800362e:	2300      	movs	r3, #0
 8003630:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003632:	2300      	movs	r3, #0
 8003634:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
 800363e:	e16b      	b.n	8003918 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003640:	2201      	movs	r2, #1
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	fa02 f303 	lsl.w	r3, r2, r3
 8003648:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	697a      	ldr	r2, [r7, #20]
 8003650:	4013      	ands	r3, r2
 8003652:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003654:	693a      	ldr	r2, [r7, #16]
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	429a      	cmp	r2, r3
 800365a:	f040 815a 	bne.w	8003912 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685b      	ldr	r3, [r3, #4]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d00b      	beq.n	800367e <HAL_GPIO_Init+0x5a>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	2b02      	cmp	r3, #2
 800366c:	d007      	beq.n	800367e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003672:	2b11      	cmp	r3, #17
 8003674:	d003      	beq.n	800367e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b12      	cmp	r3, #18
 800367c:	d130      	bne.n	80036e0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	005b      	lsls	r3, r3, #1
 8003688:	2203      	movs	r2, #3
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	69fb      	ldr	r3, [r7, #28]
 800369c:	005b      	lsls	r3, r3, #1
 800369e:	fa02 f303 	lsl.w	r3, r2, r3
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	69ba      	ldr	r2, [r7, #24]
 80036ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80036b4:	2201      	movs	r2, #1
 80036b6:	69fb      	ldr	r3, [r7, #28]
 80036b8:	fa02 f303 	lsl.w	r3, r2, r3
 80036bc:	43db      	mvns	r3, r3
 80036be:	69ba      	ldr	r2, [r7, #24]
 80036c0:	4013      	ands	r3, r2
 80036c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 0201 	and.w	r2, r3, #1
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	69ba      	ldr	r2, [r7, #24]
 80036de:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	005b      	lsls	r3, r3, #1
 80036ea:	2203      	movs	r2, #3
 80036ec:	fa02 f303 	lsl.w	r3, r2, r3
 80036f0:	43db      	mvns	r3, r3
 80036f2:	69ba      	ldr	r2, [r7, #24]
 80036f4:	4013      	ands	r3, r2
 80036f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	69fb      	ldr	r3, [r7, #28]
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	69ba      	ldr	r2, [r7, #24]
 8003706:	4313      	orrs	r3, r2
 8003708:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69ba      	ldr	r2, [r7, #24]
 800370e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	685b      	ldr	r3, [r3, #4]
 8003714:	2b02      	cmp	r3, #2
 8003716:	d003      	beq.n	8003720 <HAL_GPIO_Init+0xfc>
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	2b12      	cmp	r3, #18
 800371e:	d123      	bne.n	8003768 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003720:	69fb      	ldr	r3, [r7, #28]
 8003722:	08da      	lsrs	r2, r3, #3
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	3208      	adds	r2, #8
 8003728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800372c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800372e:	69fb      	ldr	r3, [r7, #28]
 8003730:	f003 0307 	and.w	r3, r3, #7
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	220f      	movs	r2, #15
 8003738:	fa02 f303 	lsl.w	r3, r2, r3
 800373c:	43db      	mvns	r3, r3
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	4013      	ands	r3, r2
 8003742:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	691a      	ldr	r2, [r3, #16]
 8003748:	69fb      	ldr	r3, [r7, #28]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	fa02 f303 	lsl.w	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	4313      	orrs	r3, r2
 8003758:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	08da      	lsrs	r2, r3, #3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	3208      	adds	r2, #8
 8003762:	69b9      	ldr	r1, [r7, #24]
 8003764:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800376e:	69fb      	ldr	r3, [r7, #28]
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	2203      	movs	r2, #3
 8003774:	fa02 f303 	lsl.w	r3, r2, r3
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f003 0203 	and.w	r2, r3, #3
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	fa02 f303 	lsl.w	r3, r2, r3
 8003790:	69ba      	ldr	r2, [r7, #24]
 8003792:	4313      	orrs	r3, r2
 8003794:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	69ba      	ldr	r2, [r7, #24]
 800379a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80b4 	beq.w	8003912 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80037aa:	2300      	movs	r3, #0
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	4b5f      	ldr	r3, [pc, #380]	; (800392c <HAL_GPIO_Init+0x308>)
 80037b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037b2:	4a5e      	ldr	r2, [pc, #376]	; (800392c <HAL_GPIO_Init+0x308>)
 80037b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80037b8:	6453      	str	r3, [r2, #68]	; 0x44
 80037ba:	4b5c      	ldr	r3, [pc, #368]	; (800392c <HAL_GPIO_Init+0x308>)
 80037bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80037c6:	4a5a      	ldr	r2, [pc, #360]	; (8003930 <HAL_GPIO_Init+0x30c>)
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	089b      	lsrs	r3, r3, #2
 80037cc:	3302      	adds	r3, #2
 80037ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f003 0303 	and.w	r3, r3, #3
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	220f      	movs	r2, #15
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	43db      	mvns	r3, r3
 80037e4:	69ba      	ldr	r2, [r7, #24]
 80037e6:	4013      	ands	r3, r2
 80037e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	4a51      	ldr	r2, [pc, #324]	; (8003934 <HAL_GPIO_Init+0x310>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d02b      	beq.n	800384a <HAL_GPIO_Init+0x226>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a50      	ldr	r2, [pc, #320]	; (8003938 <HAL_GPIO_Init+0x314>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d025      	beq.n	8003846 <HAL_GPIO_Init+0x222>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a4f      	ldr	r2, [pc, #316]	; (800393c <HAL_GPIO_Init+0x318>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d01f      	beq.n	8003842 <HAL_GPIO_Init+0x21e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a4e      	ldr	r2, [pc, #312]	; (8003940 <HAL_GPIO_Init+0x31c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d019      	beq.n	800383e <HAL_GPIO_Init+0x21a>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a4d      	ldr	r2, [pc, #308]	; (8003944 <HAL_GPIO_Init+0x320>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d013      	beq.n	800383a <HAL_GPIO_Init+0x216>
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	4a4c      	ldr	r2, [pc, #304]	; (8003948 <HAL_GPIO_Init+0x324>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d00d      	beq.n	8003836 <HAL_GPIO_Init+0x212>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	4a4b      	ldr	r2, [pc, #300]	; (800394c <HAL_GPIO_Init+0x328>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d007      	beq.n	8003832 <HAL_GPIO_Init+0x20e>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	4a4a      	ldr	r2, [pc, #296]	; (8003950 <HAL_GPIO_Init+0x32c>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d101      	bne.n	800382e <HAL_GPIO_Init+0x20a>
 800382a:	2307      	movs	r3, #7
 800382c:	e00e      	b.n	800384c <HAL_GPIO_Init+0x228>
 800382e:	2308      	movs	r3, #8
 8003830:	e00c      	b.n	800384c <HAL_GPIO_Init+0x228>
 8003832:	2306      	movs	r3, #6
 8003834:	e00a      	b.n	800384c <HAL_GPIO_Init+0x228>
 8003836:	2305      	movs	r3, #5
 8003838:	e008      	b.n	800384c <HAL_GPIO_Init+0x228>
 800383a:	2304      	movs	r3, #4
 800383c:	e006      	b.n	800384c <HAL_GPIO_Init+0x228>
 800383e:	2303      	movs	r3, #3
 8003840:	e004      	b.n	800384c <HAL_GPIO_Init+0x228>
 8003842:	2302      	movs	r3, #2
 8003844:	e002      	b.n	800384c <HAL_GPIO_Init+0x228>
 8003846:	2301      	movs	r3, #1
 8003848:	e000      	b.n	800384c <HAL_GPIO_Init+0x228>
 800384a:	2300      	movs	r3, #0
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	f002 0203 	and.w	r2, r2, #3
 8003852:	0092      	lsls	r2, r2, #2
 8003854:	4093      	lsls	r3, r2
 8003856:	69ba      	ldr	r2, [r7, #24]
 8003858:	4313      	orrs	r3, r2
 800385a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800385c:	4934      	ldr	r1, [pc, #208]	; (8003930 <HAL_GPIO_Init+0x30c>)
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	089b      	lsrs	r3, r3, #2
 8003862:	3302      	adds	r3, #2
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800386a:	4b3a      	ldr	r3, [pc, #232]	; (8003954 <HAL_GPIO_Init+0x330>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	43db      	mvns	r3, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4013      	ands	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d003      	beq.n	800388e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003886:	69ba      	ldr	r2, [r7, #24]
 8003888:	693b      	ldr	r3, [r7, #16]
 800388a:	4313      	orrs	r3, r2
 800388c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800388e:	4a31      	ldr	r2, [pc, #196]	; (8003954 <HAL_GPIO_Init+0x330>)
 8003890:	69bb      	ldr	r3, [r7, #24]
 8003892:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003894:	4b2f      	ldr	r3, [pc, #188]	; (8003954 <HAL_GPIO_Init+0x330>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800389a:	693b      	ldr	r3, [r7, #16]
 800389c:	43db      	mvns	r3, r3
 800389e:	69ba      	ldr	r2, [r7, #24]
 80038a0:	4013      	ands	r3, r2
 80038a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d003      	beq.n	80038b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	4313      	orrs	r3, r2
 80038b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80038b8:	4a26      	ldr	r2, [pc, #152]	; (8003954 <HAL_GPIO_Init+0x330>)
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80038be:	4b25      	ldr	r3, [pc, #148]	; (8003954 <HAL_GPIO_Init+0x330>)
 80038c0:	689b      	ldr	r3, [r3, #8]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	43db      	mvns	r3, r3
 80038c8:	69ba      	ldr	r2, [r7, #24]
 80038ca:	4013      	ands	r3, r2
 80038cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d003      	beq.n	80038e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80038da:	69ba      	ldr	r2, [r7, #24]
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	4313      	orrs	r3, r2
 80038e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80038e2:	4a1c      	ldr	r2, [pc, #112]	; (8003954 <HAL_GPIO_Init+0x330>)
 80038e4:	69bb      	ldr	r3, [r7, #24]
 80038e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80038e8:	4b1a      	ldr	r3, [pc, #104]	; (8003954 <HAL_GPIO_Init+0x330>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	43db      	mvns	r3, r3
 80038f2:	69ba      	ldr	r2, [r7, #24]
 80038f4:	4013      	ands	r3, r2
 80038f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800390c:	4a11      	ldr	r2, [pc, #68]	; (8003954 <HAL_GPIO_Init+0x330>)
 800390e:	69bb      	ldr	r3, [r7, #24]
 8003910:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	3301      	adds	r3, #1
 8003916:	61fb      	str	r3, [r7, #28]
 8003918:	69fb      	ldr	r3, [r7, #28]
 800391a:	2b0f      	cmp	r3, #15
 800391c:	f67f ae90 	bls.w	8003640 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003920:	bf00      	nop
 8003922:	3724      	adds	r7, #36	; 0x24
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	40023800 	.word	0x40023800
 8003930:	40013800 	.word	0x40013800
 8003934:	40020000 	.word	0x40020000
 8003938:	40020400 	.word	0x40020400
 800393c:	40020800 	.word	0x40020800
 8003940:	40020c00 	.word	0x40020c00
 8003944:	40021000 	.word	0x40021000
 8003948:	40021400 	.word	0x40021400
 800394c:	40021800 	.word	0x40021800
 8003950:	40021c00 	.word	0x40021c00
 8003954:	40013c00 	.word	0x40013c00

08003958 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003958:	b480      	push	{r7}
 800395a:	b083      	sub	sp, #12
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
 8003960:	460b      	mov	r3, r1
 8003962:	807b      	strh	r3, [r7, #2]
 8003964:	4613      	mov	r3, r2
 8003966:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003968:	787b      	ldrb	r3, [r7, #1]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d003      	beq.n	8003976 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800396e:	887a      	ldrh	r2, [r7, #2]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003974:	e003      	b.n	800397e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003976:	887b      	ldrh	r3, [r7, #2]
 8003978:	041a      	lsls	r2, r3, #16
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	619a      	str	r2, [r3, #24]
}
 800397e:	bf00      	nop
 8003980:	370c      	adds	r7, #12
 8003982:	46bd      	mov	sp, r7
 8003984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003988:	4770      	bx	lr

0800398a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800398a:	b480      	push	{r7}
 800398c:	b083      	sub	sp, #12
 800398e:	af00      	add	r7, sp, #0
 8003990:	6078      	str	r0, [r7, #4]
 8003992:	460b      	mov	r3, r1
 8003994:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	887b      	ldrh	r3, [r7, #2]
 800399c:	401a      	ands	r2, r3
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d104      	bne.n	80039ae <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80039a4:	887b      	ldrh	r3, [r7, #2]
 80039a6:	041a      	lsls	r2, r3, #16
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80039ac:	e002      	b.n	80039b4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80039ae:	887a      	ldrh	r2, [r7, #2]
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	619a      	str	r2, [r3, #24]
}
 80039b4:	bf00      	nop
 80039b6:	370c      	adds	r7, #12
 80039b8:	46bd      	mov	sp, r7
 80039ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039be:	4770      	bx	lr

080039c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80039ca:	4b08      	ldr	r3, [pc, #32]	; (80039ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039cc:	695a      	ldr	r2, [r3, #20]
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d006      	beq.n	80039e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80039d6:	4a05      	ldr	r2, [pc, #20]	; (80039ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80039d8:	88fb      	ldrh	r3, [r7, #6]
 80039da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80039dc:	88fb      	ldrh	r3, [r7, #6]
 80039de:	4618      	mov	r0, r3
 80039e0:	f7fd fae2 	bl	8000fa8 <HAL_GPIO_EXTI_Callback>
  }
}
 80039e4:	bf00      	nop
 80039e6:	3708      	adds	r7, #8
 80039e8:	46bd      	mov	sp, r7
 80039ea:	bd80      	pop	{r7, pc}
 80039ec:	40013c00 	.word	0x40013c00

080039f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b086      	sub	sp, #24
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039fe:	2301      	movs	r3, #1
 8003a00:	e25b      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d075      	beq.n	8003afa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a0e:	4ba3      	ldr	r3, [pc, #652]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d00c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a1a:	4ba0      	ldr	r3, [pc, #640]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d112      	bne.n	8003a4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a26:	4b9d      	ldr	r3, [pc, #628]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a32:	d10b      	bne.n	8003a4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a34:	4b99      	ldr	r3, [pc, #612]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d05b      	beq.n	8003af8 <HAL_RCC_OscConfig+0x108>
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d157      	bne.n	8003af8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	e236      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a54:	d106      	bne.n	8003a64 <HAL_RCC_OscConfig+0x74>
 8003a56:	4b91      	ldr	r3, [pc, #580]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a90      	ldr	r2, [pc, #576]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a60:	6013      	str	r3, [r2, #0]
 8003a62:	e01d      	b.n	8003aa0 <HAL_RCC_OscConfig+0xb0>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a6c:	d10c      	bne.n	8003a88 <HAL_RCC_OscConfig+0x98>
 8003a6e:	4b8b      	ldr	r3, [pc, #556]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a8a      	ldr	r2, [pc, #552]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	4b88      	ldr	r3, [pc, #544]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a87      	ldr	r2, [pc, #540]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a84:	6013      	str	r3, [r2, #0]
 8003a86:	e00b      	b.n	8003aa0 <HAL_RCC_OscConfig+0xb0>
 8003a88:	4b84      	ldr	r3, [pc, #528]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a83      	ldr	r2, [pc, #524]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b81      	ldr	r3, [pc, #516]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4a80      	ldr	r2, [pc, #512]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003a9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d013      	beq.n	8003ad0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003aa8:	f7ff f8ec 	bl	8002c84 <HAL_GetTick>
 8003aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aae:	e008      	b.n	8003ac2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ab0:	f7ff f8e8 	bl	8002c84 <HAL_GetTick>
 8003ab4:	4602      	mov	r2, r0
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	1ad3      	subs	r3, r2, r3
 8003aba:	2b64      	cmp	r3, #100	; 0x64
 8003abc:	d901      	bls.n	8003ac2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	e1fb      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ac2:	4b76      	ldr	r3, [pc, #472]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d0f0      	beq.n	8003ab0 <HAL_RCC_OscConfig+0xc0>
 8003ace:	e014      	b.n	8003afa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ad0:	f7ff f8d8 	bl	8002c84 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ad8:	f7ff f8d4 	bl	8002c84 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b64      	cmp	r3, #100	; 0x64
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e1e7      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aea:	4b6c      	ldr	r3, [pc, #432]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d1f0      	bne.n	8003ad8 <HAL_RCC_OscConfig+0xe8>
 8003af6:	e000      	b.n	8003afa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003af8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0302 	and.w	r3, r3, #2
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d063      	beq.n	8003bce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b06:	4b65      	ldr	r3, [pc, #404]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 030c 	and.w	r3, r3, #12
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d00b      	beq.n	8003b2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b12:	4b62      	ldr	r3, [pc, #392]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b1a:	2b08      	cmp	r3, #8
 8003b1c:	d11c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b1e:	4b5f      	ldr	r3, [pc, #380]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d116      	bne.n	8003b58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b2a:	4b5c      	ldr	r3, [pc, #368]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0302 	and.w	r3, r3, #2
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d005      	beq.n	8003b42 <HAL_RCC_OscConfig+0x152>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d001      	beq.n	8003b42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	e1bb      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b42:	4b56      	ldr	r3, [pc, #344]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	00db      	lsls	r3, r3, #3
 8003b50:	4952      	ldr	r1, [pc, #328]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b56:	e03a      	b.n	8003bce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d020      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b60:	4b4f      	ldr	r3, [pc, #316]	; (8003ca0 <HAL_RCC_OscConfig+0x2b0>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b66:	f7ff f88d 	bl	8002c84 <HAL_GetTick>
 8003b6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b6e:	f7ff f889 	bl	8002c84 <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e19c      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b80:	4b46      	ldr	r3, [pc, #280]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 0302 	and.w	r3, r3, #2
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b8c:	4b43      	ldr	r3, [pc, #268]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691b      	ldr	r3, [r3, #16]
 8003b98:	00db      	lsls	r3, r3, #3
 8003b9a:	4940      	ldr	r1, [pc, #256]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	600b      	str	r3, [r1, #0]
 8003ba0:	e015      	b.n	8003bce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ba2:	4b3f      	ldr	r3, [pc, #252]	; (8003ca0 <HAL_RCC_OscConfig+0x2b0>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ba8:	f7ff f86c 	bl	8002c84 <HAL_GetTick>
 8003bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bae:	e008      	b.n	8003bc2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bb0:	f7ff f868 	bl	8002c84 <HAL_GetTick>
 8003bb4:	4602      	mov	r2, r0
 8003bb6:	693b      	ldr	r3, [r7, #16]
 8003bb8:	1ad3      	subs	r3, r2, r3
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d901      	bls.n	8003bc2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e17b      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bc2:	4b36      	ldr	r3, [pc, #216]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d1f0      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 0308 	and.w	r3, r3, #8
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d030      	beq.n	8003c3c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	695b      	ldr	r3, [r3, #20]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d016      	beq.n	8003c10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003be2:	4b30      	ldr	r3, [pc, #192]	; (8003ca4 <HAL_RCC_OscConfig+0x2b4>)
 8003be4:	2201      	movs	r2, #1
 8003be6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003be8:	f7ff f84c 	bl	8002c84 <HAL_GetTick>
 8003bec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bee:	e008      	b.n	8003c02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bf0:	f7ff f848 	bl	8002c84 <HAL_GetTick>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	1ad3      	subs	r3, r2, r3
 8003bfa:	2b02      	cmp	r3, #2
 8003bfc:	d901      	bls.n	8003c02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bfe:	2303      	movs	r3, #3
 8003c00:	e15b      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c02:	4b26      	ldr	r3, [pc, #152]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003c04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c06:	f003 0302 	and.w	r3, r3, #2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d0f0      	beq.n	8003bf0 <HAL_RCC_OscConfig+0x200>
 8003c0e:	e015      	b.n	8003c3c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c10:	4b24      	ldr	r3, [pc, #144]	; (8003ca4 <HAL_RCC_OscConfig+0x2b4>)
 8003c12:	2200      	movs	r2, #0
 8003c14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c16:	f7ff f835 	bl	8002c84 <HAL_GetTick>
 8003c1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c1c:	e008      	b.n	8003c30 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c1e:	f7ff f831 	bl	8002c84 <HAL_GetTick>
 8003c22:	4602      	mov	r2, r0
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d901      	bls.n	8003c30 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003c2c:	2303      	movs	r3, #3
 8003c2e:	e144      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c30:	4b1a      	ldr	r3, [pc, #104]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c34:	f003 0302 	and.w	r3, r3, #2
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d1f0      	bne.n	8003c1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80a0 	beq.w	8003d8a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4e:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d10f      	bne.n	8003c7a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	4b0f      	ldr	r3, [pc, #60]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c62:	4a0e      	ldr	r2, [pc, #56]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c68:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6a:	4b0c      	ldr	r3, [pc, #48]	; (8003c9c <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c72:	60bb      	str	r3, [r7, #8]
 8003c74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c76:	2301      	movs	r3, #1
 8003c78:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c7a:	4b0b      	ldr	r3, [pc, #44]	; (8003ca8 <HAL_RCC_OscConfig+0x2b8>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d121      	bne.n	8003cca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c86:	4b08      	ldr	r3, [pc, #32]	; (8003ca8 <HAL_RCC_OscConfig+0x2b8>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a07      	ldr	r2, [pc, #28]	; (8003ca8 <HAL_RCC_OscConfig+0x2b8>)
 8003c8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c90:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c92:	f7fe fff7 	bl	8002c84 <HAL_GetTick>
 8003c96:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c98:	e011      	b.n	8003cbe <HAL_RCC_OscConfig+0x2ce>
 8003c9a:	bf00      	nop
 8003c9c:	40023800 	.word	0x40023800
 8003ca0:	42470000 	.word	0x42470000
 8003ca4:	42470e80 	.word	0x42470e80
 8003ca8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cac:	f7fe ffea 	bl	8002c84 <HAL_GetTick>
 8003cb0:	4602      	mov	r2, r0
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	1ad3      	subs	r3, r2, r3
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d901      	bls.n	8003cbe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e0fd      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003cbe:	4b81      	ldr	r3, [pc, #516]	; (8003ec4 <HAL_RCC_OscConfig+0x4d4>)
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0f0      	beq.n	8003cac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d106      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x2f0>
 8003cd2:	4b7d      	ldr	r3, [pc, #500]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a7c      	ldr	r2, [pc, #496]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	e01c      	b.n	8003d1a <HAL_RCC_OscConfig+0x32a>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	2b05      	cmp	r3, #5
 8003ce6:	d10c      	bne.n	8003d02 <HAL_RCC_OscConfig+0x312>
 8003ce8:	4b77      	ldr	r3, [pc, #476]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003cea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cec:	4a76      	ldr	r2, [pc, #472]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003cee:	f043 0304 	orr.w	r3, r3, #4
 8003cf2:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf4:	4b74      	ldr	r3, [pc, #464]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003cf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf8:	4a73      	ldr	r2, [pc, #460]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003cfa:	f043 0301 	orr.w	r3, r3, #1
 8003cfe:	6713      	str	r3, [r2, #112]	; 0x70
 8003d00:	e00b      	b.n	8003d1a <HAL_RCC_OscConfig+0x32a>
 8003d02:	4b71      	ldr	r3, [pc, #452]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d06:	4a70      	ldr	r2, [pc, #448]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d08:	f023 0301 	bic.w	r3, r3, #1
 8003d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d0e:	4b6e      	ldr	r3, [pc, #440]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d12:	4a6d      	ldr	r2, [pc, #436]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d14:	f023 0304 	bic.w	r3, r3, #4
 8003d18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d015      	beq.n	8003d4e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d22:	f7fe ffaf 	bl	8002c84 <HAL_GetTick>
 8003d26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d28:	e00a      	b.n	8003d40 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d2a:	f7fe ffab 	bl	8002c84 <HAL_GetTick>
 8003d2e:	4602      	mov	r2, r0
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	1ad3      	subs	r3, r2, r3
 8003d34:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e0bc      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d44:	f003 0302 	and.w	r3, r3, #2
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0ee      	beq.n	8003d2a <HAL_RCC_OscConfig+0x33a>
 8003d4c:	e014      	b.n	8003d78 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d4e:	f7fe ff99 	bl	8002c84 <HAL_GetTick>
 8003d52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d54:	e00a      	b.n	8003d6c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d56:	f7fe ff95 	bl	8002c84 <HAL_GetTick>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	1ad3      	subs	r3, r2, r3
 8003d60:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d901      	bls.n	8003d6c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e0a6      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d6c:	4b56      	ldr	r3, [pc, #344]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ee      	bne.n	8003d56 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d78:	7dfb      	ldrb	r3, [r7, #23]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d105      	bne.n	8003d8a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d7e:	4b52      	ldr	r3, [pc, #328]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d82:	4a51      	ldr	r2, [pc, #324]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 8092 	beq.w	8003eb8 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d94:	4b4c      	ldr	r3, [pc, #304]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	f003 030c 	and.w	r3, r3, #12
 8003d9c:	2b08      	cmp	r3, #8
 8003d9e:	d05c      	beq.n	8003e5a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	699b      	ldr	r3, [r3, #24]
 8003da4:	2b02      	cmp	r3, #2
 8003da6:	d141      	bne.n	8003e2c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003da8:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <HAL_RCC_OscConfig+0x4dc>)
 8003daa:	2200      	movs	r2, #0
 8003dac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fe ff69 	bl	8002c84 <HAL_GetTick>
 8003db2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db4:	e008      	b.n	8003dc8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db6:	f7fe ff65 	bl	8002c84 <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d901      	bls.n	8003dc8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e078      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003dc8:	4b3f      	ldr	r3, [pc, #252]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1f0      	bne.n	8003db6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a1b      	ldr	r3, [r3, #32]
 8003ddc:	431a      	orrs	r2, r3
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	019b      	lsls	r3, r3, #6
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dea:	085b      	lsrs	r3, r3, #1
 8003dec:	3b01      	subs	r3, #1
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	431a      	orrs	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df6:	061b      	lsls	r3, r3, #24
 8003df8:	4933      	ldr	r1, [pc, #204]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003dfe:	4b33      	ldr	r3, [pc, #204]	; (8003ecc <HAL_RCC_OscConfig+0x4dc>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e04:	f7fe ff3e 	bl	8002c84 <HAL_GetTick>
 8003e08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e0c:	f7fe ff3a 	bl	8002c84 <HAL_GetTick>
 8003e10:	4602      	mov	r2, r0
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	1ad3      	subs	r3, r2, r3
 8003e16:	2b02      	cmp	r3, #2
 8003e18:	d901      	bls.n	8003e1e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003e1a:	2303      	movs	r3, #3
 8003e1c:	e04d      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e1e:	4b2a      	ldr	r3, [pc, #168]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d0f0      	beq.n	8003e0c <HAL_RCC_OscConfig+0x41c>
 8003e2a:	e045      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2c:	4b27      	ldr	r3, [pc, #156]	; (8003ecc <HAL_RCC_OscConfig+0x4dc>)
 8003e2e:	2200      	movs	r2, #0
 8003e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e32:	f7fe ff27 	bl	8002c84 <HAL_GetTick>
 8003e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e38:	e008      	b.n	8003e4c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e3a:	f7fe ff23 	bl	8002c84 <HAL_GetTick>
 8003e3e:	4602      	mov	r2, r0
 8003e40:	693b      	ldr	r3, [r7, #16]
 8003e42:	1ad3      	subs	r3, r2, r3
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d901      	bls.n	8003e4c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003e48:	2303      	movs	r3, #3
 8003e4a:	e036      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4c:	4b1e      	ldr	r3, [pc, #120]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1f0      	bne.n	8003e3a <HAL_RCC_OscConfig+0x44a>
 8003e58:	e02e      	b.n	8003eb8 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	699b      	ldr	r3, [r3, #24]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e029      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e66:	4b18      	ldr	r3, [pc, #96]	; (8003ec8 <HAL_RCC_OscConfig+0x4d8>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	69db      	ldr	r3, [r3, #28]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d11c      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d115      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003e88:	68fa      	ldr	r2, [r7, #12]
 8003e8a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e8e:	4013      	ands	r3, r2
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10d      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003eb0:	429a      	cmp	r2, r3
 8003eb2:	d001      	beq.n	8003eb8 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e000      	b.n	8003eba <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003eb8:	2300      	movs	r3, #0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3718      	adds	r7, #24
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	40007000 	.word	0x40007000
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	42470060 	.word	0x42470060

08003ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0cc      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b68      	ldr	r3, [pc, #416]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 030f 	and.w	r3, r3, #15
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d90c      	bls.n	8003f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b65      	ldr	r3, [pc, #404]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	4b63      	ldr	r3, [pc, #396]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 030f 	and.w	r3, r3, #15
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0b8      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d020      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f24:	4b59      	ldr	r3, [pc, #356]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a58      	ldr	r2, [pc, #352]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f3c:	4b53      	ldr	r3, [pc, #332]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a52      	ldr	r2, [pc, #328]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f48:	4b50      	ldr	r3, [pc, #320]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	494d      	ldr	r1, [pc, #308]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d044      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	4b47      	ldr	r3, [pc, #284]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d119      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e07f      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d003      	beq.n	8003f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e06f      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9e:	4b3b      	ldr	r3, [pc, #236]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e067      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f023 0203 	bic.w	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4934      	ldr	r1, [pc, #208]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc0:	f7fe fe60 	bl	8002c84 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc8:	f7fe fe5c 	bl	8002c84 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e04f      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 020c 	and.w	r2, r3, #12
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d1eb      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 030f 	and.w	r3, r3, #15
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d20c      	bcs.n	8004018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e032      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4916      	ldr	r1, [pc, #88]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	490e      	ldr	r1, [pc, #56]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004056:	f000 f821 	bl	800409c <HAL_RCC_GetSysClockFreq>
 800405a:	4601      	mov	r1, r0
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	4a0a      	ldr	r2, [pc, #40]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	5cd3      	ldrb	r3, [r2, r3]
 800406a:	fa21 f303 	lsr.w	r3, r1, r3
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fdc0 	bl	8002bfc <HAL_InitTick>

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023c00 	.word	0x40023c00
 800408c:	40023800 	.word	0x40023800
 8004090:	0800a5d8 	.word	0x0800a5d8
 8004094:	20000008 	.word	0x20000008
 8004098:	2000000c 	.word	0x2000000c

0800409c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800409e:	b085      	sub	sp, #20
 80040a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a2:	2300      	movs	r3, #0
 80040a4:	607b      	str	r3, [r7, #4]
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80040ae:	2300      	movs	r3, #0
 80040b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b2:	4b50      	ldr	r3, [pc, #320]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 030c 	and.w	r3, r3, #12
 80040ba:	2b04      	cmp	r3, #4
 80040bc:	d007      	beq.n	80040ce <HAL_RCC_GetSysClockFreq+0x32>
 80040be:	2b08      	cmp	r3, #8
 80040c0:	d008      	beq.n	80040d4 <HAL_RCC_GetSysClockFreq+0x38>
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 808d 	bne.w	80041e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c8:	4b4b      	ldr	r3, [pc, #300]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80040ca:	60bb      	str	r3, [r7, #8]
       break;
 80040cc:	e08c      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ce:	4b4b      	ldr	r3, [pc, #300]	; (80041fc <HAL_RCC_GetSysClockFreq+0x160>)
 80040d0:	60bb      	str	r3, [r7, #8]
      break;
 80040d2:	e089      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d4:	4b47      	ldr	r3, [pc, #284]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040dc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040de:	4b45      	ldr	r3, [pc, #276]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80040e0:	685b      	ldr	r3, [r3, #4]
 80040e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d023      	beq.n	8004132 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040ea:	4b42      	ldr	r3, [pc, #264]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80040ec:	685b      	ldr	r3, [r3, #4]
 80040ee:	099b      	lsrs	r3, r3, #6
 80040f0:	f04f 0400 	mov.w	r4, #0
 80040f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80040f8:	f04f 0200 	mov.w	r2, #0
 80040fc:	ea03 0501 	and.w	r5, r3, r1
 8004100:	ea04 0602 	and.w	r6, r4, r2
 8004104:	4a3d      	ldr	r2, [pc, #244]	; (80041fc <HAL_RCC_GetSysClockFreq+0x160>)
 8004106:	fb02 f106 	mul.w	r1, r2, r6
 800410a:	2200      	movs	r2, #0
 800410c:	fb02 f205 	mul.w	r2, r2, r5
 8004110:	440a      	add	r2, r1
 8004112:	493a      	ldr	r1, [pc, #232]	; (80041fc <HAL_RCC_GetSysClockFreq+0x160>)
 8004114:	fba5 0101 	umull	r0, r1, r5, r1
 8004118:	1853      	adds	r3, r2, r1
 800411a:	4619      	mov	r1, r3
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	f04f 0400 	mov.w	r4, #0
 8004122:	461a      	mov	r2, r3
 8004124:	4623      	mov	r3, r4
 8004126:	f7fc fdbf 	bl	8000ca8 <__aeabi_uldivmod>
 800412a:	4603      	mov	r3, r0
 800412c:	460c      	mov	r4, r1
 800412e:	60fb      	str	r3, [r7, #12]
 8004130:	e049      	b.n	80041c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004132:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	099b      	lsrs	r3, r3, #6
 8004138:	f04f 0400 	mov.w	r4, #0
 800413c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004140:	f04f 0200 	mov.w	r2, #0
 8004144:	ea03 0501 	and.w	r5, r3, r1
 8004148:	ea04 0602 	and.w	r6, r4, r2
 800414c:	4629      	mov	r1, r5
 800414e:	4632      	mov	r2, r6
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	f04f 0400 	mov.w	r4, #0
 8004158:	0154      	lsls	r4, r2, #5
 800415a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800415e:	014b      	lsls	r3, r1, #5
 8004160:	4619      	mov	r1, r3
 8004162:	4622      	mov	r2, r4
 8004164:	1b49      	subs	r1, r1, r5
 8004166:	eb62 0206 	sbc.w	r2, r2, r6
 800416a:	f04f 0300 	mov.w	r3, #0
 800416e:	f04f 0400 	mov.w	r4, #0
 8004172:	0194      	lsls	r4, r2, #6
 8004174:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004178:	018b      	lsls	r3, r1, #6
 800417a:	1a5b      	subs	r3, r3, r1
 800417c:	eb64 0402 	sbc.w	r4, r4, r2
 8004180:	f04f 0100 	mov.w	r1, #0
 8004184:	f04f 0200 	mov.w	r2, #0
 8004188:	00e2      	lsls	r2, r4, #3
 800418a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800418e:	00d9      	lsls	r1, r3, #3
 8004190:	460b      	mov	r3, r1
 8004192:	4614      	mov	r4, r2
 8004194:	195b      	adds	r3, r3, r5
 8004196:	eb44 0406 	adc.w	r4, r4, r6
 800419a:	f04f 0100 	mov.w	r1, #0
 800419e:	f04f 0200 	mov.w	r2, #0
 80041a2:	02a2      	lsls	r2, r4, #10
 80041a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80041a8:	0299      	lsls	r1, r3, #10
 80041aa:	460b      	mov	r3, r1
 80041ac:	4614      	mov	r4, r2
 80041ae:	4618      	mov	r0, r3
 80041b0:	4621      	mov	r1, r4
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	f04f 0400 	mov.w	r4, #0
 80041b8:	461a      	mov	r2, r3
 80041ba:	4623      	mov	r3, r4
 80041bc:	f7fc fd74 	bl	8000ca8 <__aeabi_uldivmod>
 80041c0:	4603      	mov	r3, r0
 80041c2:	460c      	mov	r4, r1
 80041c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041c6:	4b0b      	ldr	r3, [pc, #44]	; (80041f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80041c8:	685b      	ldr	r3, [r3, #4]
 80041ca:	0c1b      	lsrs	r3, r3, #16
 80041cc:	f003 0303 	and.w	r3, r3, #3
 80041d0:	3301      	adds	r3, #1
 80041d2:	005b      	lsls	r3, r3, #1
 80041d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	fbb2 f3f3 	udiv	r3, r2, r3
 80041de:	60bb      	str	r3, [r7, #8]
      break;
 80041e0:	e002      	b.n	80041e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041e2:	4b05      	ldr	r3, [pc, #20]	; (80041f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80041e4:	60bb      	str	r3, [r7, #8]
      break;
 80041e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041e8:	68bb      	ldr	r3, [r7, #8]
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041f2:	bf00      	nop
 80041f4:	40023800 	.word	0x40023800
 80041f8:	00f42400 	.word	0x00f42400
 80041fc:	017d7840 	.word	0x017d7840

08004200 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004200:	b480      	push	{r7}
 8004202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004204:	4b03      	ldr	r3, [pc, #12]	; (8004214 <HAL_RCC_GetHCLKFreq+0x14>)
 8004206:	681b      	ldr	r3, [r3, #0]
}
 8004208:	4618      	mov	r0, r3
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000008 	.word	0x20000008

08004218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800421c:	f7ff fff0 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004220:	4601      	mov	r1, r0
 8004222:	4b05      	ldr	r3, [pc, #20]	; (8004238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	0a9b      	lsrs	r3, r3, #10
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	4a03      	ldr	r2, [pc, #12]	; (800423c <HAL_RCC_GetPCLK1Freq+0x24>)
 800422e:	5cd3      	ldrb	r3, [r2, r3]
 8004230:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004234:	4618      	mov	r0, r3
 8004236:	bd80      	pop	{r7, pc}
 8004238:	40023800 	.word	0x40023800
 800423c:	0800a5e8 	.word	0x0800a5e8

08004240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004244:	f7ff ffdc 	bl	8004200 <HAL_RCC_GetHCLKFreq>
 8004248:	4601      	mov	r1, r0
 800424a:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	0b5b      	lsrs	r3, r3, #13
 8004250:	f003 0307 	and.w	r3, r3, #7
 8004254:	4a03      	ldr	r2, [pc, #12]	; (8004264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004256:	5cd3      	ldrb	r3, [r2, r3]
 8004258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800425c:	4618      	mov	r0, r3
 800425e:	bd80      	pop	{r7, pc}
 8004260:	40023800 	.word	0x40023800
 8004264:	0800a5e8 	.word	0x0800a5e8

08004268 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e01d      	b.n	80042b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fe f9aa 	bl	80025e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2202      	movs	r2, #2
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3304      	adds	r3, #4
 80042a4:	4619      	mov	r1, r3
 80042a6:	4610      	mov	r0, r2
 80042a8:	f000 fd82 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	3708      	adds	r7, #8
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}

080042be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042be:	b480      	push	{r7}
 80042c0:	b085      	sub	sp, #20
 80042c2:	af00      	add	r7, sp, #0
 80042c4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	68da      	ldr	r2, [r3, #12]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f042 0201 	orr.w	r2, r2, #1
 80042d4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f003 0307 	and.w	r3, r3, #7
 80042e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d007      	beq.n	80042f8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80042f8:	2300      	movs	r3, #0
}
 80042fa:	4618      	mov	r0, r3
 80042fc:	3714      	adds	r7, #20
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b082      	sub	sp, #8
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d101      	bne.n	8004318 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e01d      	b.n	8004354 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800431e:	b2db      	uxtb	r3, r3
 8004320:	2b00      	cmp	r3, #0
 8004322:	d106      	bne.n	8004332 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800432c:	6878      	ldr	r0, [r7, #4]
 800432e:	f000 f815 	bl	800435c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	2202      	movs	r2, #2
 8004336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	3304      	adds	r3, #4
 8004342:	4619      	mov	r1, r3
 8004344:	4610      	mov	r0, r2
 8004346:	f000 fd33 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2201      	movs	r2, #1
 800434e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr

08004370 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b086      	sub	sp, #24
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
 800437c:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004384:	b2db      	uxtb	r3, r3
 8004386:	2b02      	cmp	r3, #2
 8004388:	d101      	bne.n	800438e <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 800438a:	2302      	movs	r3, #2
 800438c:	e0f3      	b.n	8004576 <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004394:	b2db      	uxtb	r3, r3
 8004396:	2b01      	cmp	r3, #1
 8004398:	d10b      	bne.n	80043b2 <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d104      	bne.n	80043aa <HAL_TIM_PWM_Start_DMA+0x3a>
 80043a0:	887b      	ldrh	r3, [r7, #2]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d001      	beq.n	80043aa <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e0e5      	b.n	8004576 <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2202      	movs	r2, #2
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	2b0c      	cmp	r3, #12
 80043b6:	f200 80ad 	bhi.w	8004514 <HAL_TIM_PWM_Start_DMA+0x1a4>
 80043ba:	a201      	add	r2, pc, #4	; (adr r2, 80043c0 <HAL_TIM_PWM_Start_DMA+0x50>)
 80043bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c0:	080043f5 	.word	0x080043f5
 80043c4:	08004515 	.word	0x08004515
 80043c8:	08004515 	.word	0x08004515
 80043cc:	08004515 	.word	0x08004515
 80043d0:	0800443d 	.word	0x0800443d
 80043d4:	08004515 	.word	0x08004515
 80043d8:	08004515 	.word	0x08004515
 80043dc:	08004515 	.word	0x08004515
 80043e0:	08004485 	.word	0x08004485
 80043e4:	08004515 	.word	0x08004515
 80043e8:	08004515 	.word	0x08004515
 80043ec:	08004515 	.word	0x08004515
 80043f0:	080044cd 	.word	0x080044cd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043f8:	4a61      	ldr	r2, [pc, #388]	; (8004580 <HAL_TIM_PWM_Start_DMA+0x210>)
 80043fa:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	4a60      	ldr	r2, [pc, #384]	; (8004584 <HAL_TIM_PWM_Start_DMA+0x214>)
 8004402:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004408:	4a5f      	ldr	r2, [pc, #380]	; (8004588 <HAL_TIM_PWM_Start_DMA+0x218>)
 800440a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8004410:	6879      	ldr	r1, [r7, #4]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	3334      	adds	r3, #52	; 0x34
 8004418:	461a      	mov	r2, r3
 800441a:	887b      	ldrh	r3, [r7, #2]
 800441c:	f7fe fe20 	bl	8003060 <HAL_DMA_Start_IT>
 8004420:	4603      	mov	r3, r0
 8004422:	2b00      	cmp	r3, #0
 8004424:	d001      	beq.n	800442a <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e0a5      	b.n	8004576 <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68da      	ldr	r2, [r3, #12]
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004438:	60da      	str	r2, [r3, #12]
      break;
 800443a:	e06c      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004440:	4a4f      	ldr	r2, [pc, #316]	; (8004580 <HAL_TIM_PWM_Start_DMA+0x210>)
 8004442:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004448:	4a4e      	ldr	r2, [pc, #312]	; (8004584 <HAL_TIM_PWM_Start_DMA+0x214>)
 800444a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004450:	4a4d      	ldr	r2, [pc, #308]	; (8004588 <HAL_TIM_PWM_Start_DMA+0x218>)
 8004452:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8004458:	6879      	ldr	r1, [r7, #4]
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	3338      	adds	r3, #56	; 0x38
 8004460:	461a      	mov	r2, r3
 8004462:	887b      	ldrh	r3, [r7, #2]
 8004464:	f7fe fdfc 	bl	8003060 <HAL_DMA_Start_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	2b00      	cmp	r3, #0
 800446c:	d001      	beq.n	8004472 <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e081      	b.n	8004576 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68da      	ldr	r2, [r3, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004480:	60da      	str	r2, [r3, #12]
      break;
 8004482:	e048      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004488:	4a3d      	ldr	r2, [pc, #244]	; (8004580 <HAL_TIM_PWM_Start_DMA+0x210>)
 800448a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004490:	4a3c      	ldr	r2, [pc, #240]	; (8004584 <HAL_TIM_PWM_Start_DMA+0x214>)
 8004492:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004498:	4a3b      	ldr	r2, [pc, #236]	; (8004588 <HAL_TIM_PWM_Start_DMA+0x218>)
 800449a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80044a0:	6879      	ldr	r1, [r7, #4]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	333c      	adds	r3, #60	; 0x3c
 80044a8:	461a      	mov	r2, r3
 80044aa:	887b      	ldrh	r3, [r7, #2]
 80044ac:	f7fe fdd8 	bl	8003060 <HAL_DMA_Start_IT>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d001      	beq.n	80044ba <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 80044b6:	2301      	movs	r3, #1
 80044b8:	e05d      	b.n	8004576 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044c8:	60da      	str	r2, [r3, #12]
      break;
 80044ca:	e024      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d0:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <HAL_TIM_PWM_Start_DMA+0x210>)
 80044d2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	4a2a      	ldr	r2, [pc, #168]	; (8004584 <HAL_TIM_PWM_Start_DMA+0x214>)
 80044da:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e0:	4a29      	ldr	r2, [pc, #164]	; (8004588 <HAL_TIM_PWM_Start_DMA+0x218>)
 80044e2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80044e8:	6879      	ldr	r1, [r7, #4]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	3340      	adds	r3, #64	; 0x40
 80044f0:	461a      	mov	r2, r3
 80044f2:	887b      	ldrh	r3, [r7, #2]
 80044f4:	f7fe fdb4 	bl	8003060 <HAL_DMA_Start_IT>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e039      	b.n	8004576 <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68da      	ldr	r2, [r3, #12]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004510:	60da      	str	r2, [r3, #12]
      break;
 8004512:	e000      	b.n	8004516 <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 8004514:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2201      	movs	r2, #1
 800451c:	68b9      	ldr	r1, [r7, #8]
 800451e:	4618      	mov	r0, r3
 8004520:	f000 ff30 	bl	8005384 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a18      	ldr	r2, [pc, #96]	; (800458c <HAL_TIM_PWM_Start_DMA+0x21c>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d004      	beq.n	8004538 <HAL_TIM_PWM_Start_DMA+0x1c8>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	4a17      	ldr	r2, [pc, #92]	; (8004590 <HAL_TIM_PWM_Start_DMA+0x220>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d101      	bne.n	800453c <HAL_TIM_PWM_Start_DMA+0x1cc>
 8004538:	2301      	movs	r3, #1
 800453a:	e000      	b.n	800453e <HAL_TIM_PWM_Start_DMA+0x1ce>
 800453c:	2300      	movs	r3, #0
 800453e:	2b00      	cmp	r3, #0
 8004540:	d007      	beq.n	8004552 <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004550:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	689b      	ldr	r3, [r3, #8]
 8004558:	f003 0307 	and.w	r3, r3, #7
 800455c:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	2b06      	cmp	r3, #6
 8004562:	d007      	beq.n	8004574 <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f042 0201 	orr.w	r2, r2, #1
 8004572:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop
 8004580:	08004ccf 	.word	0x08004ccf
 8004584:	08004d3f 	.word	0x08004d3f
 8004588:	08004cab 	.word	0x08004cab
 800458c:	40010000 	.word	0x40010000
 8004590:	40010400 	.word	0x40010400

08004594 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b086      	sub	sp, #24
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e083      	b.n	80046b0 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fd ff41 	bl	8002444 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045d8:	f023 0307 	bic.w	r3, r3, #7
 80045dc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	3304      	adds	r3, #4
 80045e6:	4619      	mov	r1, r3
 80045e8:	4610      	mov	r0, r2
 80045ea:	f000 fbe1 	bl	8004db0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	6a1b      	ldr	r3, [r3, #32]
 8004604:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4313      	orrs	r3, r2
 800460e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004616:	f023 0303 	bic.w	r3, r3, #3
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	699b      	ldr	r3, [r3, #24]
 8004624:	021b      	lsls	r3, r3, #8
 8004626:	4313      	orrs	r3, r2
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004634:	f023 030c 	bic.w	r3, r3, #12
 8004638:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004640:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004644:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004646:	683b      	ldr	r3, [r7, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	69db      	ldr	r3, [r3, #28]
 800464e:	021b      	lsls	r3, r3, #8
 8004650:	4313      	orrs	r3, r2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	011a      	lsls	r2, r3, #4
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	031b      	lsls	r3, r3, #12
 8004664:	4313      	orrs	r3, r2
 8004666:	693a      	ldr	r2, [r7, #16]
 8004668:	4313      	orrs	r3, r2
 800466a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004672:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800467a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	695b      	ldr	r3, [r3, #20]
 8004684:	011b      	lsls	r3, r3, #4
 8004686:	4313      	orrs	r3, r2
 8004688:	68fa      	ldr	r2, [r7, #12]
 800468a:	4313      	orrs	r3, r2
 800468c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2201      	movs	r2, #1
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	3718      	adds	r7, #24
 80046b4:	46bd      	mov	sp, r7
 80046b6:	bd80      	pop	{r7, pc}

080046b8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
 80046c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d002      	beq.n	80046ce <HAL_TIM_Encoder_Start+0x16>
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d008      	beq.n	80046de <HAL_TIM_Encoder_Start+0x26>
 80046cc:	e00f      	b.n	80046ee <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	2201      	movs	r2, #1
 80046d4:	2100      	movs	r1, #0
 80046d6:	4618      	mov	r0, r3
 80046d8:	f000 fe54 	bl	8005384 <TIM_CCxChannelCmd>
      break;
 80046dc:	e016      	b.n	800470c <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2201      	movs	r2, #1
 80046e4:	2104      	movs	r1, #4
 80046e6:	4618      	mov	r0, r3
 80046e8:	f000 fe4c 	bl	8005384 <TIM_CCxChannelCmd>
      break;
 80046ec:	e00e      	b.n	800470c <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	2201      	movs	r2, #1
 80046f4:	2100      	movs	r1, #0
 80046f6:	4618      	mov	r0, r3
 80046f8:	f000 fe44 	bl	8005384 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2201      	movs	r2, #1
 8004702:	2104      	movs	r1, #4
 8004704:	4618      	mov	r0, r3
 8004706:	f000 fe3d 	bl	8005384 <TIM_CCxChannelCmd>
      break;
 800470a:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f042 0201 	orr.w	r2, r2, #1
 800471a:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3708      	adds	r7, #8
 8004722:	46bd      	mov	sp, r7
 8004724:	bd80      	pop	{r7, pc}

08004726 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004726:	b580      	push	{r7, lr}
 8004728:	b082      	sub	sp, #8
 800472a:	af00      	add	r7, sp, #0
 800472c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f003 0302 	and.w	r3, r3, #2
 8004738:	2b02      	cmp	r3, #2
 800473a:	d122      	bne.n	8004782 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	68db      	ldr	r3, [r3, #12]
 8004742:	f003 0302 	and.w	r3, r3, #2
 8004746:	2b02      	cmp	r3, #2
 8004748:	d11b      	bne.n	8004782 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f06f 0202 	mvn.w	r2, #2
 8004752:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	699b      	ldr	r3, [r3, #24]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004768:	6878      	ldr	r0, [r7, #4]
 800476a:	f000 fa6c 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 800476e:	e005      	b.n	800477c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 fa5e 	bl	8004c32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 fa6f 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2200      	movs	r2, #0
 8004780:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	f003 0304 	and.w	r3, r3, #4
 800478c:	2b04      	cmp	r3, #4
 800478e:	d122      	bne.n	80047d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d11b      	bne.n	80047d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f06f 0204 	mvn.w	r2, #4
 80047a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2202      	movs	r2, #2
 80047ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	699b      	ldr	r3, [r3, #24]
 80047b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d003      	beq.n	80047c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047bc:	6878      	ldr	r0, [r7, #4]
 80047be:	f000 fa42 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 80047c2:	e005      	b.n	80047d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c4:	6878      	ldr	r0, [r7, #4]
 80047c6:	f000 fa34 	bl	8004c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 fa45 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	691b      	ldr	r3, [r3, #16]
 80047dc:	f003 0308 	and.w	r3, r3, #8
 80047e0:	2b08      	cmp	r3, #8
 80047e2:	d122      	bne.n	800482a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	68db      	ldr	r3, [r3, #12]
 80047ea:	f003 0308 	and.w	r3, r3, #8
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d11b      	bne.n	800482a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f06f 0208 	mvn.w	r2, #8
 80047fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2204      	movs	r2, #4
 8004800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	f003 0303 	and.w	r3, r3, #3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d003      	beq.n	8004818 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004810:	6878      	ldr	r0, [r7, #4]
 8004812:	f000 fa18 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 8004816:	e005      	b.n	8004824 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004818:	6878      	ldr	r0, [r7, #4]
 800481a:	f000 fa0a 	bl	8004c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f000 fa1b 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2200      	movs	r2, #0
 8004828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	691b      	ldr	r3, [r3, #16]
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b10      	cmp	r3, #16
 8004836:	d122      	bne.n	800487e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68db      	ldr	r3, [r3, #12]
 800483e:	f003 0310 	and.w	r3, r3, #16
 8004842:	2b10      	cmp	r3, #16
 8004844:	d11b      	bne.n	800487e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	f06f 0210 	mvn.w	r2, #16
 800484e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2208      	movs	r2, #8
 8004854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	69db      	ldr	r3, [r3, #28]
 800485c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004864:	6878      	ldr	r0, [r7, #4]
 8004866:	f000 f9ee 	bl	8004c46 <HAL_TIM_IC_CaptureCallback>
 800486a:	e005      	b.n	8004878 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f000 f9e0 	bl	8004c32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 f9f1 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	f003 0301 	and.w	r3, r3, #1
 8004888:	2b01      	cmp	r3, #1
 800488a:	d10e      	bne.n	80048aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68db      	ldr	r3, [r3, #12]
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b01      	cmp	r3, #1
 8004898:	d107      	bne.n	80048aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f06f 0201 	mvn.w	r2, #1
 80048a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a4:	6878      	ldr	r0, [r7, #4]
 80048a6:	f7fc fba5 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b4:	2b80      	cmp	r3, #128	; 0x80
 80048b6:	d10e      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b80      	cmp	r3, #128	; 0x80
 80048c4:	d107      	bne.n	80048d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f000 fe03 	bl	80054dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d10e      	bne.n	8004902 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d107      	bne.n	8004902 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f000 f9c0 	bl	8004c82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0320 	and.w	r3, r3, #32
 800490c:	2b20      	cmp	r3, #32
 800490e:	d10e      	bne.n	800492e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0320 	and.w	r3, r3, #32
 800491a:	2b20      	cmp	r3, #32
 800491c:	d107      	bne.n	800492e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0220 	mvn.w	r2, #32
 8004926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fdcd 	bl	80054c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800492e:	bf00      	nop
 8004930:	3708      	adds	r7, #8
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b084      	sub	sp, #16
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800494a:	2b01      	cmp	r3, #1
 800494c:	d101      	bne.n	8004952 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800494e:	2302      	movs	r3, #2
 8004950:	e0b4      	b.n	8004abc <HAL_TIM_PWM_ConfigChannel+0x184>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2201      	movs	r2, #1
 8004956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	2202      	movs	r2, #2
 800495e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b0c      	cmp	r3, #12
 8004966:	f200 809f 	bhi.w	8004aa8 <HAL_TIM_PWM_ConfigChannel+0x170>
 800496a:	a201      	add	r2, pc, #4	; (adr r2, 8004970 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800496c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004970:	080049a5 	.word	0x080049a5
 8004974:	08004aa9 	.word	0x08004aa9
 8004978:	08004aa9 	.word	0x08004aa9
 800497c:	08004aa9 	.word	0x08004aa9
 8004980:	080049e5 	.word	0x080049e5
 8004984:	08004aa9 	.word	0x08004aa9
 8004988:	08004aa9 	.word	0x08004aa9
 800498c:	08004aa9 	.word	0x08004aa9
 8004990:	08004a27 	.word	0x08004a27
 8004994:	08004aa9 	.word	0x08004aa9
 8004998:	08004aa9 	.word	0x08004aa9
 800499c:	08004aa9 	.word	0x08004aa9
 80049a0:	08004a67 	.word	0x08004a67
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68b9      	ldr	r1, [r7, #8]
 80049aa:	4618      	mov	r0, r3
 80049ac:	f000 faa0 	bl	8004ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	699a      	ldr	r2, [r3, #24]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0208 	orr.w	r2, r2, #8
 80049be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f022 0204 	bic.w	r2, r2, #4
 80049ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	6999      	ldr	r1, [r3, #24]
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	691a      	ldr	r2, [r3, #16]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	430a      	orrs	r2, r1
 80049e0:	619a      	str	r2, [r3, #24]
      break;
 80049e2:	e062      	b.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68b9      	ldr	r1, [r7, #8]
 80049ea:	4618      	mov	r0, r3
 80049ec:	f000 faf0 	bl	8004fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	699a      	ldr	r2, [r3, #24]
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	699a      	ldr	r2, [r3, #24]
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6999      	ldr	r1, [r3, #24]
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	691b      	ldr	r3, [r3, #16]
 8004a1a:	021a      	lsls	r2, r3, #8
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	430a      	orrs	r2, r1
 8004a22:	619a      	str	r2, [r3, #24]
      break;
 8004a24:	e041      	b.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68b9      	ldr	r1, [r7, #8]
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f000 fb45 	bl	80050bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f042 0208 	orr.w	r2, r2, #8
 8004a40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	69da      	ldr	r2, [r3, #28]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f022 0204 	bic.w	r2, r2, #4
 8004a50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	69d9      	ldr	r1, [r3, #28]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	430a      	orrs	r2, r1
 8004a62:	61da      	str	r2, [r3, #28]
      break;
 8004a64:	e021      	b.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f000 fb99 	bl	80051a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69da      	ldr	r2, [r3, #28]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	69d9      	ldr	r1, [r3, #28]
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	691b      	ldr	r3, [r3, #16]
 8004a9c:	021a      	lsls	r2, r3, #8
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	430a      	orrs	r2, r1
 8004aa4:	61da      	str	r2, [r3, #28]
      break;
 8004aa6:	e000      	b.n	8004aaa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8004aa8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d101      	bne.n	8004adc <HAL_TIM_ConfigClockSource+0x18>
 8004ad8:	2302      	movs	r3, #2
 8004ada:	e0a6      	b.n	8004c2a <HAL_TIM_ConfigClockSource+0x166>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2202      	movs	r2, #2
 8004ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004afa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	68fa      	ldr	r2, [r7, #12]
 8004b0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2b40      	cmp	r3, #64	; 0x40
 8004b12:	d067      	beq.n	8004be4 <HAL_TIM_ConfigClockSource+0x120>
 8004b14:	2b40      	cmp	r3, #64	; 0x40
 8004b16:	d80b      	bhi.n	8004b30 <HAL_TIM_ConfigClockSource+0x6c>
 8004b18:	2b10      	cmp	r3, #16
 8004b1a:	d073      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x140>
 8004b1c:	2b10      	cmp	r3, #16
 8004b1e:	d802      	bhi.n	8004b26 <HAL_TIM_ConfigClockSource+0x62>
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d06f      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8004b24:	e078      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b26:	2b20      	cmp	r3, #32
 8004b28:	d06c      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x140>
 8004b2a:	2b30      	cmp	r3, #48	; 0x30
 8004b2c:	d06a      	beq.n	8004c04 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8004b2e:	e073      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b30:	2b70      	cmp	r3, #112	; 0x70
 8004b32:	d00d      	beq.n	8004b50 <HAL_TIM_ConfigClockSource+0x8c>
 8004b34:	2b70      	cmp	r3, #112	; 0x70
 8004b36:	d804      	bhi.n	8004b42 <HAL_TIM_ConfigClockSource+0x7e>
 8004b38:	2b50      	cmp	r3, #80	; 0x50
 8004b3a:	d033      	beq.n	8004ba4 <HAL_TIM_ConfigClockSource+0xe0>
 8004b3c:	2b60      	cmp	r3, #96	; 0x60
 8004b3e:	d041      	beq.n	8004bc4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8004b40:	e06a      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b46:	d066      	beq.n	8004c16 <HAL_TIM_ConfigClockSource+0x152>
 8004b48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b4c:	d017      	beq.n	8004b7e <HAL_TIM_ConfigClockSource+0xba>
      break;
 8004b4e:	e063      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6818      	ldr	r0, [r3, #0]
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	6899      	ldr	r1, [r3, #8]
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f000 fbf0 	bl	8005344 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b72:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	68fa      	ldr	r2, [r7, #12]
 8004b7a:	609a      	str	r2, [r3, #8]
      break;
 8004b7c:	e04c      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6818      	ldr	r0, [r3, #0]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	6899      	ldr	r1, [r3, #8]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68db      	ldr	r3, [r3, #12]
 8004b8e:	f000 fbd9 	bl	8005344 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ba0:	609a      	str	r2, [r3, #8]
      break;
 8004ba2:	e039      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6818      	ldr	r0, [r3, #0]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	6859      	ldr	r1, [r3, #4]
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	68db      	ldr	r3, [r3, #12]
 8004bb0:	461a      	mov	r2, r3
 8004bb2:	f000 fb4d 	bl	8005250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2150      	movs	r1, #80	; 0x50
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 fba6 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004bc2:	e029      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6818      	ldr	r0, [r3, #0]
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	6859      	ldr	r1, [r3, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	461a      	mov	r2, r3
 8004bd2:	f000 fb6c 	bl	80052ae <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2160      	movs	r1, #96	; 0x60
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fb96 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004be2:	e019      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6818      	ldr	r0, [r3, #0]
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	6859      	ldr	r1, [r3, #4]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	f000 fb2d 	bl	8005250 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2140      	movs	r1, #64	; 0x40
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fb86 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004c02:	e009      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f000 fb7d 	bl	800530e <TIM_ITRx_SetConfig>
      break;
 8004c14:	e000      	b.n	8004c18 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8004c16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr

08004c46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c46:	b480      	push	{r7}
 8004c48:	b083      	sub	sp, #12
 8004c4a:	af00      	add	r7, sp, #0
 8004c4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c4e:	bf00      	nop
 8004c50:	370c      	adds	r7, #12
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr

08004c5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c5a:	b480      	push	{r7}
 8004c5c:	b083      	sub	sp, #12
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c62:	bf00      	nop
 8004c64:	370c      	adds	r7, #12
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b083      	sub	sp, #12
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8004c76:	bf00      	nop
 8004c78:	370c      	adds	r7, #12
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr

08004c82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c82:	b480      	push	{r7}
 8004c84:	b083      	sub	sp, #12
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c8a:	bf00      	nop
 8004c8c:	370c      	adds	r7, #12
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr

08004c96 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8004c96:	b480      	push	{r7}
 8004c98:	b083      	sub	sp, #12
 8004c9a:	af00      	add	r7, sp, #0
 8004c9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8004c9e:	bf00      	nop
 8004ca0:	370c      	adds	r7, #12
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b084      	sub	sp, #16
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cb6:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8004cc0:	68f8      	ldr	r0, [r7, #12]
 8004cc2:	f7ff ffe8 	bl	8004c96 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8004cc6:	bf00      	nop
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}

08004cce <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	b084      	sub	sp, #16
 8004cd2:	af00      	add	r7, sp, #0
 8004cd4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cda:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	429a      	cmp	r2, r3
 8004cec:	d103      	bne.n	8004cf6 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	771a      	strb	r2, [r3, #28]
 8004cf4:	e019      	b.n	8004d2a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d103      	bne.n	8004d08 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2202      	movs	r2, #2
 8004d04:	771a      	strb	r2, [r3, #28]
 8004d06:	e010      	b.n	8004d2a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d0c:	687a      	ldr	r2, [r7, #4]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d103      	bne.n	8004d1a <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2204      	movs	r2, #4
 8004d16:	771a      	strb	r2, [r3, #28]
 8004d18:	e007      	b.n	8004d2a <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d102      	bne.n	8004d2a <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	2208      	movs	r2, #8
 8004d28:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d2a:	68f8      	ldr	r0, [r7, #12]
 8004d2c:	f7ff ff95 	bl	8004c5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	771a      	strb	r2, [r3, #28]
}
 8004d36:	bf00      	nop
 8004d38:	3710      	adds	r7, #16
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}

08004d3e <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2201      	movs	r2, #1
 8004d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d58:	687a      	ldr	r2, [r7, #4]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d103      	bne.n	8004d66 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2201      	movs	r2, #1
 8004d62:	771a      	strb	r2, [r3, #28]
 8004d64:	e019      	b.n	8004d9a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d6a:	687a      	ldr	r2, [r7, #4]
 8004d6c:	429a      	cmp	r2, r3
 8004d6e:	d103      	bne.n	8004d78 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2202      	movs	r2, #2
 8004d74:	771a      	strb	r2, [r3, #28]
 8004d76:	e010      	b.n	8004d9a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	687a      	ldr	r2, [r7, #4]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d103      	bne.n	8004d8a <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2204      	movs	r2, #4
 8004d86:	771a      	strb	r2, [r3, #28]
 8004d88:	e007      	b.n	8004d9a <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d102      	bne.n	8004d9a <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	2208      	movs	r2, #8
 8004d98:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004d9a:	68f8      	ldr	r0, [r7, #12]
 8004d9c:	f7ff ff67 	bl	8004c6e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	771a      	strb	r2, [r3, #28]
}
 8004da6:	bf00      	nop
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a40      	ldr	r2, [pc, #256]	; (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a3d      	ldr	r2, [pc, #244]	; (8004ec8 <TIM_Base_SetConfig+0x118>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a3c      	ldr	r2, [pc, #240]	; (8004ecc <TIM_Base_SetConfig+0x11c>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a3b      	ldr	r2, [pc, #236]	; (8004ed0 <TIM_Base_SetConfig+0x120>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a3a      	ldr	r2, [pc, #232]	; (8004ed4 <TIM_Base_SetConfig+0x124>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a2f      	ldr	r2, [pc, #188]	; (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e10:	d027      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a2c      	ldr	r2, [pc, #176]	; (8004ec8 <TIM_Base_SetConfig+0x118>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d023      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a2b      	ldr	r2, [pc, #172]	; (8004ecc <TIM_Base_SetConfig+0x11c>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <TIM_Base_SetConfig+0x120>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a29      	ldr	r2, [pc, #164]	; (8004ed4 <TIM_Base_SetConfig+0x124>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d017      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a28      	ldr	r2, [pc, #160]	; (8004ed8 <TIM_Base_SetConfig+0x128>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a27      	ldr	r2, [pc, #156]	; (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a25      	ldr	r2, [pc, #148]	; (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a24      	ldr	r2, [pc, #144]	; (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a23      	ldr	r2, [pc, #140]	; (8004eec <TIM_Base_SetConfig+0x13c>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d108      	bne.n	8004e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a0a      	ldr	r2, [pc, #40]	; (8004ec4 <TIM_Base_SetConfig+0x114>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0c      	ldr	r2, [pc, #48]	; (8004ed4 <TIM_Base_SetConfig+0x124>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]
}
 8004eb6:	bf00      	nop
 8004eb8:	3714      	adds	r7, #20
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr
 8004ec2:	bf00      	nop
 8004ec4:	40010000 	.word	0x40010000
 8004ec8:	40000400 	.word	0x40000400
 8004ecc:	40000800 	.word	0x40000800
 8004ed0:	40000c00 	.word	0x40000c00
 8004ed4:	40010400 	.word	0x40010400
 8004ed8:	40014000 	.word	0x40014000
 8004edc:	40014400 	.word	0x40014400
 8004ee0:	40014800 	.word	0x40014800
 8004ee4:	40001800 	.word	0x40001800
 8004ee8:	40001c00 	.word	0x40001c00
 8004eec:	40002000 	.word	0x40002000

08004ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b087      	sub	sp, #28
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6a1b      	ldr	r3, [r3, #32]
 8004efe:	f023 0201 	bic.w	r2, r3, #1
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6a1b      	ldr	r3, [r3, #32]
 8004f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	699b      	ldr	r3, [r3, #24]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f023 0303 	bic.w	r3, r3, #3
 8004f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f023 0302 	bic.w	r3, r3, #2
 8004f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	689b      	ldr	r3, [r3, #8]
 8004f3e:	697a      	ldr	r2, [r7, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a20      	ldr	r2, [pc, #128]	; (8004fc8 <TIM_OC1_SetConfig+0xd8>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d003      	beq.n	8004f54 <TIM_OC1_SetConfig+0x64>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a1f      	ldr	r2, [pc, #124]	; (8004fcc <TIM_OC1_SetConfig+0xdc>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d10c      	bne.n	8004f6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	f023 0308 	bic.w	r3, r3, #8
 8004f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f023 0304 	bic.w	r3, r3, #4
 8004f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a15      	ldr	r2, [pc, #84]	; (8004fc8 <TIM_OC1_SetConfig+0xd8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d003      	beq.n	8004f7e <TIM_OC1_SetConfig+0x8e>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a14      	ldr	r2, [pc, #80]	; (8004fcc <TIM_OC1_SetConfig+0xdc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d111      	bne.n	8004fa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f7e:	693b      	ldr	r3, [r7, #16]
 8004f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	693a      	ldr	r2, [r7, #16]
 8004f94:	4313      	orrs	r3, r2
 8004f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	693a      	ldr	r2, [r7, #16]
 8004fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68fa      	ldr	r2, [r7, #12]
 8004fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	685a      	ldr	r2, [r3, #4]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	697a      	ldr	r2, [r7, #20]
 8004fba:	621a      	str	r2, [r3, #32]
}
 8004fbc:	bf00      	nop
 8004fbe:	371c      	adds	r7, #28
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40010400 	.word	0x40010400

08004fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	f023 0210 	bic.w	r2, r3, #16
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a1b      	ldr	r3, [r3, #32]
 8004fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	021b      	lsls	r3, r3, #8
 800500e:	68fa      	ldr	r2, [r7, #12]
 8005010:	4313      	orrs	r3, r2
 8005012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f023 0320 	bic.w	r3, r3, #32
 800501a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	697a      	ldr	r2, [r7, #20]
 8005024:	4313      	orrs	r3, r2
 8005026:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	4a22      	ldr	r2, [pc, #136]	; (80050b4 <TIM_OC2_SetConfig+0xe4>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d003      	beq.n	8005038 <TIM_OC2_SetConfig+0x68>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	4a21      	ldr	r2, [pc, #132]	; (80050b8 <TIM_OC2_SetConfig+0xe8>)
 8005034:	4293      	cmp	r3, r2
 8005036:	d10d      	bne.n	8005054 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800503e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	011b      	lsls	r3, r3, #4
 8005046:	697a      	ldr	r2, [r7, #20]
 8005048:	4313      	orrs	r3, r2
 800504a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005052:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <TIM_OC2_SetConfig+0xe4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d003      	beq.n	8005064 <TIM_OC2_SetConfig+0x94>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <TIM_OC2_SetConfig+0xe8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d113      	bne.n	800508c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800506a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005072:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	695b      	ldr	r3, [r3, #20]
 8005078:	009b      	lsls	r3, r3, #2
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	699b      	ldr	r3, [r3, #24]
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	693a      	ldr	r2, [r7, #16]
 8005090:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68fa      	ldr	r2, [r7, #12]
 8005096:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	697a      	ldr	r2, [r7, #20]
 80050a4:	621a      	str	r2, [r3, #32]
}
 80050a6:	bf00      	nop
 80050a8:	371c      	adds	r7, #28
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40010400 	.word	0x40010400

080050bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050bc:	b480      	push	{r7}
 80050be:	b087      	sub	sp, #28
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	6a1b      	ldr	r3, [r3, #32]
 80050ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a1b      	ldr	r3, [r3, #32]
 80050d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	69db      	ldr	r3, [r3, #28]
 80050e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0303 	bic.w	r3, r3, #3
 80050f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4313      	orrs	r3, r2
 80050fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005104:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	021b      	lsls	r3, r3, #8
 800510c:	697a      	ldr	r2, [r7, #20]
 800510e:	4313      	orrs	r3, r2
 8005110:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	4a21      	ldr	r2, [pc, #132]	; (800519c <TIM_OC3_SetConfig+0xe0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d003      	beq.n	8005122 <TIM_OC3_SetConfig+0x66>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a20      	ldr	r2, [pc, #128]	; (80051a0 <TIM_OC3_SetConfig+0xe4>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10d      	bne.n	800513e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	021b      	lsls	r3, r3, #8
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800513c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a16      	ldr	r2, [pc, #88]	; (800519c <TIM_OC3_SetConfig+0xe0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d003      	beq.n	800514e <TIM_OC3_SetConfig+0x92>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a15      	ldr	r2, [pc, #84]	; (80051a0 <TIM_OC3_SetConfig+0xe4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d113      	bne.n	8005176 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800515c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	695b      	ldr	r3, [r3, #20]
 8005162:	011b      	lsls	r3, r3, #4
 8005164:	693a      	ldr	r2, [r7, #16]
 8005166:	4313      	orrs	r3, r2
 8005168:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	699b      	ldr	r3, [r3, #24]
 800516e:	011b      	lsls	r3, r3, #4
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4313      	orrs	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	693a      	ldr	r2, [r7, #16]
 800517a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	68fa      	ldr	r2, [r7, #12]
 8005180:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	685a      	ldr	r2, [r3, #4]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	697a      	ldr	r2, [r7, #20]
 800518e:	621a      	str	r2, [r3, #32]
}
 8005190:	bf00      	nop
 8005192:	371c      	adds	r7, #28
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr
 800519c:	40010000 	.word	0x40010000
 80051a0:	40010400 	.word	0x40010400

080051a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b087      	sub	sp, #28
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6a1b      	ldr	r3, [r3, #32]
 80051be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	685b      	ldr	r3, [r3, #4]
 80051c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	69db      	ldr	r3, [r3, #28]
 80051ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	021b      	lsls	r3, r3, #8
 80051e2:	68fa      	ldr	r2, [r7, #12]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80051ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	031b      	lsls	r3, r3, #12
 80051f6:	693a      	ldr	r2, [r7, #16]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <TIM_OC4_SetConfig+0xa4>)
 8005200:	4293      	cmp	r3, r2
 8005202:	d003      	beq.n	800520c <TIM_OC4_SetConfig+0x68>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	4a11      	ldr	r2, [pc, #68]	; (800524c <TIM_OC4_SetConfig+0xa8>)
 8005208:	4293      	cmp	r3, r2
 800520a:	d109      	bne.n	8005220 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005212:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	695b      	ldr	r3, [r3, #20]
 8005218:	019b      	lsls	r3, r3, #6
 800521a:	697a      	ldr	r2, [r7, #20]
 800521c:	4313      	orrs	r3, r2
 800521e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	697a      	ldr	r2, [r7, #20]
 8005224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	621a      	str	r2, [r3, #32]
}
 800523a:	bf00      	nop
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40010000 	.word	0x40010000
 800524c:	40010400 	.word	0x40010400

08005250 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0201 	bic.w	r2, r3, #1
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800527a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	011b      	lsls	r3, r3, #4
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 030a 	bic.w	r3, r3, #10
 800528c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	621a      	str	r2, [r3, #32]
}
 80052a2:	bf00      	nop
 80052a4:	371c      	adds	r7, #28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b087      	sub	sp, #28
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	60f8      	str	r0, [r7, #12]
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f023 0210 	bic.w	r2, r3, #16
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	6a1b      	ldr	r3, [r3, #32]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80052d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	031b      	lsls	r3, r3, #12
 80052de:	697a      	ldr	r2, [r7, #20]
 80052e0:	4313      	orrs	r3, r2
 80052e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80052ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80052ec:	68bb      	ldr	r3, [r7, #8]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	697a      	ldr	r2, [r7, #20]
 80052fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	621a      	str	r2, [r3, #32]
}
 8005302:	bf00      	nop
 8005304:	371c      	adds	r7, #28
 8005306:	46bd      	mov	sp, r7
 8005308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530c:	4770      	bx	lr

0800530e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800530e:	b480      	push	{r7}
 8005310:	b085      	sub	sp, #20
 8005312:	af00      	add	r7, sp, #0
 8005314:	6078      	str	r0, [r7, #4]
 8005316:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005324:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005326:	683a      	ldr	r2, [r7, #0]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	4313      	orrs	r3, r2
 800532c:	f043 0307 	orr.w	r3, r3, #7
 8005330:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	68fa      	ldr	r2, [r7, #12]
 8005336:	609a      	str	r2, [r3, #8]
}
 8005338:	bf00      	nop
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005344:	b480      	push	{r7}
 8005346:	b087      	sub	sp, #28
 8005348:	af00      	add	r7, sp, #0
 800534a:	60f8      	str	r0, [r7, #12]
 800534c:	60b9      	str	r1, [r7, #8]
 800534e:	607a      	str	r2, [r7, #4]
 8005350:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800535e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	021a      	lsls	r2, r3, #8
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	431a      	orrs	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	4313      	orrs	r3, r2
 800536c:	697a      	ldr	r2, [r7, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	697a      	ldr	r2, [r7, #20]
 8005376:	609a      	str	r2, [r3, #8]
}
 8005378:	bf00      	nop
 800537a:	371c      	adds	r7, #28
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005384:	b480      	push	{r7}
 8005386:	b087      	sub	sp, #28
 8005388:	af00      	add	r7, sp, #0
 800538a:	60f8      	str	r0, [r7, #12]
 800538c:	60b9      	str	r1, [r7, #8]
 800538e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	f003 031f 	and.w	r3, r3, #31
 8005396:	2201      	movs	r2, #1
 8005398:	fa02 f303 	lsl.w	r3, r2, r3
 800539c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	6a1a      	ldr	r2, [r3, #32]
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	43db      	mvns	r3, r3
 80053a6:	401a      	ands	r2, r3
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6a1a      	ldr	r2, [r3, #32]
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	f003 031f 	and.w	r3, r3, #31
 80053b6:	6879      	ldr	r1, [r7, #4]
 80053b8:	fa01 f303 	lsl.w	r3, r1, r3
 80053bc:	431a      	orrs	r2, r3
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	621a      	str	r2, [r3, #32]
}
 80053c2:	bf00      	nop
 80053c4:	371c      	adds	r7, #28
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
	...

080053d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b085      	sub	sp, #20
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
 80053d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d101      	bne.n	80053e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053e4:	2302      	movs	r3, #2
 80053e6:	e05a      	b.n	800549e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2201      	movs	r2, #1
 80053ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	2202      	movs	r2, #2
 80053f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800540e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4313      	orrs	r3, r2
 8005418:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	68fa      	ldr	r2, [r7, #12]
 8005420:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a21      	ldr	r2, [pc, #132]	; (80054ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d022      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005434:	d01d      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a1d      	ldr	r2, [pc, #116]	; (80054b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d018      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4a1b      	ldr	r2, [pc, #108]	; (80054b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005446:	4293      	cmp	r3, r2
 8005448:	d013      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a1a      	ldr	r2, [pc, #104]	; (80054b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d00e      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4a18      	ldr	r2, [pc, #96]	; (80054bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d009      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a17      	ldr	r2, [pc, #92]	; (80054c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d004      	beq.n	8005472 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a15      	ldr	r2, [pc, #84]	; (80054c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800546e:	4293      	cmp	r3, r2
 8005470:	d10c      	bne.n	800548c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005478:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4313      	orrs	r3, r2
 8005482:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	68ba      	ldr	r2, [r7, #8]
 800548a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2201      	movs	r2, #1
 8005490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3714      	adds	r7, #20
 80054a2:	46bd      	mov	sp, r7
 80054a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a8:	4770      	bx	lr
 80054aa:	bf00      	nop
 80054ac:	40010000 	.word	0x40010000
 80054b0:	40000400 	.word	0x40000400
 80054b4:	40000800 	.word	0x40000800
 80054b8:	40000c00 	.word	0x40000c00
 80054bc:	40010400 	.word	0x40010400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40001800 	.word	0x40001800

080054c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b083      	sub	sp, #12
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054d0:	bf00      	nop
 80054d2:	370c      	adds	r7, #12
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054dc:	b480      	push	{r7}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054e4:	bf00      	nop
 80054e6:	370c      	adds	r7, #12
 80054e8:	46bd      	mov	sp, r7
 80054ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ee:	4770      	bx	lr

080054f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d101      	bne.n	8005502 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054fe:	2301      	movs	r3, #1
 8005500:	e03f      	b.n	8005582 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b00      	cmp	r3, #0
 800550c:	d106      	bne.n	800551c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f7fd f974 	bl	8002804 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2224      	movs	r2, #36	; 0x24
 8005520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	68da      	ldr	r2, [r3, #12]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005532:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005534:	6878      	ldr	r0, [r7, #4]
 8005536:	f000 faf9 	bl	8005b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	691a      	ldr	r2, [r3, #16]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005548:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	695a      	ldr	r2, [r3, #20]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005558:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005568:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2220      	movs	r2, #32
 8005574:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2220      	movs	r2, #32
 800557c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800558a:	b480      	push	{r7}
 800558c:	b085      	sub	sp, #20
 800558e:	af00      	add	r7, sp, #0
 8005590:	60f8      	str	r0, [r7, #12]
 8005592:	60b9      	str	r1, [r7, #8]
 8005594:	4613      	mov	r3, r2
 8005596:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b20      	cmp	r3, #32
 80055a2:	d130      	bne.n	8005606 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d002      	beq.n	80055b0 <HAL_UART_Transmit_IT+0x26>
 80055aa:	88fb      	ldrh	r3, [r7, #6]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e029      	b.n	8005608 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80055ba:	2b01      	cmp	r3, #1
 80055bc:	d101      	bne.n	80055c2 <HAL_UART_Transmit_IT+0x38>
 80055be:	2302      	movs	r3, #2
 80055c0:	e022      	b.n	8005608 <HAL_UART_Transmit_IT+0x7e>
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	2201      	movs	r2, #1
 80055c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	88fa      	ldrh	r2, [r7, #6]
 80055d4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	88fa      	ldrh	r2, [r7, #6]
 80055da:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	2200      	movs	r2, #0
 80055e0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2221      	movs	r2, #33	; 0x21
 80055e6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	68da      	ldr	r2, [r3, #12]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005600:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e000      	b.n	8005608 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005606:	2302      	movs	r3, #2
  }
}
 8005608:	4618      	mov	r0, r3
 800560a:	3714      	adds	r7, #20
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005614:	b480      	push	{r7}
 8005616:	b085      	sub	sp, #20
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4613      	mov	r3, r2
 8005620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005628:	b2db      	uxtb	r3, r3
 800562a:	2b20      	cmp	r3, #32
 800562c:	d140      	bne.n	80056b0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d002      	beq.n	800563a <HAL_UART_Receive_IT+0x26>
 8005634:	88fb      	ldrh	r3, [r7, #6]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e039      	b.n	80056b2 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005644:	2b01      	cmp	r3, #1
 8005646:	d101      	bne.n	800564c <HAL_UART_Receive_IT+0x38>
 8005648:	2302      	movs	r3, #2
 800564a:	e032      	b.n	80056b2 <HAL_UART_Receive_IT+0x9e>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	2201      	movs	r2, #1
 8005650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	68ba      	ldr	r2, [r7, #8]
 8005658:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	88fa      	ldrh	r2, [r7, #6]
 800565e:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2222      	movs	r2, #34	; 0x22
 8005670:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68da      	ldr	r2, [r3, #12]
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800568a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	695a      	ldr	r2, [r3, #20]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f042 0201 	orr.w	r2, r2, #1
 800569a:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	68da      	ldr	r2, [r3, #12]
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f042 0220 	orr.w	r2, r2, #32
 80056aa:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80056ac:	2300      	movs	r3, #0
 80056ae:	e000      	b.n	80056b2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80056b0:	2302      	movs	r3, #2
  }
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	3714      	adds	r7, #20
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
	...

080056c0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b088      	sub	sp, #32
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68db      	ldr	r3, [r3, #12]
 80056d6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80056e0:	2300      	movs	r3, #0
 80056e2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80056e4:	2300      	movs	r3, #0
 80056e6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	f003 0320 	and.w	r3, r3, #32
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d008      	beq.n	8005712 <HAL_UART_IRQHandler+0x52>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f003 0320 	and.w	r3, r3, #32
 8005706:	2b00      	cmp	r3, #0
 8005708:	d003      	beq.n	8005712 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 f98c 	bl	8005a28 <UART_Receive_IT>
      return;
 8005710:	e0d1      	b.n	80058b6 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	f000 80b0 	beq.w	800587a <HAL_UART_IRQHandler+0x1ba>
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b00      	cmp	r3, #0
 8005722:	d105      	bne.n	8005730 <HAL_UART_IRQHandler+0x70>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 80a5 	beq.w	800587a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	f003 0301 	and.w	r3, r3, #1
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00a      	beq.n	8005750 <HAL_UART_IRQHandler+0x90>
 800573a:	69bb      	ldr	r3, [r7, #24]
 800573c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005748:	f043 0201 	orr.w	r2, r3, #1
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	f003 0304 	and.w	r3, r3, #4
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00a      	beq.n	8005770 <HAL_UART_IRQHandler+0xb0>
 800575a:	697b      	ldr	r3, [r7, #20]
 800575c:	f003 0301 	and.w	r3, r3, #1
 8005760:	2b00      	cmp	r3, #0
 8005762:	d005      	beq.n	8005770 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005768:	f043 0202 	orr.w	r2, r3, #2
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005770:	69fb      	ldr	r3, [r7, #28]
 8005772:	f003 0302 	and.w	r3, r3, #2
 8005776:	2b00      	cmp	r3, #0
 8005778:	d00a      	beq.n	8005790 <HAL_UART_IRQHandler+0xd0>
 800577a:	697b      	ldr	r3, [r7, #20]
 800577c:	f003 0301 	and.w	r3, r3, #1
 8005780:	2b00      	cmp	r3, #0
 8005782:	d005      	beq.n	8005790 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005788:	f043 0204 	orr.w	r2, r3, #4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	f003 0308 	and.w	r3, r3, #8
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00f      	beq.n	80057ba <HAL_UART_IRQHandler+0xfa>
 800579a:	69bb      	ldr	r3, [r7, #24]
 800579c:	f003 0320 	and.w	r3, r3, #32
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d104      	bne.n	80057ae <HAL_UART_IRQHandler+0xee>
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f003 0301 	and.w	r3, r3, #1
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d005      	beq.n	80057ba <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b2:	f043 0208 	orr.w	r2, r3, #8
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d078      	beq.n	80058b4 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	f003 0320 	and.w	r3, r3, #32
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d007      	beq.n	80057dc <HAL_UART_IRQHandler+0x11c>
 80057cc:	69bb      	ldr	r3, [r7, #24]
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d002      	beq.n	80057dc <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	f000 f926 	bl	8005a28 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057e6:	2b40      	cmp	r3, #64	; 0x40
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057f6:	f003 0308 	and.w	r3, r3, #8
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d102      	bne.n	8005804 <HAL_UART_IRQHandler+0x144>
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d031      	beq.n	8005868 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f000 f86f 	bl	80058e8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005814:	2b40      	cmp	r3, #64	; 0x40
 8005816:	d123      	bne.n	8005860 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	695a      	ldr	r2, [r3, #20]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005826:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800582c:	2b00      	cmp	r3, #0
 800582e:	d013      	beq.n	8005858 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005834:	4a21      	ldr	r2, [pc, #132]	; (80058bc <HAL_UART_IRQHandler+0x1fc>)
 8005836:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800583c:	4618      	mov	r0, r3
 800583e:	f7fd fc67 	bl	8003110 <HAL_DMA_Abort_IT>
 8005842:	4603      	mov	r3, r0
 8005844:	2b00      	cmp	r3, #0
 8005846:	d016      	beq.n	8005876 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800584c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005852:	4610      	mov	r0, r2
 8005854:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005856:	e00e      	b.n	8005876 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f000 f83b 	bl	80058d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800585e:	e00a      	b.n	8005876 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005860:	6878      	ldr	r0, [r7, #4]
 8005862:	f000 f837 	bl	80058d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005866:	e006      	b.n	8005876 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f000 f833 	bl	80058d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8005874:	e01e      	b.n	80058b4 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005876:	bf00      	nop
    return;
 8005878:	e01c      	b.n	80058b4 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005880:	2b00      	cmp	r3, #0
 8005882:	d008      	beq.n	8005896 <HAL_UART_IRQHandler+0x1d6>
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800588a:	2b00      	cmp	r3, #0
 800588c:	d003      	beq.n	8005896 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 f85c 	bl	800594c <UART_Transmit_IT>
    return;
 8005894:	e00f      	b.n	80058b6 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b00      	cmp	r3, #0
 800589e:	d00a      	beq.n	80058b6 <HAL_UART_IRQHandler+0x1f6>
 80058a0:	69bb      	ldr	r3, [r7, #24]
 80058a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d005      	beq.n	80058b6 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 f8a4 	bl	80059f8 <UART_EndTransmit_IT>
    return;
 80058b0:	bf00      	nop
 80058b2:	e000      	b.n	80058b6 <HAL_UART_IRQHandler+0x1f6>
    return;
 80058b4:	bf00      	nop
  }
}
 80058b6:	3720      	adds	r7, #32
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	08005925 	.word	0x08005925

080058c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058c0:	b480      	push	{r7}
 80058c2:	b083      	sub	sp, #12
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058c8:	bf00      	nop
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d4:	b480      	push	{r7}
 80058d6:	b083      	sub	sp, #12
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058dc:	bf00      	nop
 80058de:	370c      	adds	r7, #12
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80058fe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695a      	ldr	r2, [r3, #20]
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f022 0201 	bic.w	r2, r2, #1
 800590e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2220      	movs	r2, #32
 8005914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005924:	b580      	push	{r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005930:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2200      	movs	r2, #0
 8005936:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f7ff ffc8 	bl	80058d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005944:	bf00      	nop
 8005946:	3710      	adds	r7, #16
 8005948:	46bd      	mov	sp, r7
 800594a:	bd80      	pop	{r7, pc}

0800594c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b085      	sub	sp, #20
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800595a:	b2db      	uxtb	r3, r3
 800595c:	2b21      	cmp	r3, #33	; 0x21
 800595e:	d144      	bne.n	80059ea <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005968:	d11a      	bne.n	80059a0 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	881b      	ldrh	r3, [r3, #0]
 8005974:	461a      	mov	r2, r3
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800597e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	691b      	ldr	r3, [r3, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d105      	bne.n	8005994 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	1c9a      	adds	r2, r3, #2
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	621a      	str	r2, [r3, #32]
 8005992:	e00e      	b.n	80059b2 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a1b      	ldr	r3, [r3, #32]
 8005998:	1c5a      	adds	r2, r3, #1
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]
 800599e:	e008      	b.n	80059b2 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	1c59      	adds	r1, r3, #1
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	6211      	str	r1, [r2, #32]
 80059aa:	781a      	ldrb	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	4619      	mov	r1, r3
 80059c0:	84d1      	strh	r1, [r2, #38]	; 0x26
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10f      	bne.n	80059e6 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	68da      	ldr	r2, [r3, #12]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80059d4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80059e4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80059e6:	2300      	movs	r3, #0
 80059e8:	e000      	b.n	80059ec <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80059ea:	2302      	movs	r3, #2
  }
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3714      	adds	r7, #20
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr

080059f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b082      	sub	sp, #8
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	68da      	ldr	r2, [r3, #12]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a0e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2220      	movs	r2, #32
 8005a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7ff ff51 	bl	80058c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3708      	adds	r7, #8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b22      	cmp	r3, #34	; 0x22
 8005a3a:	d171      	bne.n	8005b20 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a44:	d123      	bne.n	8005a8e <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a4a:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d10e      	bne.n	8005a72 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	685b      	ldr	r3, [r3, #4]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005a60:	b29a      	uxth	r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a6a:	1c9a      	adds	r2, r3, #2
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	629a      	str	r2, [r3, #40]	; 0x28
 8005a70:	e029      	b.n	8005ac6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	b29a      	uxth	r2, r3
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	629a      	str	r2, [r3, #40]	; 0x28
 8005a8c:	e01b      	b.n	8005ac6 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d10a      	bne.n	8005aac <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6858      	ldr	r0, [r3, #4]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa0:	1c59      	adds	r1, r3, #1
 8005aa2:	687a      	ldr	r2, [r7, #4]
 8005aa4:	6291      	str	r1, [r2, #40]	; 0x28
 8005aa6:	b2c2      	uxtb	r2, r0
 8005aa8:	701a      	strb	r2, [r3, #0]
 8005aaa:	e00c      	b.n	8005ac6 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	b2da      	uxtb	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	1c58      	adds	r0, r3, #1
 8005aba:	6879      	ldr	r1, [r7, #4]
 8005abc:	6288      	str	r0, [r1, #40]	; 0x28
 8005abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005aca:	b29b      	uxth	r3, r3
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29b      	uxth	r3, r3
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	4619      	mov	r1, r3
 8005ad4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d120      	bne.n	8005b1c <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68da      	ldr	r2, [r3, #12]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f022 0220 	bic.w	r2, r2, #32
 8005ae8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68da      	ldr	r2, [r3, #12]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005af8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	695a      	ldr	r2, [r3, #20]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f022 0201 	bic.w	r2, r2, #1
 8005b08:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2220      	movs	r2, #32
 8005b0e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f7fb fb80 	bl	8001218 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	e002      	b.n	8005b22 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	e000      	b.n	8005b22 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8005b20:	2302      	movs	r3, #2
  }
}
 8005b22:	4618      	mov	r0, r3
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	691b      	ldr	r3, [r3, #16]
 8005b3c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	68da      	ldr	r2, [r3, #12]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	430a      	orrs	r2, r1
 8005b4a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	689a      	ldr	r2, [r3, #8]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	691b      	ldr	r3, [r3, #16]
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	431a      	orrs	r2, r3
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	69db      	ldr	r3, [r3, #28]
 8005b60:	4313      	orrs	r3, r2
 8005b62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68db      	ldr	r3, [r3, #12]
 8005b6a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8005b6e:	f023 030c 	bic.w	r3, r3, #12
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	6812      	ldr	r2, [r2, #0]
 8005b76:	68f9      	ldr	r1, [r7, #12]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695b      	ldr	r3, [r3, #20]
 8005b82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	430a      	orrs	r2, r1
 8005b90:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	69db      	ldr	r3, [r3, #28]
 8005b96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b9a:	f040 818b 	bne.w	8005eb4 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4ac1      	ldr	r2, [pc, #772]	; (8005ea8 <UART_SetConfig+0x37c>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d005      	beq.n	8005bb4 <UART_SetConfig+0x88>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4abf      	ldr	r2, [pc, #764]	; (8005eac <UART_SetConfig+0x380>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	f040 80bd 	bne.w	8005d2e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bb4:	f7fe fb44 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005bb8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bba:	68bb      	ldr	r3, [r7, #8]
 8005bbc:	461d      	mov	r5, r3
 8005bbe:	f04f 0600 	mov.w	r6, #0
 8005bc2:	46a8      	mov	r8, r5
 8005bc4:	46b1      	mov	r9, r6
 8005bc6:	eb18 0308 	adds.w	r3, r8, r8
 8005bca:	eb49 0409 	adc.w	r4, r9, r9
 8005bce:	4698      	mov	r8, r3
 8005bd0:	46a1      	mov	r9, r4
 8005bd2:	eb18 0805 	adds.w	r8, r8, r5
 8005bd6:	eb49 0906 	adc.w	r9, r9, r6
 8005bda:	f04f 0100 	mov.w	r1, #0
 8005bde:	f04f 0200 	mov.w	r2, #0
 8005be2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005be6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005bea:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005bee:	4688      	mov	r8, r1
 8005bf0:	4691      	mov	r9, r2
 8005bf2:	eb18 0005 	adds.w	r0, r8, r5
 8005bf6:	eb49 0106 	adc.w	r1, r9, r6
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	461d      	mov	r5, r3
 8005c00:	f04f 0600 	mov.w	r6, #0
 8005c04:	196b      	adds	r3, r5, r5
 8005c06:	eb46 0406 	adc.w	r4, r6, r6
 8005c0a:	461a      	mov	r2, r3
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	f7fb f84b 	bl	8000ca8 <__aeabi_uldivmod>
 8005c12:	4603      	mov	r3, r0
 8005c14:	460c      	mov	r4, r1
 8005c16:	461a      	mov	r2, r3
 8005c18:	4ba5      	ldr	r3, [pc, #660]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c1a:	fba3 2302 	umull	r2, r3, r3, r2
 8005c1e:	095b      	lsrs	r3, r3, #5
 8005c20:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	461d      	mov	r5, r3
 8005c28:	f04f 0600 	mov.w	r6, #0
 8005c2c:	46a9      	mov	r9, r5
 8005c2e:	46b2      	mov	sl, r6
 8005c30:	eb19 0309 	adds.w	r3, r9, r9
 8005c34:	eb4a 040a 	adc.w	r4, sl, sl
 8005c38:	4699      	mov	r9, r3
 8005c3a:	46a2      	mov	sl, r4
 8005c3c:	eb19 0905 	adds.w	r9, r9, r5
 8005c40:	eb4a 0a06 	adc.w	sl, sl, r6
 8005c44:	f04f 0100 	mov.w	r1, #0
 8005c48:	f04f 0200 	mov.w	r2, #0
 8005c4c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005c50:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005c54:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005c58:	4689      	mov	r9, r1
 8005c5a:	4692      	mov	sl, r2
 8005c5c:	eb19 0005 	adds.w	r0, r9, r5
 8005c60:	eb4a 0106 	adc.w	r1, sl, r6
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	685b      	ldr	r3, [r3, #4]
 8005c68:	461d      	mov	r5, r3
 8005c6a:	f04f 0600 	mov.w	r6, #0
 8005c6e:	196b      	adds	r3, r5, r5
 8005c70:	eb46 0406 	adc.w	r4, r6, r6
 8005c74:	461a      	mov	r2, r3
 8005c76:	4623      	mov	r3, r4
 8005c78:	f7fb f816 	bl	8000ca8 <__aeabi_uldivmod>
 8005c7c:	4603      	mov	r3, r0
 8005c7e:	460c      	mov	r4, r1
 8005c80:	461a      	mov	r2, r3
 8005c82:	4b8b      	ldr	r3, [pc, #556]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c84:	fba3 1302 	umull	r1, r3, r3, r2
 8005c88:	095b      	lsrs	r3, r3, #5
 8005c8a:	2164      	movs	r1, #100	; 0x64
 8005c8c:	fb01 f303 	mul.w	r3, r1, r3
 8005c90:	1ad3      	subs	r3, r2, r3
 8005c92:	00db      	lsls	r3, r3, #3
 8005c94:	3332      	adds	r3, #50	; 0x32
 8005c96:	4a86      	ldr	r2, [pc, #536]	; (8005eb0 <UART_SetConfig+0x384>)
 8005c98:	fba2 2303 	umull	r2, r3, r2, r3
 8005c9c:	095b      	lsrs	r3, r3, #5
 8005c9e:	005b      	lsls	r3, r3, #1
 8005ca0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005ca4:	4498      	add	r8, r3
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	461d      	mov	r5, r3
 8005caa:	f04f 0600 	mov.w	r6, #0
 8005cae:	46a9      	mov	r9, r5
 8005cb0:	46b2      	mov	sl, r6
 8005cb2:	eb19 0309 	adds.w	r3, r9, r9
 8005cb6:	eb4a 040a 	adc.w	r4, sl, sl
 8005cba:	4699      	mov	r9, r3
 8005cbc:	46a2      	mov	sl, r4
 8005cbe:	eb19 0905 	adds.w	r9, r9, r5
 8005cc2:	eb4a 0a06 	adc.w	sl, sl, r6
 8005cc6:	f04f 0100 	mov.w	r1, #0
 8005cca:	f04f 0200 	mov.w	r2, #0
 8005cce:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cd2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005cd6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005cda:	4689      	mov	r9, r1
 8005cdc:	4692      	mov	sl, r2
 8005cde:	eb19 0005 	adds.w	r0, r9, r5
 8005ce2:	eb4a 0106 	adc.w	r1, sl, r6
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	461d      	mov	r5, r3
 8005cec:	f04f 0600 	mov.w	r6, #0
 8005cf0:	196b      	adds	r3, r5, r5
 8005cf2:	eb46 0406 	adc.w	r4, r6, r6
 8005cf6:	461a      	mov	r2, r3
 8005cf8:	4623      	mov	r3, r4
 8005cfa:	f7fa ffd5 	bl	8000ca8 <__aeabi_uldivmod>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	460c      	mov	r4, r1
 8005d02:	461a      	mov	r2, r3
 8005d04:	4b6a      	ldr	r3, [pc, #424]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d06:	fba3 1302 	umull	r1, r3, r3, r2
 8005d0a:	095b      	lsrs	r3, r3, #5
 8005d0c:	2164      	movs	r1, #100	; 0x64
 8005d0e:	fb01 f303 	mul.w	r3, r1, r3
 8005d12:	1ad3      	subs	r3, r2, r3
 8005d14:	00db      	lsls	r3, r3, #3
 8005d16:	3332      	adds	r3, #50	; 0x32
 8005d18:	4a65      	ldr	r2, [pc, #404]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8005d1e:	095b      	lsrs	r3, r3, #5
 8005d20:	f003 0207 	and.w	r2, r3, #7
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4442      	add	r2, r8
 8005d2a:	609a      	str	r2, [r3, #8]
 8005d2c:	e26f      	b.n	800620e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d2e:	f7fe fa73 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 8005d32:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	461d      	mov	r5, r3
 8005d38:	f04f 0600 	mov.w	r6, #0
 8005d3c:	46a8      	mov	r8, r5
 8005d3e:	46b1      	mov	r9, r6
 8005d40:	eb18 0308 	adds.w	r3, r8, r8
 8005d44:	eb49 0409 	adc.w	r4, r9, r9
 8005d48:	4698      	mov	r8, r3
 8005d4a:	46a1      	mov	r9, r4
 8005d4c:	eb18 0805 	adds.w	r8, r8, r5
 8005d50:	eb49 0906 	adc.w	r9, r9, r6
 8005d54:	f04f 0100 	mov.w	r1, #0
 8005d58:	f04f 0200 	mov.w	r2, #0
 8005d5c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005d60:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005d64:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005d68:	4688      	mov	r8, r1
 8005d6a:	4691      	mov	r9, r2
 8005d6c:	eb18 0005 	adds.w	r0, r8, r5
 8005d70:	eb49 0106 	adc.w	r1, r9, r6
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	461d      	mov	r5, r3
 8005d7a:	f04f 0600 	mov.w	r6, #0
 8005d7e:	196b      	adds	r3, r5, r5
 8005d80:	eb46 0406 	adc.w	r4, r6, r6
 8005d84:	461a      	mov	r2, r3
 8005d86:	4623      	mov	r3, r4
 8005d88:	f7fa ff8e 	bl	8000ca8 <__aeabi_uldivmod>
 8005d8c:	4603      	mov	r3, r0
 8005d8e:	460c      	mov	r4, r1
 8005d90:	461a      	mov	r2, r3
 8005d92:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <UART_SetConfig+0x384>)
 8005d94:	fba3 2302 	umull	r2, r3, r3, r2
 8005d98:	095b      	lsrs	r3, r3, #5
 8005d9a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005d9e:	68bb      	ldr	r3, [r7, #8]
 8005da0:	461d      	mov	r5, r3
 8005da2:	f04f 0600 	mov.w	r6, #0
 8005da6:	46a9      	mov	r9, r5
 8005da8:	46b2      	mov	sl, r6
 8005daa:	eb19 0309 	adds.w	r3, r9, r9
 8005dae:	eb4a 040a 	adc.w	r4, sl, sl
 8005db2:	4699      	mov	r9, r3
 8005db4:	46a2      	mov	sl, r4
 8005db6:	eb19 0905 	adds.w	r9, r9, r5
 8005dba:	eb4a 0a06 	adc.w	sl, sl, r6
 8005dbe:	f04f 0100 	mov.w	r1, #0
 8005dc2:	f04f 0200 	mov.w	r2, #0
 8005dc6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005dca:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005dce:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005dd2:	4689      	mov	r9, r1
 8005dd4:	4692      	mov	sl, r2
 8005dd6:	eb19 0005 	adds.w	r0, r9, r5
 8005dda:	eb4a 0106 	adc.w	r1, sl, r6
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	461d      	mov	r5, r3
 8005de4:	f04f 0600 	mov.w	r6, #0
 8005de8:	196b      	adds	r3, r5, r5
 8005dea:	eb46 0406 	adc.w	r4, r6, r6
 8005dee:	461a      	mov	r2, r3
 8005df0:	4623      	mov	r3, r4
 8005df2:	f7fa ff59 	bl	8000ca8 <__aeabi_uldivmod>
 8005df6:	4603      	mov	r3, r0
 8005df8:	460c      	mov	r4, r1
 8005dfa:	461a      	mov	r2, r3
 8005dfc:	4b2c      	ldr	r3, [pc, #176]	; (8005eb0 <UART_SetConfig+0x384>)
 8005dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8005e02:	095b      	lsrs	r3, r3, #5
 8005e04:	2164      	movs	r1, #100	; 0x64
 8005e06:	fb01 f303 	mul.w	r3, r1, r3
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	00db      	lsls	r3, r3, #3
 8005e0e:	3332      	adds	r3, #50	; 0x32
 8005e10:	4a27      	ldr	r2, [pc, #156]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e12:	fba2 2303 	umull	r2, r3, r2, r3
 8005e16:	095b      	lsrs	r3, r3, #5
 8005e18:	005b      	lsls	r3, r3, #1
 8005e1a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005e1e:	4498      	add	r8, r3
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	461d      	mov	r5, r3
 8005e24:	f04f 0600 	mov.w	r6, #0
 8005e28:	46a9      	mov	r9, r5
 8005e2a:	46b2      	mov	sl, r6
 8005e2c:	eb19 0309 	adds.w	r3, r9, r9
 8005e30:	eb4a 040a 	adc.w	r4, sl, sl
 8005e34:	4699      	mov	r9, r3
 8005e36:	46a2      	mov	sl, r4
 8005e38:	eb19 0905 	adds.w	r9, r9, r5
 8005e3c:	eb4a 0a06 	adc.w	sl, sl, r6
 8005e40:	f04f 0100 	mov.w	r1, #0
 8005e44:	f04f 0200 	mov.w	r2, #0
 8005e48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e4c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005e50:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005e54:	4689      	mov	r9, r1
 8005e56:	4692      	mov	sl, r2
 8005e58:	eb19 0005 	adds.w	r0, r9, r5
 8005e5c:	eb4a 0106 	adc.w	r1, sl, r6
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	685b      	ldr	r3, [r3, #4]
 8005e64:	461d      	mov	r5, r3
 8005e66:	f04f 0600 	mov.w	r6, #0
 8005e6a:	196b      	adds	r3, r5, r5
 8005e6c:	eb46 0406 	adc.w	r4, r6, r6
 8005e70:	461a      	mov	r2, r3
 8005e72:	4623      	mov	r3, r4
 8005e74:	f7fa ff18 	bl	8000ca8 <__aeabi_uldivmod>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	461a      	mov	r2, r3
 8005e7e:	4b0c      	ldr	r3, [pc, #48]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e80:	fba3 1302 	umull	r1, r3, r3, r2
 8005e84:	095b      	lsrs	r3, r3, #5
 8005e86:	2164      	movs	r1, #100	; 0x64
 8005e88:	fb01 f303 	mul.w	r3, r1, r3
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	00db      	lsls	r3, r3, #3
 8005e90:	3332      	adds	r3, #50	; 0x32
 8005e92:	4a07      	ldr	r2, [pc, #28]	; (8005eb0 <UART_SetConfig+0x384>)
 8005e94:	fba2 2303 	umull	r2, r3, r2, r3
 8005e98:	095b      	lsrs	r3, r3, #5
 8005e9a:	f003 0207 	and.w	r2, r3, #7
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4442      	add	r2, r8
 8005ea4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8005ea6:	e1b2      	b.n	800620e <UART_SetConfig+0x6e2>
 8005ea8:	40011000 	.word	0x40011000
 8005eac:	40011400 	.word	0x40011400
 8005eb0:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4ad7      	ldr	r2, [pc, #860]	; (8006218 <UART_SetConfig+0x6ec>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d005      	beq.n	8005eca <UART_SetConfig+0x39e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4ad6      	ldr	r2, [pc, #856]	; (800621c <UART_SetConfig+0x6f0>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	f040 80d1 	bne.w	800606c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005eca:	f7fe f9b9 	bl	8004240 <HAL_RCC_GetPCLK2Freq>
 8005ece:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	469a      	mov	sl, r3
 8005ed4:	f04f 0b00 	mov.w	fp, #0
 8005ed8:	46d0      	mov	r8, sl
 8005eda:	46d9      	mov	r9, fp
 8005edc:	eb18 0308 	adds.w	r3, r8, r8
 8005ee0:	eb49 0409 	adc.w	r4, r9, r9
 8005ee4:	4698      	mov	r8, r3
 8005ee6:	46a1      	mov	r9, r4
 8005ee8:	eb18 080a 	adds.w	r8, r8, sl
 8005eec:	eb49 090b 	adc.w	r9, r9, fp
 8005ef0:	f04f 0100 	mov.w	r1, #0
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8005efc:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8005f00:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8005f04:	4688      	mov	r8, r1
 8005f06:	4691      	mov	r9, r2
 8005f08:	eb1a 0508 	adds.w	r5, sl, r8
 8005f0c:	eb4b 0609 	adc.w	r6, fp, r9
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	4619      	mov	r1, r3
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	f04f 0300 	mov.w	r3, #0
 8005f1e:	f04f 0400 	mov.w	r4, #0
 8005f22:	0094      	lsls	r4, r2, #2
 8005f24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005f28:	008b      	lsls	r3, r1, #2
 8005f2a:	461a      	mov	r2, r3
 8005f2c:	4623      	mov	r3, r4
 8005f2e:	4628      	mov	r0, r5
 8005f30:	4631      	mov	r1, r6
 8005f32:	f7fa feb9 	bl	8000ca8 <__aeabi_uldivmod>
 8005f36:	4603      	mov	r3, r0
 8005f38:	460c      	mov	r4, r1
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	4bb8      	ldr	r3, [pc, #736]	; (8006220 <UART_SetConfig+0x6f4>)
 8005f3e:	fba3 2302 	umull	r2, r3, r3, r2
 8005f42:	095b      	lsrs	r3, r3, #5
 8005f44:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	469b      	mov	fp, r3
 8005f4c:	f04f 0c00 	mov.w	ip, #0
 8005f50:	46d9      	mov	r9, fp
 8005f52:	46e2      	mov	sl, ip
 8005f54:	eb19 0309 	adds.w	r3, r9, r9
 8005f58:	eb4a 040a 	adc.w	r4, sl, sl
 8005f5c:	4699      	mov	r9, r3
 8005f5e:	46a2      	mov	sl, r4
 8005f60:	eb19 090b 	adds.w	r9, r9, fp
 8005f64:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005f68:	f04f 0100 	mov.w	r1, #0
 8005f6c:	f04f 0200 	mov.w	r2, #0
 8005f70:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f74:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8005f78:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8005f7c:	4689      	mov	r9, r1
 8005f7e:	4692      	mov	sl, r2
 8005f80:	eb1b 0509 	adds.w	r5, fp, r9
 8005f84:	eb4c 060a 	adc.w	r6, ip, sl
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	f04f 0200 	mov.w	r2, #0
 8005f92:	f04f 0300 	mov.w	r3, #0
 8005f96:	f04f 0400 	mov.w	r4, #0
 8005f9a:	0094      	lsls	r4, r2, #2
 8005f9c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8005fa0:	008b      	lsls	r3, r1, #2
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	4623      	mov	r3, r4
 8005fa6:	4628      	mov	r0, r5
 8005fa8:	4631      	mov	r1, r6
 8005faa:	f7fa fe7d 	bl	8000ca8 <__aeabi_uldivmod>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	461a      	mov	r2, r3
 8005fb4:	4b9a      	ldr	r3, [pc, #616]	; (8006220 <UART_SetConfig+0x6f4>)
 8005fb6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fba:	095b      	lsrs	r3, r3, #5
 8005fbc:	2164      	movs	r1, #100	; 0x64
 8005fbe:	fb01 f303 	mul.w	r3, r1, r3
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	011b      	lsls	r3, r3, #4
 8005fc6:	3332      	adds	r3, #50	; 0x32
 8005fc8:	4a95      	ldr	r2, [pc, #596]	; (8006220 <UART_SetConfig+0x6f4>)
 8005fca:	fba2 2303 	umull	r2, r3, r2, r3
 8005fce:	095b      	lsrs	r3, r3, #5
 8005fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005fd4:	4498      	add	r8, r3
 8005fd6:	68bb      	ldr	r3, [r7, #8]
 8005fd8:	469b      	mov	fp, r3
 8005fda:	f04f 0c00 	mov.w	ip, #0
 8005fde:	46d9      	mov	r9, fp
 8005fe0:	46e2      	mov	sl, ip
 8005fe2:	eb19 0309 	adds.w	r3, r9, r9
 8005fe6:	eb4a 040a 	adc.w	r4, sl, sl
 8005fea:	4699      	mov	r9, r3
 8005fec:	46a2      	mov	sl, r4
 8005fee:	eb19 090b 	adds.w	r9, r9, fp
 8005ff2:	eb4a 0a0c 	adc.w	sl, sl, ip
 8005ff6:	f04f 0100 	mov.w	r1, #0
 8005ffa:	f04f 0200 	mov.w	r2, #0
 8005ffe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006002:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006006:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800600a:	4689      	mov	r9, r1
 800600c:	4692      	mov	sl, r2
 800600e:	eb1b 0509 	adds.w	r5, fp, r9
 8006012:	eb4c 060a 	adc.w	r6, ip, sl
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	4619      	mov	r1, r3
 800601c:	f04f 0200 	mov.w	r2, #0
 8006020:	f04f 0300 	mov.w	r3, #0
 8006024:	f04f 0400 	mov.w	r4, #0
 8006028:	0094      	lsls	r4, r2, #2
 800602a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800602e:	008b      	lsls	r3, r1, #2
 8006030:	461a      	mov	r2, r3
 8006032:	4623      	mov	r3, r4
 8006034:	4628      	mov	r0, r5
 8006036:	4631      	mov	r1, r6
 8006038:	f7fa fe36 	bl	8000ca8 <__aeabi_uldivmod>
 800603c:	4603      	mov	r3, r0
 800603e:	460c      	mov	r4, r1
 8006040:	461a      	mov	r2, r3
 8006042:	4b77      	ldr	r3, [pc, #476]	; (8006220 <UART_SetConfig+0x6f4>)
 8006044:	fba3 1302 	umull	r1, r3, r3, r2
 8006048:	095b      	lsrs	r3, r3, #5
 800604a:	2164      	movs	r1, #100	; 0x64
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	1ad3      	subs	r3, r2, r3
 8006052:	011b      	lsls	r3, r3, #4
 8006054:	3332      	adds	r3, #50	; 0x32
 8006056:	4a72      	ldr	r2, [pc, #456]	; (8006220 <UART_SetConfig+0x6f4>)
 8006058:	fba2 2303 	umull	r2, r3, r2, r3
 800605c:	095b      	lsrs	r3, r3, #5
 800605e:	f003 020f 	and.w	r2, r3, #15
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4442      	add	r2, r8
 8006068:	609a      	str	r2, [r3, #8]
 800606a:	e0d0      	b.n	800620e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800606c:	f7fe f8d4 	bl	8004218 <HAL_RCC_GetPCLK1Freq>
 8006070:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	469a      	mov	sl, r3
 8006076:	f04f 0b00 	mov.w	fp, #0
 800607a:	46d0      	mov	r8, sl
 800607c:	46d9      	mov	r9, fp
 800607e:	eb18 0308 	adds.w	r3, r8, r8
 8006082:	eb49 0409 	adc.w	r4, r9, r9
 8006086:	4698      	mov	r8, r3
 8006088:	46a1      	mov	r9, r4
 800608a:	eb18 080a 	adds.w	r8, r8, sl
 800608e:	eb49 090b 	adc.w	r9, r9, fp
 8006092:	f04f 0100 	mov.w	r1, #0
 8006096:	f04f 0200 	mov.w	r2, #0
 800609a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800609e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80060a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80060a6:	4688      	mov	r8, r1
 80060a8:	4691      	mov	r9, r2
 80060aa:	eb1a 0508 	adds.w	r5, sl, r8
 80060ae:	eb4b 0609 	adc.w	r6, fp, r9
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	4619      	mov	r1, r3
 80060b8:	f04f 0200 	mov.w	r2, #0
 80060bc:	f04f 0300 	mov.w	r3, #0
 80060c0:	f04f 0400 	mov.w	r4, #0
 80060c4:	0094      	lsls	r4, r2, #2
 80060c6:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80060ca:	008b      	lsls	r3, r1, #2
 80060cc:	461a      	mov	r2, r3
 80060ce:	4623      	mov	r3, r4
 80060d0:	4628      	mov	r0, r5
 80060d2:	4631      	mov	r1, r6
 80060d4:	f7fa fde8 	bl	8000ca8 <__aeabi_uldivmod>
 80060d8:	4603      	mov	r3, r0
 80060da:	460c      	mov	r4, r1
 80060dc:	461a      	mov	r2, r3
 80060de:	4b50      	ldr	r3, [pc, #320]	; (8006220 <UART_SetConfig+0x6f4>)
 80060e0:	fba3 2302 	umull	r2, r3, r3, r2
 80060e4:	095b      	lsrs	r3, r3, #5
 80060e6:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	469b      	mov	fp, r3
 80060ee:	f04f 0c00 	mov.w	ip, #0
 80060f2:	46d9      	mov	r9, fp
 80060f4:	46e2      	mov	sl, ip
 80060f6:	eb19 0309 	adds.w	r3, r9, r9
 80060fa:	eb4a 040a 	adc.w	r4, sl, sl
 80060fe:	4699      	mov	r9, r3
 8006100:	46a2      	mov	sl, r4
 8006102:	eb19 090b 	adds.w	r9, r9, fp
 8006106:	eb4a 0a0c 	adc.w	sl, sl, ip
 800610a:	f04f 0100 	mov.w	r1, #0
 800610e:	f04f 0200 	mov.w	r2, #0
 8006112:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006116:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800611a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800611e:	4689      	mov	r9, r1
 8006120:	4692      	mov	sl, r2
 8006122:	eb1b 0509 	adds.w	r5, fp, r9
 8006126:	eb4c 060a 	adc.w	r6, ip, sl
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	f04f 0200 	mov.w	r2, #0
 8006134:	f04f 0300 	mov.w	r3, #0
 8006138:	f04f 0400 	mov.w	r4, #0
 800613c:	0094      	lsls	r4, r2, #2
 800613e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006142:	008b      	lsls	r3, r1, #2
 8006144:	461a      	mov	r2, r3
 8006146:	4623      	mov	r3, r4
 8006148:	4628      	mov	r0, r5
 800614a:	4631      	mov	r1, r6
 800614c:	f7fa fdac 	bl	8000ca8 <__aeabi_uldivmod>
 8006150:	4603      	mov	r3, r0
 8006152:	460c      	mov	r4, r1
 8006154:	461a      	mov	r2, r3
 8006156:	4b32      	ldr	r3, [pc, #200]	; (8006220 <UART_SetConfig+0x6f4>)
 8006158:	fba3 1302 	umull	r1, r3, r3, r2
 800615c:	095b      	lsrs	r3, r3, #5
 800615e:	2164      	movs	r1, #100	; 0x64
 8006160:	fb01 f303 	mul.w	r3, r1, r3
 8006164:	1ad3      	subs	r3, r2, r3
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	3332      	adds	r3, #50	; 0x32
 800616a:	4a2d      	ldr	r2, [pc, #180]	; (8006220 <UART_SetConfig+0x6f4>)
 800616c:	fba2 2303 	umull	r2, r3, r2, r3
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006176:	4498      	add	r8, r3
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	469b      	mov	fp, r3
 800617c:	f04f 0c00 	mov.w	ip, #0
 8006180:	46d9      	mov	r9, fp
 8006182:	46e2      	mov	sl, ip
 8006184:	eb19 0309 	adds.w	r3, r9, r9
 8006188:	eb4a 040a 	adc.w	r4, sl, sl
 800618c:	4699      	mov	r9, r3
 800618e:	46a2      	mov	sl, r4
 8006190:	eb19 090b 	adds.w	r9, r9, fp
 8006194:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006198:	f04f 0100 	mov.w	r1, #0
 800619c:	f04f 0200 	mov.w	r2, #0
 80061a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80061a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80061a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80061ac:	4689      	mov	r9, r1
 80061ae:	4692      	mov	sl, r2
 80061b0:	eb1b 0509 	adds.w	r5, fp, r9
 80061b4:	eb4c 060a 	adc.w	r6, ip, sl
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	4619      	mov	r1, r3
 80061be:	f04f 0200 	mov.w	r2, #0
 80061c2:	f04f 0300 	mov.w	r3, #0
 80061c6:	f04f 0400 	mov.w	r4, #0
 80061ca:	0094      	lsls	r4, r2, #2
 80061cc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80061d0:	008b      	lsls	r3, r1, #2
 80061d2:	461a      	mov	r2, r3
 80061d4:	4623      	mov	r3, r4
 80061d6:	4628      	mov	r0, r5
 80061d8:	4631      	mov	r1, r6
 80061da:	f7fa fd65 	bl	8000ca8 <__aeabi_uldivmod>
 80061de:	4603      	mov	r3, r0
 80061e0:	460c      	mov	r4, r1
 80061e2:	461a      	mov	r2, r3
 80061e4:	4b0e      	ldr	r3, [pc, #56]	; (8006220 <UART_SetConfig+0x6f4>)
 80061e6:	fba3 1302 	umull	r1, r3, r3, r2
 80061ea:	095b      	lsrs	r3, r3, #5
 80061ec:	2164      	movs	r1, #100	; 0x64
 80061ee:	fb01 f303 	mul.w	r3, r1, r3
 80061f2:	1ad3      	subs	r3, r2, r3
 80061f4:	011b      	lsls	r3, r3, #4
 80061f6:	3332      	adds	r3, #50	; 0x32
 80061f8:	4a09      	ldr	r2, [pc, #36]	; (8006220 <UART_SetConfig+0x6f4>)
 80061fa:	fba2 2303 	umull	r2, r3, r2, r3
 80061fe:	095b      	lsrs	r3, r3, #5
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4442      	add	r2, r8
 800620a:	609a      	str	r2, [r3, #8]
}
 800620c:	e7ff      	b.n	800620e <UART_SetConfig+0x6e2>
 800620e:	bf00      	nop
 8006210:	3714      	adds	r7, #20
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006218:	40011000 	.word	0x40011000
 800621c:	40011400 	.word	0x40011400
 8006220:	51eb851f 	.word	0x51eb851f

08006224 <__errno>:
 8006224:	4b01      	ldr	r3, [pc, #4]	; (800622c <__errno+0x8>)
 8006226:	6818      	ldr	r0, [r3, #0]
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	20000014 	.word	0x20000014

08006230 <__libc_init_array>:
 8006230:	b570      	push	{r4, r5, r6, lr}
 8006232:	4e0d      	ldr	r6, [pc, #52]	; (8006268 <__libc_init_array+0x38>)
 8006234:	4c0d      	ldr	r4, [pc, #52]	; (800626c <__libc_init_array+0x3c>)
 8006236:	1ba4      	subs	r4, r4, r6
 8006238:	10a4      	asrs	r4, r4, #2
 800623a:	2500      	movs	r5, #0
 800623c:	42a5      	cmp	r5, r4
 800623e:	d109      	bne.n	8006254 <__libc_init_array+0x24>
 8006240:	4e0b      	ldr	r6, [pc, #44]	; (8006270 <__libc_init_array+0x40>)
 8006242:	4c0c      	ldr	r4, [pc, #48]	; (8006274 <__libc_init_array+0x44>)
 8006244:	f004 f98a 	bl	800a55c <_init>
 8006248:	1ba4      	subs	r4, r4, r6
 800624a:	10a4      	asrs	r4, r4, #2
 800624c:	2500      	movs	r5, #0
 800624e:	42a5      	cmp	r5, r4
 8006250:	d105      	bne.n	800625e <__libc_init_array+0x2e>
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006258:	4798      	blx	r3
 800625a:	3501      	adds	r5, #1
 800625c:	e7ee      	b.n	800623c <__libc_init_array+0xc>
 800625e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006262:	4798      	blx	r3
 8006264:	3501      	adds	r5, #1
 8006266:	e7f2      	b.n	800624e <__libc_init_array+0x1e>
 8006268:	0800a92c 	.word	0x0800a92c
 800626c:	0800a92c 	.word	0x0800a92c
 8006270:	0800a92c 	.word	0x0800a92c
 8006274:	0800a930 	.word	0x0800a930

08006278 <memset>:
 8006278:	4402      	add	r2, r0
 800627a:	4603      	mov	r3, r0
 800627c:	4293      	cmp	r3, r2
 800627e:	d100      	bne.n	8006282 <memset+0xa>
 8006280:	4770      	bx	lr
 8006282:	f803 1b01 	strb.w	r1, [r3], #1
 8006286:	e7f9      	b.n	800627c <memset+0x4>

08006288 <__cvt>:
 8006288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800628c:	ec55 4b10 	vmov	r4, r5, d0
 8006290:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8006292:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006296:	2d00      	cmp	r5, #0
 8006298:	460e      	mov	r6, r1
 800629a:	4691      	mov	r9, r2
 800629c:	4619      	mov	r1, r3
 800629e:	bfb8      	it	lt
 80062a0:	4622      	movlt	r2, r4
 80062a2:	462b      	mov	r3, r5
 80062a4:	f027 0720 	bic.w	r7, r7, #32
 80062a8:	bfbb      	ittet	lt
 80062aa:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80062ae:	461d      	movlt	r5, r3
 80062b0:	2300      	movge	r3, #0
 80062b2:	232d      	movlt	r3, #45	; 0x2d
 80062b4:	bfb8      	it	lt
 80062b6:	4614      	movlt	r4, r2
 80062b8:	2f46      	cmp	r7, #70	; 0x46
 80062ba:	700b      	strb	r3, [r1, #0]
 80062bc:	d004      	beq.n	80062c8 <__cvt+0x40>
 80062be:	2f45      	cmp	r7, #69	; 0x45
 80062c0:	d100      	bne.n	80062c4 <__cvt+0x3c>
 80062c2:	3601      	adds	r6, #1
 80062c4:	2102      	movs	r1, #2
 80062c6:	e000      	b.n	80062ca <__cvt+0x42>
 80062c8:	2103      	movs	r1, #3
 80062ca:	ab03      	add	r3, sp, #12
 80062cc:	9301      	str	r3, [sp, #4]
 80062ce:	ab02      	add	r3, sp, #8
 80062d0:	9300      	str	r3, [sp, #0]
 80062d2:	4632      	mov	r2, r6
 80062d4:	4653      	mov	r3, sl
 80062d6:	ec45 4b10 	vmov	d0, r4, r5
 80062da:	f001 fda1 	bl	8007e20 <_dtoa_r>
 80062de:	2f47      	cmp	r7, #71	; 0x47
 80062e0:	4680      	mov	r8, r0
 80062e2:	d102      	bne.n	80062ea <__cvt+0x62>
 80062e4:	f019 0f01 	tst.w	r9, #1
 80062e8:	d026      	beq.n	8006338 <__cvt+0xb0>
 80062ea:	2f46      	cmp	r7, #70	; 0x46
 80062ec:	eb08 0906 	add.w	r9, r8, r6
 80062f0:	d111      	bne.n	8006316 <__cvt+0x8e>
 80062f2:	f898 3000 	ldrb.w	r3, [r8]
 80062f6:	2b30      	cmp	r3, #48	; 0x30
 80062f8:	d10a      	bne.n	8006310 <__cvt+0x88>
 80062fa:	2200      	movs	r2, #0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fbf1 	bl	8000ae8 <__aeabi_dcmpeq>
 8006306:	b918      	cbnz	r0, 8006310 <__cvt+0x88>
 8006308:	f1c6 0601 	rsb	r6, r6, #1
 800630c:	f8ca 6000 	str.w	r6, [sl]
 8006310:	f8da 3000 	ldr.w	r3, [sl]
 8006314:	4499      	add	r9, r3
 8006316:	2200      	movs	r2, #0
 8006318:	2300      	movs	r3, #0
 800631a:	4620      	mov	r0, r4
 800631c:	4629      	mov	r1, r5
 800631e:	f7fa fbe3 	bl	8000ae8 <__aeabi_dcmpeq>
 8006322:	b938      	cbnz	r0, 8006334 <__cvt+0xac>
 8006324:	2230      	movs	r2, #48	; 0x30
 8006326:	9b03      	ldr	r3, [sp, #12]
 8006328:	454b      	cmp	r3, r9
 800632a:	d205      	bcs.n	8006338 <__cvt+0xb0>
 800632c:	1c59      	adds	r1, r3, #1
 800632e:	9103      	str	r1, [sp, #12]
 8006330:	701a      	strb	r2, [r3, #0]
 8006332:	e7f8      	b.n	8006326 <__cvt+0x9e>
 8006334:	f8cd 900c 	str.w	r9, [sp, #12]
 8006338:	9b03      	ldr	r3, [sp, #12]
 800633a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800633c:	eba3 0308 	sub.w	r3, r3, r8
 8006340:	4640      	mov	r0, r8
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	b004      	add	sp, #16
 8006346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800634a <__exponent>:
 800634a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800634c:	2900      	cmp	r1, #0
 800634e:	4604      	mov	r4, r0
 8006350:	bfba      	itte	lt
 8006352:	4249      	neglt	r1, r1
 8006354:	232d      	movlt	r3, #45	; 0x2d
 8006356:	232b      	movge	r3, #43	; 0x2b
 8006358:	2909      	cmp	r1, #9
 800635a:	f804 2b02 	strb.w	r2, [r4], #2
 800635e:	7043      	strb	r3, [r0, #1]
 8006360:	dd20      	ble.n	80063a4 <__exponent+0x5a>
 8006362:	f10d 0307 	add.w	r3, sp, #7
 8006366:	461f      	mov	r7, r3
 8006368:	260a      	movs	r6, #10
 800636a:	fb91 f5f6 	sdiv	r5, r1, r6
 800636e:	fb06 1115 	mls	r1, r6, r5, r1
 8006372:	3130      	adds	r1, #48	; 0x30
 8006374:	2d09      	cmp	r5, #9
 8006376:	f803 1c01 	strb.w	r1, [r3, #-1]
 800637a:	f103 32ff 	add.w	r2, r3, #4294967295
 800637e:	4629      	mov	r1, r5
 8006380:	dc09      	bgt.n	8006396 <__exponent+0x4c>
 8006382:	3130      	adds	r1, #48	; 0x30
 8006384:	3b02      	subs	r3, #2
 8006386:	f802 1c01 	strb.w	r1, [r2, #-1]
 800638a:	42bb      	cmp	r3, r7
 800638c:	4622      	mov	r2, r4
 800638e:	d304      	bcc.n	800639a <__exponent+0x50>
 8006390:	1a10      	subs	r0, r2, r0
 8006392:	b003      	add	sp, #12
 8006394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006396:	4613      	mov	r3, r2
 8006398:	e7e7      	b.n	800636a <__exponent+0x20>
 800639a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800639e:	f804 2b01 	strb.w	r2, [r4], #1
 80063a2:	e7f2      	b.n	800638a <__exponent+0x40>
 80063a4:	2330      	movs	r3, #48	; 0x30
 80063a6:	4419      	add	r1, r3
 80063a8:	7083      	strb	r3, [r0, #2]
 80063aa:	1d02      	adds	r2, r0, #4
 80063ac:	70c1      	strb	r1, [r0, #3]
 80063ae:	e7ef      	b.n	8006390 <__exponent+0x46>

080063b0 <_printf_float>:
 80063b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063b4:	b08d      	sub	sp, #52	; 0x34
 80063b6:	460c      	mov	r4, r1
 80063b8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 80063bc:	4616      	mov	r6, r2
 80063be:	461f      	mov	r7, r3
 80063c0:	4605      	mov	r5, r0
 80063c2:	f002 fe1f 	bl	8009004 <_localeconv_r>
 80063c6:	6803      	ldr	r3, [r0, #0]
 80063c8:	9304      	str	r3, [sp, #16]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f7f9 ff0a 	bl	80001e4 <strlen>
 80063d0:	2300      	movs	r3, #0
 80063d2:	930a      	str	r3, [sp, #40]	; 0x28
 80063d4:	f8d8 3000 	ldr.w	r3, [r8]
 80063d8:	9005      	str	r0, [sp, #20]
 80063da:	3307      	adds	r3, #7
 80063dc:	f023 0307 	bic.w	r3, r3, #7
 80063e0:	f103 0208 	add.w	r2, r3, #8
 80063e4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80063e8:	f8d4 b000 	ldr.w	fp, [r4]
 80063ec:	f8c8 2000 	str.w	r2, [r8]
 80063f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063f4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80063f8:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80063fc:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006400:	9307      	str	r3, [sp, #28]
 8006402:	f8cd 8018 	str.w	r8, [sp, #24]
 8006406:	f04f 32ff 	mov.w	r2, #4294967295
 800640a:	4ba7      	ldr	r3, [pc, #668]	; (80066a8 <_printf_float+0x2f8>)
 800640c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006410:	f7fa fb9c 	bl	8000b4c <__aeabi_dcmpun>
 8006414:	bb70      	cbnz	r0, 8006474 <_printf_float+0xc4>
 8006416:	f04f 32ff 	mov.w	r2, #4294967295
 800641a:	4ba3      	ldr	r3, [pc, #652]	; (80066a8 <_printf_float+0x2f8>)
 800641c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006420:	f7fa fb76 	bl	8000b10 <__aeabi_dcmple>
 8006424:	bb30      	cbnz	r0, 8006474 <_printf_float+0xc4>
 8006426:	2200      	movs	r2, #0
 8006428:	2300      	movs	r3, #0
 800642a:	4640      	mov	r0, r8
 800642c:	4649      	mov	r1, r9
 800642e:	f7fa fb65 	bl	8000afc <__aeabi_dcmplt>
 8006432:	b110      	cbz	r0, 800643a <_printf_float+0x8a>
 8006434:	232d      	movs	r3, #45	; 0x2d
 8006436:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800643a:	4a9c      	ldr	r2, [pc, #624]	; (80066ac <_printf_float+0x2fc>)
 800643c:	4b9c      	ldr	r3, [pc, #624]	; (80066b0 <_printf_float+0x300>)
 800643e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006442:	bf8c      	ite	hi
 8006444:	4690      	movhi	r8, r2
 8006446:	4698      	movls	r8, r3
 8006448:	2303      	movs	r3, #3
 800644a:	f02b 0204 	bic.w	r2, fp, #4
 800644e:	6123      	str	r3, [r4, #16]
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	f04f 0900 	mov.w	r9, #0
 8006456:	9700      	str	r7, [sp, #0]
 8006458:	4633      	mov	r3, r6
 800645a:	aa0b      	add	r2, sp, #44	; 0x2c
 800645c:	4621      	mov	r1, r4
 800645e:	4628      	mov	r0, r5
 8006460:	f000 f9e6 	bl	8006830 <_printf_common>
 8006464:	3001      	adds	r0, #1
 8006466:	f040 808d 	bne.w	8006584 <_printf_float+0x1d4>
 800646a:	f04f 30ff 	mov.w	r0, #4294967295
 800646e:	b00d      	add	sp, #52	; 0x34
 8006470:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006474:	4642      	mov	r2, r8
 8006476:	464b      	mov	r3, r9
 8006478:	4640      	mov	r0, r8
 800647a:	4649      	mov	r1, r9
 800647c:	f7fa fb66 	bl	8000b4c <__aeabi_dcmpun>
 8006480:	b110      	cbz	r0, 8006488 <_printf_float+0xd8>
 8006482:	4a8c      	ldr	r2, [pc, #560]	; (80066b4 <_printf_float+0x304>)
 8006484:	4b8c      	ldr	r3, [pc, #560]	; (80066b8 <_printf_float+0x308>)
 8006486:	e7da      	b.n	800643e <_printf_float+0x8e>
 8006488:	6861      	ldr	r1, [r4, #4]
 800648a:	1c4b      	adds	r3, r1, #1
 800648c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8006490:	a80a      	add	r0, sp, #40	; 0x28
 8006492:	d13e      	bne.n	8006512 <_printf_float+0x162>
 8006494:	2306      	movs	r3, #6
 8006496:	6063      	str	r3, [r4, #4]
 8006498:	2300      	movs	r3, #0
 800649a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800649e:	ab09      	add	r3, sp, #36	; 0x24
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	ec49 8b10 	vmov	d0, r8, r9
 80064a6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80064aa:	6022      	str	r2, [r4, #0]
 80064ac:	f8cd a004 	str.w	sl, [sp, #4]
 80064b0:	6861      	ldr	r1, [r4, #4]
 80064b2:	4628      	mov	r0, r5
 80064b4:	f7ff fee8 	bl	8006288 <__cvt>
 80064b8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 80064bc:	2b47      	cmp	r3, #71	; 0x47
 80064be:	4680      	mov	r8, r0
 80064c0:	d109      	bne.n	80064d6 <_printf_float+0x126>
 80064c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064c4:	1cd8      	adds	r0, r3, #3
 80064c6:	db02      	blt.n	80064ce <_printf_float+0x11e>
 80064c8:	6862      	ldr	r2, [r4, #4]
 80064ca:	4293      	cmp	r3, r2
 80064cc:	dd47      	ble.n	800655e <_printf_float+0x1ae>
 80064ce:	f1aa 0a02 	sub.w	sl, sl, #2
 80064d2:	fa5f fa8a 	uxtb.w	sl, sl
 80064d6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80064da:	9909      	ldr	r1, [sp, #36]	; 0x24
 80064dc:	d824      	bhi.n	8006528 <_printf_float+0x178>
 80064de:	3901      	subs	r1, #1
 80064e0:	4652      	mov	r2, sl
 80064e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80064e6:	9109      	str	r1, [sp, #36]	; 0x24
 80064e8:	f7ff ff2f 	bl	800634a <__exponent>
 80064ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80064ee:	1813      	adds	r3, r2, r0
 80064f0:	2a01      	cmp	r2, #1
 80064f2:	4681      	mov	r9, r0
 80064f4:	6123      	str	r3, [r4, #16]
 80064f6:	dc02      	bgt.n	80064fe <_printf_float+0x14e>
 80064f8:	6822      	ldr	r2, [r4, #0]
 80064fa:	07d1      	lsls	r1, r2, #31
 80064fc:	d501      	bpl.n	8006502 <_printf_float+0x152>
 80064fe:	3301      	adds	r3, #1
 8006500:	6123      	str	r3, [r4, #16]
 8006502:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8006506:	2b00      	cmp	r3, #0
 8006508:	d0a5      	beq.n	8006456 <_printf_float+0xa6>
 800650a:	232d      	movs	r3, #45	; 0x2d
 800650c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006510:	e7a1      	b.n	8006456 <_printf_float+0xa6>
 8006512:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 8006516:	f000 8177 	beq.w	8006808 <_printf_float+0x458>
 800651a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800651e:	d1bb      	bne.n	8006498 <_printf_float+0xe8>
 8006520:	2900      	cmp	r1, #0
 8006522:	d1b9      	bne.n	8006498 <_printf_float+0xe8>
 8006524:	2301      	movs	r3, #1
 8006526:	e7b6      	b.n	8006496 <_printf_float+0xe6>
 8006528:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800652c:	d119      	bne.n	8006562 <_printf_float+0x1b2>
 800652e:	2900      	cmp	r1, #0
 8006530:	6863      	ldr	r3, [r4, #4]
 8006532:	dd0c      	ble.n	800654e <_printf_float+0x19e>
 8006534:	6121      	str	r1, [r4, #16]
 8006536:	b913      	cbnz	r3, 800653e <_printf_float+0x18e>
 8006538:	6822      	ldr	r2, [r4, #0]
 800653a:	07d2      	lsls	r2, r2, #31
 800653c:	d502      	bpl.n	8006544 <_printf_float+0x194>
 800653e:	3301      	adds	r3, #1
 8006540:	440b      	add	r3, r1
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006546:	65a3      	str	r3, [r4, #88]	; 0x58
 8006548:	f04f 0900 	mov.w	r9, #0
 800654c:	e7d9      	b.n	8006502 <_printf_float+0x152>
 800654e:	b913      	cbnz	r3, 8006556 <_printf_float+0x1a6>
 8006550:	6822      	ldr	r2, [r4, #0]
 8006552:	07d0      	lsls	r0, r2, #31
 8006554:	d501      	bpl.n	800655a <_printf_float+0x1aa>
 8006556:	3302      	adds	r3, #2
 8006558:	e7f3      	b.n	8006542 <_printf_float+0x192>
 800655a:	2301      	movs	r3, #1
 800655c:	e7f1      	b.n	8006542 <_printf_float+0x192>
 800655e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8006562:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8006566:	4293      	cmp	r3, r2
 8006568:	db05      	blt.n	8006576 <_printf_float+0x1c6>
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	6123      	str	r3, [r4, #16]
 800656e:	07d1      	lsls	r1, r2, #31
 8006570:	d5e8      	bpl.n	8006544 <_printf_float+0x194>
 8006572:	3301      	adds	r3, #1
 8006574:	e7e5      	b.n	8006542 <_printf_float+0x192>
 8006576:	2b00      	cmp	r3, #0
 8006578:	bfd4      	ite	le
 800657a:	f1c3 0302 	rsble	r3, r3, #2
 800657e:	2301      	movgt	r3, #1
 8006580:	4413      	add	r3, r2
 8006582:	e7de      	b.n	8006542 <_printf_float+0x192>
 8006584:	6823      	ldr	r3, [r4, #0]
 8006586:	055a      	lsls	r2, r3, #21
 8006588:	d407      	bmi.n	800659a <_printf_float+0x1ea>
 800658a:	6923      	ldr	r3, [r4, #16]
 800658c:	4642      	mov	r2, r8
 800658e:	4631      	mov	r1, r6
 8006590:	4628      	mov	r0, r5
 8006592:	47b8      	blx	r7
 8006594:	3001      	adds	r0, #1
 8006596:	d12b      	bne.n	80065f0 <_printf_float+0x240>
 8006598:	e767      	b.n	800646a <_printf_float+0xba>
 800659a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800659e:	f240 80dc 	bls.w	800675a <_printf_float+0x3aa>
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80065aa:	f7fa fa9d 	bl	8000ae8 <__aeabi_dcmpeq>
 80065ae:	2800      	cmp	r0, #0
 80065b0:	d033      	beq.n	800661a <_printf_float+0x26a>
 80065b2:	2301      	movs	r3, #1
 80065b4:	4a41      	ldr	r2, [pc, #260]	; (80066bc <_printf_float+0x30c>)
 80065b6:	4631      	mov	r1, r6
 80065b8:	4628      	mov	r0, r5
 80065ba:	47b8      	blx	r7
 80065bc:	3001      	adds	r0, #1
 80065be:	f43f af54 	beq.w	800646a <_printf_float+0xba>
 80065c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80065c6:	429a      	cmp	r2, r3
 80065c8:	db02      	blt.n	80065d0 <_printf_float+0x220>
 80065ca:	6823      	ldr	r3, [r4, #0]
 80065cc:	07d8      	lsls	r0, r3, #31
 80065ce:	d50f      	bpl.n	80065f0 <_printf_float+0x240>
 80065d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065d4:	4631      	mov	r1, r6
 80065d6:	4628      	mov	r0, r5
 80065d8:	47b8      	blx	r7
 80065da:	3001      	adds	r0, #1
 80065dc:	f43f af45 	beq.w	800646a <_printf_float+0xba>
 80065e0:	f04f 0800 	mov.w	r8, #0
 80065e4:	f104 091a 	add.w	r9, r4, #26
 80065e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065ea:	3b01      	subs	r3, #1
 80065ec:	4543      	cmp	r3, r8
 80065ee:	dc09      	bgt.n	8006604 <_printf_float+0x254>
 80065f0:	6823      	ldr	r3, [r4, #0]
 80065f2:	079b      	lsls	r3, r3, #30
 80065f4:	f100 8103 	bmi.w	80067fe <_printf_float+0x44e>
 80065f8:	68e0      	ldr	r0, [r4, #12]
 80065fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065fc:	4298      	cmp	r0, r3
 80065fe:	bfb8      	it	lt
 8006600:	4618      	movlt	r0, r3
 8006602:	e734      	b.n	800646e <_printf_float+0xbe>
 8006604:	2301      	movs	r3, #1
 8006606:	464a      	mov	r2, r9
 8006608:	4631      	mov	r1, r6
 800660a:	4628      	mov	r0, r5
 800660c:	47b8      	blx	r7
 800660e:	3001      	adds	r0, #1
 8006610:	f43f af2b 	beq.w	800646a <_printf_float+0xba>
 8006614:	f108 0801 	add.w	r8, r8, #1
 8006618:	e7e6      	b.n	80065e8 <_printf_float+0x238>
 800661a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661c:	2b00      	cmp	r3, #0
 800661e:	dc2b      	bgt.n	8006678 <_printf_float+0x2c8>
 8006620:	2301      	movs	r3, #1
 8006622:	4a26      	ldr	r2, [pc, #152]	; (80066bc <_printf_float+0x30c>)
 8006624:	4631      	mov	r1, r6
 8006626:	4628      	mov	r0, r5
 8006628:	47b8      	blx	r7
 800662a:	3001      	adds	r0, #1
 800662c:	f43f af1d 	beq.w	800646a <_printf_float+0xba>
 8006630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006632:	b923      	cbnz	r3, 800663e <_printf_float+0x28e>
 8006634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006636:	b913      	cbnz	r3, 800663e <_printf_float+0x28e>
 8006638:	6823      	ldr	r3, [r4, #0]
 800663a:	07d9      	lsls	r1, r3, #31
 800663c:	d5d8      	bpl.n	80065f0 <_printf_float+0x240>
 800663e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006642:	4631      	mov	r1, r6
 8006644:	4628      	mov	r0, r5
 8006646:	47b8      	blx	r7
 8006648:	3001      	adds	r0, #1
 800664a:	f43f af0e 	beq.w	800646a <_printf_float+0xba>
 800664e:	f04f 0900 	mov.w	r9, #0
 8006652:	f104 0a1a 	add.w	sl, r4, #26
 8006656:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006658:	425b      	negs	r3, r3
 800665a:	454b      	cmp	r3, r9
 800665c:	dc01      	bgt.n	8006662 <_printf_float+0x2b2>
 800665e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006660:	e794      	b.n	800658c <_printf_float+0x1dc>
 8006662:	2301      	movs	r3, #1
 8006664:	4652      	mov	r2, sl
 8006666:	4631      	mov	r1, r6
 8006668:	4628      	mov	r0, r5
 800666a:	47b8      	blx	r7
 800666c:	3001      	adds	r0, #1
 800666e:	f43f aefc 	beq.w	800646a <_printf_float+0xba>
 8006672:	f109 0901 	add.w	r9, r9, #1
 8006676:	e7ee      	b.n	8006656 <_printf_float+0x2a6>
 8006678:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800667a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800667c:	429a      	cmp	r2, r3
 800667e:	bfa8      	it	ge
 8006680:	461a      	movge	r2, r3
 8006682:	2a00      	cmp	r2, #0
 8006684:	4691      	mov	r9, r2
 8006686:	dd07      	ble.n	8006698 <_printf_float+0x2e8>
 8006688:	4613      	mov	r3, r2
 800668a:	4631      	mov	r1, r6
 800668c:	4642      	mov	r2, r8
 800668e:	4628      	mov	r0, r5
 8006690:	47b8      	blx	r7
 8006692:	3001      	adds	r0, #1
 8006694:	f43f aee9 	beq.w	800646a <_printf_float+0xba>
 8006698:	f104 031a 	add.w	r3, r4, #26
 800669c:	f04f 0b00 	mov.w	fp, #0
 80066a0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80066a4:	9306      	str	r3, [sp, #24]
 80066a6:	e015      	b.n	80066d4 <_printf_float+0x324>
 80066a8:	7fefffff 	.word	0x7fefffff
 80066ac:	0800a5fc 	.word	0x0800a5fc
 80066b0:	0800a5f8 	.word	0x0800a5f8
 80066b4:	0800a604 	.word	0x0800a604
 80066b8:	0800a600 	.word	0x0800a600
 80066bc:	0800a7bb 	.word	0x0800a7bb
 80066c0:	2301      	movs	r3, #1
 80066c2:	9a06      	ldr	r2, [sp, #24]
 80066c4:	4631      	mov	r1, r6
 80066c6:	4628      	mov	r0, r5
 80066c8:	47b8      	blx	r7
 80066ca:	3001      	adds	r0, #1
 80066cc:	f43f aecd 	beq.w	800646a <_printf_float+0xba>
 80066d0:	f10b 0b01 	add.w	fp, fp, #1
 80066d4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80066d8:	ebaa 0309 	sub.w	r3, sl, r9
 80066dc:	455b      	cmp	r3, fp
 80066de:	dcef      	bgt.n	80066c0 <_printf_float+0x310>
 80066e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80066e4:	429a      	cmp	r2, r3
 80066e6:	44d0      	add	r8, sl
 80066e8:	db15      	blt.n	8006716 <_printf_float+0x366>
 80066ea:	6823      	ldr	r3, [r4, #0]
 80066ec:	07da      	lsls	r2, r3, #31
 80066ee:	d412      	bmi.n	8006716 <_printf_float+0x366>
 80066f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80066f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80066f4:	eba3 020a 	sub.w	r2, r3, sl
 80066f8:	eba3 0a01 	sub.w	sl, r3, r1
 80066fc:	4592      	cmp	sl, r2
 80066fe:	bfa8      	it	ge
 8006700:	4692      	movge	sl, r2
 8006702:	f1ba 0f00 	cmp.w	sl, #0
 8006706:	dc0e      	bgt.n	8006726 <_printf_float+0x376>
 8006708:	f04f 0800 	mov.w	r8, #0
 800670c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006710:	f104 091a 	add.w	r9, r4, #26
 8006714:	e019      	b.n	800674a <_printf_float+0x39a>
 8006716:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800671a:	4631      	mov	r1, r6
 800671c:	4628      	mov	r0, r5
 800671e:	47b8      	blx	r7
 8006720:	3001      	adds	r0, #1
 8006722:	d1e5      	bne.n	80066f0 <_printf_float+0x340>
 8006724:	e6a1      	b.n	800646a <_printf_float+0xba>
 8006726:	4653      	mov	r3, sl
 8006728:	4642      	mov	r2, r8
 800672a:	4631      	mov	r1, r6
 800672c:	4628      	mov	r0, r5
 800672e:	47b8      	blx	r7
 8006730:	3001      	adds	r0, #1
 8006732:	d1e9      	bne.n	8006708 <_printf_float+0x358>
 8006734:	e699      	b.n	800646a <_printf_float+0xba>
 8006736:	2301      	movs	r3, #1
 8006738:	464a      	mov	r2, r9
 800673a:	4631      	mov	r1, r6
 800673c:	4628      	mov	r0, r5
 800673e:	47b8      	blx	r7
 8006740:	3001      	adds	r0, #1
 8006742:	f43f ae92 	beq.w	800646a <_printf_float+0xba>
 8006746:	f108 0801 	add.w	r8, r8, #1
 800674a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800674e:	1a9b      	subs	r3, r3, r2
 8006750:	eba3 030a 	sub.w	r3, r3, sl
 8006754:	4543      	cmp	r3, r8
 8006756:	dcee      	bgt.n	8006736 <_printf_float+0x386>
 8006758:	e74a      	b.n	80065f0 <_printf_float+0x240>
 800675a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800675c:	2a01      	cmp	r2, #1
 800675e:	dc01      	bgt.n	8006764 <_printf_float+0x3b4>
 8006760:	07db      	lsls	r3, r3, #31
 8006762:	d53a      	bpl.n	80067da <_printf_float+0x42a>
 8006764:	2301      	movs	r3, #1
 8006766:	4642      	mov	r2, r8
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f ae7b 	beq.w	800646a <_printf_float+0xba>
 8006774:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006778:	4631      	mov	r1, r6
 800677a:	4628      	mov	r0, r5
 800677c:	47b8      	blx	r7
 800677e:	3001      	adds	r0, #1
 8006780:	f108 0801 	add.w	r8, r8, #1
 8006784:	f43f ae71 	beq.w	800646a <_printf_float+0xba>
 8006788:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800678a:	2200      	movs	r2, #0
 800678c:	f103 3aff 	add.w	sl, r3, #4294967295
 8006790:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006794:	2300      	movs	r3, #0
 8006796:	f7fa f9a7 	bl	8000ae8 <__aeabi_dcmpeq>
 800679a:	b9c8      	cbnz	r0, 80067d0 <_printf_float+0x420>
 800679c:	4653      	mov	r3, sl
 800679e:	4642      	mov	r2, r8
 80067a0:	4631      	mov	r1, r6
 80067a2:	4628      	mov	r0, r5
 80067a4:	47b8      	blx	r7
 80067a6:	3001      	adds	r0, #1
 80067a8:	d10e      	bne.n	80067c8 <_printf_float+0x418>
 80067aa:	e65e      	b.n	800646a <_printf_float+0xba>
 80067ac:	2301      	movs	r3, #1
 80067ae:	4652      	mov	r2, sl
 80067b0:	4631      	mov	r1, r6
 80067b2:	4628      	mov	r0, r5
 80067b4:	47b8      	blx	r7
 80067b6:	3001      	adds	r0, #1
 80067b8:	f43f ae57 	beq.w	800646a <_printf_float+0xba>
 80067bc:	f108 0801 	add.w	r8, r8, #1
 80067c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067c2:	3b01      	subs	r3, #1
 80067c4:	4543      	cmp	r3, r8
 80067c6:	dcf1      	bgt.n	80067ac <_printf_float+0x3fc>
 80067c8:	464b      	mov	r3, r9
 80067ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80067ce:	e6de      	b.n	800658e <_printf_float+0x1de>
 80067d0:	f04f 0800 	mov.w	r8, #0
 80067d4:	f104 0a1a 	add.w	sl, r4, #26
 80067d8:	e7f2      	b.n	80067c0 <_printf_float+0x410>
 80067da:	2301      	movs	r3, #1
 80067dc:	e7df      	b.n	800679e <_printf_float+0x3ee>
 80067de:	2301      	movs	r3, #1
 80067e0:	464a      	mov	r2, r9
 80067e2:	4631      	mov	r1, r6
 80067e4:	4628      	mov	r0, r5
 80067e6:	47b8      	blx	r7
 80067e8:	3001      	adds	r0, #1
 80067ea:	f43f ae3e 	beq.w	800646a <_printf_float+0xba>
 80067ee:	f108 0801 	add.w	r8, r8, #1
 80067f2:	68e3      	ldr	r3, [r4, #12]
 80067f4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067f6:	1a9b      	subs	r3, r3, r2
 80067f8:	4543      	cmp	r3, r8
 80067fa:	dcf0      	bgt.n	80067de <_printf_float+0x42e>
 80067fc:	e6fc      	b.n	80065f8 <_printf_float+0x248>
 80067fe:	f04f 0800 	mov.w	r8, #0
 8006802:	f104 0919 	add.w	r9, r4, #25
 8006806:	e7f4      	b.n	80067f2 <_printf_float+0x442>
 8006808:	2900      	cmp	r1, #0
 800680a:	f43f ae8b 	beq.w	8006524 <_printf_float+0x174>
 800680e:	2300      	movs	r3, #0
 8006810:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006814:	ab09      	add	r3, sp, #36	; 0x24
 8006816:	9300      	str	r3, [sp, #0]
 8006818:	ec49 8b10 	vmov	d0, r8, r9
 800681c:	6022      	str	r2, [r4, #0]
 800681e:	f8cd a004 	str.w	sl, [sp, #4]
 8006822:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8006826:	4628      	mov	r0, r5
 8006828:	f7ff fd2e 	bl	8006288 <__cvt>
 800682c:	4680      	mov	r8, r0
 800682e:	e648      	b.n	80064c2 <_printf_float+0x112>

08006830 <_printf_common>:
 8006830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006834:	4691      	mov	r9, r2
 8006836:	461f      	mov	r7, r3
 8006838:	688a      	ldr	r2, [r1, #8]
 800683a:	690b      	ldr	r3, [r1, #16]
 800683c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006840:	4293      	cmp	r3, r2
 8006842:	bfb8      	it	lt
 8006844:	4613      	movlt	r3, r2
 8006846:	f8c9 3000 	str.w	r3, [r9]
 800684a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800684e:	4606      	mov	r6, r0
 8006850:	460c      	mov	r4, r1
 8006852:	b112      	cbz	r2, 800685a <_printf_common+0x2a>
 8006854:	3301      	adds	r3, #1
 8006856:	f8c9 3000 	str.w	r3, [r9]
 800685a:	6823      	ldr	r3, [r4, #0]
 800685c:	0699      	lsls	r1, r3, #26
 800685e:	bf42      	ittt	mi
 8006860:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006864:	3302      	addmi	r3, #2
 8006866:	f8c9 3000 	strmi.w	r3, [r9]
 800686a:	6825      	ldr	r5, [r4, #0]
 800686c:	f015 0506 	ands.w	r5, r5, #6
 8006870:	d107      	bne.n	8006882 <_printf_common+0x52>
 8006872:	f104 0a19 	add.w	sl, r4, #25
 8006876:	68e3      	ldr	r3, [r4, #12]
 8006878:	f8d9 2000 	ldr.w	r2, [r9]
 800687c:	1a9b      	subs	r3, r3, r2
 800687e:	42ab      	cmp	r3, r5
 8006880:	dc28      	bgt.n	80068d4 <_printf_common+0xa4>
 8006882:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006886:	6822      	ldr	r2, [r4, #0]
 8006888:	3300      	adds	r3, #0
 800688a:	bf18      	it	ne
 800688c:	2301      	movne	r3, #1
 800688e:	0692      	lsls	r2, r2, #26
 8006890:	d42d      	bmi.n	80068ee <_printf_common+0xbe>
 8006892:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006896:	4639      	mov	r1, r7
 8006898:	4630      	mov	r0, r6
 800689a:	47c0      	blx	r8
 800689c:	3001      	adds	r0, #1
 800689e:	d020      	beq.n	80068e2 <_printf_common+0xb2>
 80068a0:	6823      	ldr	r3, [r4, #0]
 80068a2:	68e5      	ldr	r5, [r4, #12]
 80068a4:	f8d9 2000 	ldr.w	r2, [r9]
 80068a8:	f003 0306 	and.w	r3, r3, #6
 80068ac:	2b04      	cmp	r3, #4
 80068ae:	bf08      	it	eq
 80068b0:	1aad      	subeq	r5, r5, r2
 80068b2:	68a3      	ldr	r3, [r4, #8]
 80068b4:	6922      	ldr	r2, [r4, #16]
 80068b6:	bf0c      	ite	eq
 80068b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068bc:	2500      	movne	r5, #0
 80068be:	4293      	cmp	r3, r2
 80068c0:	bfc4      	itt	gt
 80068c2:	1a9b      	subgt	r3, r3, r2
 80068c4:	18ed      	addgt	r5, r5, r3
 80068c6:	f04f 0900 	mov.w	r9, #0
 80068ca:	341a      	adds	r4, #26
 80068cc:	454d      	cmp	r5, r9
 80068ce:	d11a      	bne.n	8006906 <_printf_common+0xd6>
 80068d0:	2000      	movs	r0, #0
 80068d2:	e008      	b.n	80068e6 <_printf_common+0xb6>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4652      	mov	r2, sl
 80068d8:	4639      	mov	r1, r7
 80068da:	4630      	mov	r0, r6
 80068dc:	47c0      	blx	r8
 80068de:	3001      	adds	r0, #1
 80068e0:	d103      	bne.n	80068ea <_printf_common+0xba>
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ea:	3501      	adds	r5, #1
 80068ec:	e7c3      	b.n	8006876 <_printf_common+0x46>
 80068ee:	18e1      	adds	r1, r4, r3
 80068f0:	1c5a      	adds	r2, r3, #1
 80068f2:	2030      	movs	r0, #48	; 0x30
 80068f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80068f8:	4422      	add	r2, r4
 80068fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80068fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006902:	3302      	adds	r3, #2
 8006904:	e7c5      	b.n	8006892 <_printf_common+0x62>
 8006906:	2301      	movs	r3, #1
 8006908:	4622      	mov	r2, r4
 800690a:	4639      	mov	r1, r7
 800690c:	4630      	mov	r0, r6
 800690e:	47c0      	blx	r8
 8006910:	3001      	adds	r0, #1
 8006912:	d0e6      	beq.n	80068e2 <_printf_common+0xb2>
 8006914:	f109 0901 	add.w	r9, r9, #1
 8006918:	e7d8      	b.n	80068cc <_printf_common+0x9c>
	...

0800691c <_printf_i>:
 800691c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006920:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006924:	460c      	mov	r4, r1
 8006926:	7e09      	ldrb	r1, [r1, #24]
 8006928:	b085      	sub	sp, #20
 800692a:	296e      	cmp	r1, #110	; 0x6e
 800692c:	4617      	mov	r7, r2
 800692e:	4606      	mov	r6, r0
 8006930:	4698      	mov	r8, r3
 8006932:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006934:	f000 80b3 	beq.w	8006a9e <_printf_i+0x182>
 8006938:	d822      	bhi.n	8006980 <_printf_i+0x64>
 800693a:	2963      	cmp	r1, #99	; 0x63
 800693c:	d036      	beq.n	80069ac <_printf_i+0x90>
 800693e:	d80a      	bhi.n	8006956 <_printf_i+0x3a>
 8006940:	2900      	cmp	r1, #0
 8006942:	f000 80b9 	beq.w	8006ab8 <_printf_i+0x19c>
 8006946:	2958      	cmp	r1, #88	; 0x58
 8006948:	f000 8083 	beq.w	8006a52 <_printf_i+0x136>
 800694c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006950:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006954:	e032      	b.n	80069bc <_printf_i+0xa0>
 8006956:	2964      	cmp	r1, #100	; 0x64
 8006958:	d001      	beq.n	800695e <_printf_i+0x42>
 800695a:	2969      	cmp	r1, #105	; 0x69
 800695c:	d1f6      	bne.n	800694c <_printf_i+0x30>
 800695e:	6820      	ldr	r0, [r4, #0]
 8006960:	6813      	ldr	r3, [r2, #0]
 8006962:	0605      	lsls	r5, r0, #24
 8006964:	f103 0104 	add.w	r1, r3, #4
 8006968:	d52a      	bpl.n	80069c0 <_printf_i+0xa4>
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	6011      	str	r1, [r2, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	da03      	bge.n	800697a <_printf_i+0x5e>
 8006972:	222d      	movs	r2, #45	; 0x2d
 8006974:	425b      	negs	r3, r3
 8006976:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800697a:	486f      	ldr	r0, [pc, #444]	; (8006b38 <_printf_i+0x21c>)
 800697c:	220a      	movs	r2, #10
 800697e:	e039      	b.n	80069f4 <_printf_i+0xd8>
 8006980:	2973      	cmp	r1, #115	; 0x73
 8006982:	f000 809d 	beq.w	8006ac0 <_printf_i+0x1a4>
 8006986:	d808      	bhi.n	800699a <_printf_i+0x7e>
 8006988:	296f      	cmp	r1, #111	; 0x6f
 800698a:	d020      	beq.n	80069ce <_printf_i+0xb2>
 800698c:	2970      	cmp	r1, #112	; 0x70
 800698e:	d1dd      	bne.n	800694c <_printf_i+0x30>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	f043 0320 	orr.w	r3, r3, #32
 8006996:	6023      	str	r3, [r4, #0]
 8006998:	e003      	b.n	80069a2 <_printf_i+0x86>
 800699a:	2975      	cmp	r1, #117	; 0x75
 800699c:	d017      	beq.n	80069ce <_printf_i+0xb2>
 800699e:	2978      	cmp	r1, #120	; 0x78
 80069a0:	d1d4      	bne.n	800694c <_printf_i+0x30>
 80069a2:	2378      	movs	r3, #120	; 0x78
 80069a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80069a8:	4864      	ldr	r0, [pc, #400]	; (8006b3c <_printf_i+0x220>)
 80069aa:	e055      	b.n	8006a58 <_printf_i+0x13c>
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	1d19      	adds	r1, r3, #4
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	6011      	str	r1, [r2, #0]
 80069b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80069b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80069bc:	2301      	movs	r3, #1
 80069be:	e08c      	b.n	8006ada <_printf_i+0x1be>
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	6011      	str	r1, [r2, #0]
 80069c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80069c8:	bf18      	it	ne
 80069ca:	b21b      	sxthne	r3, r3
 80069cc:	e7cf      	b.n	800696e <_printf_i+0x52>
 80069ce:	6813      	ldr	r3, [r2, #0]
 80069d0:	6825      	ldr	r5, [r4, #0]
 80069d2:	1d18      	adds	r0, r3, #4
 80069d4:	6010      	str	r0, [r2, #0]
 80069d6:	0628      	lsls	r0, r5, #24
 80069d8:	d501      	bpl.n	80069de <_printf_i+0xc2>
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	e002      	b.n	80069e4 <_printf_i+0xc8>
 80069de:	0668      	lsls	r0, r5, #25
 80069e0:	d5fb      	bpl.n	80069da <_printf_i+0xbe>
 80069e2:	881b      	ldrh	r3, [r3, #0]
 80069e4:	4854      	ldr	r0, [pc, #336]	; (8006b38 <_printf_i+0x21c>)
 80069e6:	296f      	cmp	r1, #111	; 0x6f
 80069e8:	bf14      	ite	ne
 80069ea:	220a      	movne	r2, #10
 80069ec:	2208      	moveq	r2, #8
 80069ee:	2100      	movs	r1, #0
 80069f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80069f4:	6865      	ldr	r5, [r4, #4]
 80069f6:	60a5      	str	r5, [r4, #8]
 80069f8:	2d00      	cmp	r5, #0
 80069fa:	f2c0 8095 	blt.w	8006b28 <_printf_i+0x20c>
 80069fe:	6821      	ldr	r1, [r4, #0]
 8006a00:	f021 0104 	bic.w	r1, r1, #4
 8006a04:	6021      	str	r1, [r4, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d13d      	bne.n	8006a86 <_printf_i+0x16a>
 8006a0a:	2d00      	cmp	r5, #0
 8006a0c:	f040 808e 	bne.w	8006b2c <_printf_i+0x210>
 8006a10:	4665      	mov	r5, ip
 8006a12:	2a08      	cmp	r2, #8
 8006a14:	d10b      	bne.n	8006a2e <_printf_i+0x112>
 8006a16:	6823      	ldr	r3, [r4, #0]
 8006a18:	07db      	lsls	r3, r3, #31
 8006a1a:	d508      	bpl.n	8006a2e <_printf_i+0x112>
 8006a1c:	6923      	ldr	r3, [r4, #16]
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	bfde      	ittt	le
 8006a24:	2330      	movle	r3, #48	; 0x30
 8006a26:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006a2a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006a2e:	ebac 0305 	sub.w	r3, ip, r5
 8006a32:	6123      	str	r3, [r4, #16]
 8006a34:	f8cd 8000 	str.w	r8, [sp]
 8006a38:	463b      	mov	r3, r7
 8006a3a:	aa03      	add	r2, sp, #12
 8006a3c:	4621      	mov	r1, r4
 8006a3e:	4630      	mov	r0, r6
 8006a40:	f7ff fef6 	bl	8006830 <_printf_common>
 8006a44:	3001      	adds	r0, #1
 8006a46:	d14d      	bne.n	8006ae4 <_printf_i+0x1c8>
 8006a48:	f04f 30ff 	mov.w	r0, #4294967295
 8006a4c:	b005      	add	sp, #20
 8006a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006a52:	4839      	ldr	r0, [pc, #228]	; (8006b38 <_printf_i+0x21c>)
 8006a54:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006a58:	6813      	ldr	r3, [r2, #0]
 8006a5a:	6821      	ldr	r1, [r4, #0]
 8006a5c:	1d1d      	adds	r5, r3, #4
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	6015      	str	r5, [r2, #0]
 8006a62:	060a      	lsls	r2, r1, #24
 8006a64:	d50b      	bpl.n	8006a7e <_printf_i+0x162>
 8006a66:	07ca      	lsls	r2, r1, #31
 8006a68:	bf44      	itt	mi
 8006a6a:	f041 0120 	orrmi.w	r1, r1, #32
 8006a6e:	6021      	strmi	r1, [r4, #0]
 8006a70:	b91b      	cbnz	r3, 8006a7a <_printf_i+0x15e>
 8006a72:	6822      	ldr	r2, [r4, #0]
 8006a74:	f022 0220 	bic.w	r2, r2, #32
 8006a78:	6022      	str	r2, [r4, #0]
 8006a7a:	2210      	movs	r2, #16
 8006a7c:	e7b7      	b.n	80069ee <_printf_i+0xd2>
 8006a7e:	064d      	lsls	r5, r1, #25
 8006a80:	bf48      	it	mi
 8006a82:	b29b      	uxthmi	r3, r3
 8006a84:	e7ef      	b.n	8006a66 <_printf_i+0x14a>
 8006a86:	4665      	mov	r5, ip
 8006a88:	fbb3 f1f2 	udiv	r1, r3, r2
 8006a8c:	fb02 3311 	mls	r3, r2, r1, r3
 8006a90:	5cc3      	ldrb	r3, [r0, r3]
 8006a92:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8006a96:	460b      	mov	r3, r1
 8006a98:	2900      	cmp	r1, #0
 8006a9a:	d1f5      	bne.n	8006a88 <_printf_i+0x16c>
 8006a9c:	e7b9      	b.n	8006a12 <_printf_i+0xf6>
 8006a9e:	6813      	ldr	r3, [r2, #0]
 8006aa0:	6825      	ldr	r5, [r4, #0]
 8006aa2:	6961      	ldr	r1, [r4, #20]
 8006aa4:	1d18      	adds	r0, r3, #4
 8006aa6:	6010      	str	r0, [r2, #0]
 8006aa8:	0628      	lsls	r0, r5, #24
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	d501      	bpl.n	8006ab2 <_printf_i+0x196>
 8006aae:	6019      	str	r1, [r3, #0]
 8006ab0:	e002      	b.n	8006ab8 <_printf_i+0x19c>
 8006ab2:	066a      	lsls	r2, r5, #25
 8006ab4:	d5fb      	bpl.n	8006aae <_printf_i+0x192>
 8006ab6:	8019      	strh	r1, [r3, #0]
 8006ab8:	2300      	movs	r3, #0
 8006aba:	6123      	str	r3, [r4, #16]
 8006abc:	4665      	mov	r5, ip
 8006abe:	e7b9      	b.n	8006a34 <_printf_i+0x118>
 8006ac0:	6813      	ldr	r3, [r2, #0]
 8006ac2:	1d19      	adds	r1, r3, #4
 8006ac4:	6011      	str	r1, [r2, #0]
 8006ac6:	681d      	ldr	r5, [r3, #0]
 8006ac8:	6862      	ldr	r2, [r4, #4]
 8006aca:	2100      	movs	r1, #0
 8006acc:	4628      	mov	r0, r5
 8006ace:	f7f9 fb97 	bl	8000200 <memchr>
 8006ad2:	b108      	cbz	r0, 8006ad8 <_printf_i+0x1bc>
 8006ad4:	1b40      	subs	r0, r0, r5
 8006ad6:	6060      	str	r0, [r4, #4]
 8006ad8:	6863      	ldr	r3, [r4, #4]
 8006ada:	6123      	str	r3, [r4, #16]
 8006adc:	2300      	movs	r3, #0
 8006ade:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006ae2:	e7a7      	b.n	8006a34 <_printf_i+0x118>
 8006ae4:	6923      	ldr	r3, [r4, #16]
 8006ae6:	462a      	mov	r2, r5
 8006ae8:	4639      	mov	r1, r7
 8006aea:	4630      	mov	r0, r6
 8006aec:	47c0      	blx	r8
 8006aee:	3001      	adds	r0, #1
 8006af0:	d0aa      	beq.n	8006a48 <_printf_i+0x12c>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	079b      	lsls	r3, r3, #30
 8006af6:	d413      	bmi.n	8006b20 <_printf_i+0x204>
 8006af8:	68e0      	ldr	r0, [r4, #12]
 8006afa:	9b03      	ldr	r3, [sp, #12]
 8006afc:	4298      	cmp	r0, r3
 8006afe:	bfb8      	it	lt
 8006b00:	4618      	movlt	r0, r3
 8006b02:	e7a3      	b.n	8006a4c <_printf_i+0x130>
 8006b04:	2301      	movs	r3, #1
 8006b06:	464a      	mov	r2, r9
 8006b08:	4639      	mov	r1, r7
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	47c0      	blx	r8
 8006b0e:	3001      	adds	r0, #1
 8006b10:	d09a      	beq.n	8006a48 <_printf_i+0x12c>
 8006b12:	3501      	adds	r5, #1
 8006b14:	68e3      	ldr	r3, [r4, #12]
 8006b16:	9a03      	ldr	r2, [sp, #12]
 8006b18:	1a9b      	subs	r3, r3, r2
 8006b1a:	42ab      	cmp	r3, r5
 8006b1c:	dcf2      	bgt.n	8006b04 <_printf_i+0x1e8>
 8006b1e:	e7eb      	b.n	8006af8 <_printf_i+0x1dc>
 8006b20:	2500      	movs	r5, #0
 8006b22:	f104 0919 	add.w	r9, r4, #25
 8006b26:	e7f5      	b.n	8006b14 <_printf_i+0x1f8>
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1ac      	bne.n	8006a86 <_printf_i+0x16a>
 8006b2c:	7803      	ldrb	r3, [r0, #0]
 8006b2e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006b32:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006b36:	e76c      	b.n	8006a12 <_printf_i+0xf6>
 8006b38:	0800a608 	.word	0x0800a608
 8006b3c:	0800a619 	.word	0x0800a619

08006b40 <_scanf_float>:
 8006b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b44:	469a      	mov	sl, r3
 8006b46:	688b      	ldr	r3, [r1, #8]
 8006b48:	4616      	mov	r6, r2
 8006b4a:	1e5a      	subs	r2, r3, #1
 8006b4c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006b50:	b087      	sub	sp, #28
 8006b52:	bf83      	ittte	hi
 8006b54:	f46f 72ae 	mvnhi.w	r2, #348	; 0x15c
 8006b58:	189b      	addhi	r3, r3, r2
 8006b5a:	9301      	strhi	r3, [sp, #4]
 8006b5c:	2300      	movls	r3, #0
 8006b5e:	bf86      	itte	hi
 8006b60:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006b64:	608b      	strhi	r3, [r1, #8]
 8006b66:	9301      	strls	r3, [sp, #4]
 8006b68:	680b      	ldr	r3, [r1, #0]
 8006b6a:	4688      	mov	r8, r1
 8006b6c:	f04f 0b00 	mov.w	fp, #0
 8006b70:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006b74:	f848 3b1c 	str.w	r3, [r8], #28
 8006b78:	e9cd bb03 	strd	fp, fp, [sp, #12]
 8006b7c:	4607      	mov	r7, r0
 8006b7e:	460c      	mov	r4, r1
 8006b80:	4645      	mov	r5, r8
 8006b82:	465a      	mov	r2, fp
 8006b84:	46d9      	mov	r9, fp
 8006b86:	f8cd b008 	str.w	fp, [sp, #8]
 8006b8a:	68a1      	ldr	r1, [r4, #8]
 8006b8c:	b181      	cbz	r1, 8006bb0 <_scanf_float+0x70>
 8006b8e:	6833      	ldr	r3, [r6, #0]
 8006b90:	781b      	ldrb	r3, [r3, #0]
 8006b92:	2b49      	cmp	r3, #73	; 0x49
 8006b94:	d071      	beq.n	8006c7a <_scanf_float+0x13a>
 8006b96:	d84d      	bhi.n	8006c34 <_scanf_float+0xf4>
 8006b98:	2b39      	cmp	r3, #57	; 0x39
 8006b9a:	d840      	bhi.n	8006c1e <_scanf_float+0xde>
 8006b9c:	2b31      	cmp	r3, #49	; 0x31
 8006b9e:	f080 8088 	bcs.w	8006cb2 <_scanf_float+0x172>
 8006ba2:	2b2d      	cmp	r3, #45	; 0x2d
 8006ba4:	f000 8090 	beq.w	8006cc8 <_scanf_float+0x188>
 8006ba8:	d815      	bhi.n	8006bd6 <_scanf_float+0x96>
 8006baa:	2b2b      	cmp	r3, #43	; 0x2b
 8006bac:	f000 808c 	beq.w	8006cc8 <_scanf_float+0x188>
 8006bb0:	f1b9 0f00 	cmp.w	r9, #0
 8006bb4:	d003      	beq.n	8006bbe <_scanf_float+0x7e>
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bbc:	6023      	str	r3, [r4, #0]
 8006bbe:	3a01      	subs	r2, #1
 8006bc0:	2a01      	cmp	r2, #1
 8006bc2:	f200 80ea 	bhi.w	8006d9a <_scanf_float+0x25a>
 8006bc6:	4545      	cmp	r5, r8
 8006bc8:	f200 80dc 	bhi.w	8006d84 <_scanf_float+0x244>
 8006bcc:	2601      	movs	r6, #1
 8006bce:	4630      	mov	r0, r6
 8006bd0:	b007      	add	sp, #28
 8006bd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd6:	2b2e      	cmp	r3, #46	; 0x2e
 8006bd8:	f000 809f 	beq.w	8006d1a <_scanf_float+0x1da>
 8006bdc:	2b30      	cmp	r3, #48	; 0x30
 8006bde:	d1e7      	bne.n	8006bb0 <_scanf_float+0x70>
 8006be0:	6820      	ldr	r0, [r4, #0]
 8006be2:	f410 7f80 	tst.w	r0, #256	; 0x100
 8006be6:	d064      	beq.n	8006cb2 <_scanf_float+0x172>
 8006be8:	9b01      	ldr	r3, [sp, #4]
 8006bea:	f020 0080 	bic.w	r0, r0, #128	; 0x80
 8006bee:	6020      	str	r0, [r4, #0]
 8006bf0:	f109 0901 	add.w	r9, r9, #1
 8006bf4:	b11b      	cbz	r3, 8006bfe <_scanf_float+0xbe>
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	3101      	adds	r1, #1
 8006bfa:	9301      	str	r3, [sp, #4]
 8006bfc:	60a1      	str	r1, [r4, #8]
 8006bfe:	68a3      	ldr	r3, [r4, #8]
 8006c00:	3b01      	subs	r3, #1
 8006c02:	60a3      	str	r3, [r4, #8]
 8006c04:	6923      	ldr	r3, [r4, #16]
 8006c06:	3301      	adds	r3, #1
 8006c08:	6123      	str	r3, [r4, #16]
 8006c0a:	6873      	ldr	r3, [r6, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	6073      	str	r3, [r6, #4]
 8006c12:	f340 80ac 	ble.w	8006d6e <_scanf_float+0x22e>
 8006c16:	6833      	ldr	r3, [r6, #0]
 8006c18:	3301      	adds	r3, #1
 8006c1a:	6033      	str	r3, [r6, #0]
 8006c1c:	e7b5      	b.n	8006b8a <_scanf_float+0x4a>
 8006c1e:	2b45      	cmp	r3, #69	; 0x45
 8006c20:	f000 8085 	beq.w	8006d2e <_scanf_float+0x1ee>
 8006c24:	2b46      	cmp	r3, #70	; 0x46
 8006c26:	d06a      	beq.n	8006cfe <_scanf_float+0x1be>
 8006c28:	2b41      	cmp	r3, #65	; 0x41
 8006c2a:	d1c1      	bne.n	8006bb0 <_scanf_float+0x70>
 8006c2c:	2a01      	cmp	r2, #1
 8006c2e:	d1bf      	bne.n	8006bb0 <_scanf_float+0x70>
 8006c30:	2202      	movs	r2, #2
 8006c32:	e046      	b.n	8006cc2 <_scanf_float+0x182>
 8006c34:	2b65      	cmp	r3, #101	; 0x65
 8006c36:	d07a      	beq.n	8006d2e <_scanf_float+0x1ee>
 8006c38:	d818      	bhi.n	8006c6c <_scanf_float+0x12c>
 8006c3a:	2b54      	cmp	r3, #84	; 0x54
 8006c3c:	d066      	beq.n	8006d0c <_scanf_float+0x1cc>
 8006c3e:	d811      	bhi.n	8006c64 <_scanf_float+0x124>
 8006c40:	2b4e      	cmp	r3, #78	; 0x4e
 8006c42:	d1b5      	bne.n	8006bb0 <_scanf_float+0x70>
 8006c44:	2a00      	cmp	r2, #0
 8006c46:	d146      	bne.n	8006cd6 <_scanf_float+0x196>
 8006c48:	f1b9 0f00 	cmp.w	r9, #0
 8006c4c:	d145      	bne.n	8006cda <_scanf_float+0x19a>
 8006c4e:	6821      	ldr	r1, [r4, #0]
 8006c50:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006c54:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006c58:	d13f      	bne.n	8006cda <_scanf_float+0x19a>
 8006c5a:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006c5e:	6021      	str	r1, [r4, #0]
 8006c60:	2201      	movs	r2, #1
 8006c62:	e02e      	b.n	8006cc2 <_scanf_float+0x182>
 8006c64:	2b59      	cmp	r3, #89	; 0x59
 8006c66:	d01e      	beq.n	8006ca6 <_scanf_float+0x166>
 8006c68:	2b61      	cmp	r3, #97	; 0x61
 8006c6a:	e7de      	b.n	8006c2a <_scanf_float+0xea>
 8006c6c:	2b6e      	cmp	r3, #110	; 0x6e
 8006c6e:	d0e9      	beq.n	8006c44 <_scanf_float+0x104>
 8006c70:	d815      	bhi.n	8006c9e <_scanf_float+0x15e>
 8006c72:	2b66      	cmp	r3, #102	; 0x66
 8006c74:	d043      	beq.n	8006cfe <_scanf_float+0x1be>
 8006c76:	2b69      	cmp	r3, #105	; 0x69
 8006c78:	d19a      	bne.n	8006bb0 <_scanf_float+0x70>
 8006c7a:	f1bb 0f00 	cmp.w	fp, #0
 8006c7e:	d138      	bne.n	8006cf2 <_scanf_float+0x1b2>
 8006c80:	f1b9 0f00 	cmp.w	r9, #0
 8006c84:	d197      	bne.n	8006bb6 <_scanf_float+0x76>
 8006c86:	6821      	ldr	r1, [r4, #0]
 8006c88:	f401 60e0 	and.w	r0, r1, #1792	; 0x700
 8006c8c:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8006c90:	d195      	bne.n	8006bbe <_scanf_float+0x7e>
 8006c92:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006c96:	6021      	str	r1, [r4, #0]
 8006c98:	f04f 0b01 	mov.w	fp, #1
 8006c9c:	e011      	b.n	8006cc2 <_scanf_float+0x182>
 8006c9e:	2b74      	cmp	r3, #116	; 0x74
 8006ca0:	d034      	beq.n	8006d0c <_scanf_float+0x1cc>
 8006ca2:	2b79      	cmp	r3, #121	; 0x79
 8006ca4:	d184      	bne.n	8006bb0 <_scanf_float+0x70>
 8006ca6:	f1bb 0f07 	cmp.w	fp, #7
 8006caa:	d181      	bne.n	8006bb0 <_scanf_float+0x70>
 8006cac:	f04f 0b08 	mov.w	fp, #8
 8006cb0:	e007      	b.n	8006cc2 <_scanf_float+0x182>
 8006cb2:	eb12 0f0b 	cmn.w	r2, fp
 8006cb6:	f47f af7b 	bne.w	8006bb0 <_scanf_float+0x70>
 8006cba:	6821      	ldr	r1, [r4, #0]
 8006cbc:	f421 71c0 	bic.w	r1, r1, #384	; 0x180
 8006cc0:	6021      	str	r1, [r4, #0]
 8006cc2:	702b      	strb	r3, [r5, #0]
 8006cc4:	3501      	adds	r5, #1
 8006cc6:	e79a      	b.n	8006bfe <_scanf_float+0xbe>
 8006cc8:	6821      	ldr	r1, [r4, #0]
 8006cca:	0608      	lsls	r0, r1, #24
 8006ccc:	f57f af70 	bpl.w	8006bb0 <_scanf_float+0x70>
 8006cd0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006cd4:	e7f4      	b.n	8006cc0 <_scanf_float+0x180>
 8006cd6:	2a02      	cmp	r2, #2
 8006cd8:	d047      	beq.n	8006d6a <_scanf_float+0x22a>
 8006cda:	f1bb 0f01 	cmp.w	fp, #1
 8006cde:	d003      	beq.n	8006ce8 <_scanf_float+0x1a8>
 8006ce0:	f1bb 0f04 	cmp.w	fp, #4
 8006ce4:	f47f af64 	bne.w	8006bb0 <_scanf_float+0x70>
 8006ce8:	f10b 0b01 	add.w	fp, fp, #1
 8006cec:	fa5f fb8b 	uxtb.w	fp, fp
 8006cf0:	e7e7      	b.n	8006cc2 <_scanf_float+0x182>
 8006cf2:	f1bb 0f03 	cmp.w	fp, #3
 8006cf6:	d0f7      	beq.n	8006ce8 <_scanf_float+0x1a8>
 8006cf8:	f1bb 0f05 	cmp.w	fp, #5
 8006cfc:	e7f2      	b.n	8006ce4 <_scanf_float+0x1a4>
 8006cfe:	f1bb 0f02 	cmp.w	fp, #2
 8006d02:	f47f af55 	bne.w	8006bb0 <_scanf_float+0x70>
 8006d06:	f04f 0b03 	mov.w	fp, #3
 8006d0a:	e7da      	b.n	8006cc2 <_scanf_float+0x182>
 8006d0c:	f1bb 0f06 	cmp.w	fp, #6
 8006d10:	f47f af4e 	bne.w	8006bb0 <_scanf_float+0x70>
 8006d14:	f04f 0b07 	mov.w	fp, #7
 8006d18:	e7d3      	b.n	8006cc2 <_scanf_float+0x182>
 8006d1a:	6821      	ldr	r1, [r4, #0]
 8006d1c:	0588      	lsls	r0, r1, #22
 8006d1e:	f57f af47 	bpl.w	8006bb0 <_scanf_float+0x70>
 8006d22:	f421 7120 	bic.w	r1, r1, #640	; 0x280
 8006d26:	6021      	str	r1, [r4, #0]
 8006d28:	f8cd 9008 	str.w	r9, [sp, #8]
 8006d2c:	e7c9      	b.n	8006cc2 <_scanf_float+0x182>
 8006d2e:	6821      	ldr	r1, [r4, #0]
 8006d30:	f401 60a0 	and.w	r0, r1, #1280	; 0x500
 8006d34:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8006d38:	d006      	beq.n	8006d48 <_scanf_float+0x208>
 8006d3a:	0548      	lsls	r0, r1, #21
 8006d3c:	f57f af38 	bpl.w	8006bb0 <_scanf_float+0x70>
 8006d40:	f1b9 0f00 	cmp.w	r9, #0
 8006d44:	f43f af3b 	beq.w	8006bbe <_scanf_float+0x7e>
 8006d48:	0588      	lsls	r0, r1, #22
 8006d4a:	bf58      	it	pl
 8006d4c:	9802      	ldrpl	r0, [sp, #8]
 8006d4e:	f421 61f0 	bic.w	r1, r1, #1920	; 0x780
 8006d52:	bf58      	it	pl
 8006d54:	eba9 0000 	subpl.w	r0, r9, r0
 8006d58:	f441 71c0 	orr.w	r1, r1, #384	; 0x180
 8006d5c:	bf58      	it	pl
 8006d5e:	e9cd 0503 	strdpl	r0, r5, [sp, #12]
 8006d62:	6021      	str	r1, [r4, #0]
 8006d64:	f04f 0900 	mov.w	r9, #0
 8006d68:	e7ab      	b.n	8006cc2 <_scanf_float+0x182>
 8006d6a:	2203      	movs	r2, #3
 8006d6c:	e7a9      	b.n	8006cc2 <_scanf_float+0x182>
 8006d6e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006d72:	9205      	str	r2, [sp, #20]
 8006d74:	4631      	mov	r1, r6
 8006d76:	4638      	mov	r0, r7
 8006d78:	4798      	blx	r3
 8006d7a:	9a05      	ldr	r2, [sp, #20]
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	f43f af04 	beq.w	8006b8a <_scanf_float+0x4a>
 8006d82:	e715      	b.n	8006bb0 <_scanf_float+0x70>
 8006d84:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d88:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	4638      	mov	r0, r7
 8006d90:	4798      	blx	r3
 8006d92:	6923      	ldr	r3, [r4, #16]
 8006d94:	3b01      	subs	r3, #1
 8006d96:	6123      	str	r3, [r4, #16]
 8006d98:	e715      	b.n	8006bc6 <_scanf_float+0x86>
 8006d9a:	f10b 33ff 	add.w	r3, fp, #4294967295
 8006d9e:	2b06      	cmp	r3, #6
 8006da0:	d80a      	bhi.n	8006db8 <_scanf_float+0x278>
 8006da2:	f1bb 0f02 	cmp.w	fp, #2
 8006da6:	d968      	bls.n	8006e7a <_scanf_float+0x33a>
 8006da8:	f1ab 0b03 	sub.w	fp, fp, #3
 8006dac:	fa5f fb8b 	uxtb.w	fp, fp
 8006db0:	eba5 0b0b 	sub.w	fp, r5, fp
 8006db4:	455d      	cmp	r5, fp
 8006db6:	d14b      	bne.n	8006e50 <_scanf_float+0x310>
 8006db8:	6823      	ldr	r3, [r4, #0]
 8006dba:	05da      	lsls	r2, r3, #23
 8006dbc:	d51f      	bpl.n	8006dfe <_scanf_float+0x2be>
 8006dbe:	055b      	lsls	r3, r3, #21
 8006dc0:	d468      	bmi.n	8006e94 <_scanf_float+0x354>
 8006dc2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8006dc6:	6923      	ldr	r3, [r4, #16]
 8006dc8:	2965      	cmp	r1, #101	; 0x65
 8006dca:	f103 33ff 	add.w	r3, r3, #4294967295
 8006dce:	f105 3bff 	add.w	fp, r5, #4294967295
 8006dd2:	6123      	str	r3, [r4, #16]
 8006dd4:	d00d      	beq.n	8006df2 <_scanf_float+0x2b2>
 8006dd6:	2945      	cmp	r1, #69	; 0x45
 8006dd8:	d00b      	beq.n	8006df2 <_scanf_float+0x2b2>
 8006dda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006dde:	4632      	mov	r2, r6
 8006de0:	4638      	mov	r0, r7
 8006de2:	4798      	blx	r3
 8006de4:	6923      	ldr	r3, [r4, #16]
 8006de6:	f815 1c02 	ldrb.w	r1, [r5, #-2]
 8006dea:	3b01      	subs	r3, #1
 8006dec:	f1a5 0b02 	sub.w	fp, r5, #2
 8006df0:	6123      	str	r3, [r4, #16]
 8006df2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006df6:	4632      	mov	r2, r6
 8006df8:	4638      	mov	r0, r7
 8006dfa:	4798      	blx	r3
 8006dfc:	465d      	mov	r5, fp
 8006dfe:	6826      	ldr	r6, [r4, #0]
 8006e00:	f016 0610 	ands.w	r6, r6, #16
 8006e04:	d17a      	bne.n	8006efc <_scanf_float+0x3bc>
 8006e06:	702e      	strb	r6, [r5, #0]
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006e0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e12:	d142      	bne.n	8006e9a <_scanf_float+0x35a>
 8006e14:	9b02      	ldr	r3, [sp, #8]
 8006e16:	eba9 0303 	sub.w	r3, r9, r3
 8006e1a:	425a      	negs	r2, r3
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d149      	bne.n	8006eb4 <_scanf_float+0x374>
 8006e20:	2200      	movs	r2, #0
 8006e22:	4641      	mov	r1, r8
 8006e24:	4638      	mov	r0, r7
 8006e26:	f000 fecf 	bl	8007bc8 <_strtod_r>
 8006e2a:	6825      	ldr	r5, [r4, #0]
 8006e2c:	f8da 3000 	ldr.w	r3, [sl]
 8006e30:	f015 0f02 	tst.w	r5, #2
 8006e34:	f103 0204 	add.w	r2, r3, #4
 8006e38:	ec59 8b10 	vmov	r8, r9, d0
 8006e3c:	f8ca 2000 	str.w	r2, [sl]
 8006e40:	d043      	beq.n	8006eca <_scanf_float+0x38a>
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	e9c3 8900 	strd	r8, r9, [r3]
 8006e48:	68e3      	ldr	r3, [r4, #12]
 8006e4a:	3301      	adds	r3, #1
 8006e4c:	60e3      	str	r3, [r4, #12]
 8006e4e:	e6be      	b.n	8006bce <_scanf_float+0x8e>
 8006e50:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e54:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e58:	4632      	mov	r2, r6
 8006e5a:	4638      	mov	r0, r7
 8006e5c:	4798      	blx	r3
 8006e5e:	6923      	ldr	r3, [r4, #16]
 8006e60:	3b01      	subs	r3, #1
 8006e62:	6123      	str	r3, [r4, #16]
 8006e64:	e7a6      	b.n	8006db4 <_scanf_float+0x274>
 8006e66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e6a:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e6e:	4632      	mov	r2, r6
 8006e70:	4638      	mov	r0, r7
 8006e72:	4798      	blx	r3
 8006e74:	6923      	ldr	r3, [r4, #16]
 8006e76:	3b01      	subs	r3, #1
 8006e78:	6123      	str	r3, [r4, #16]
 8006e7a:	4545      	cmp	r5, r8
 8006e7c:	d8f3      	bhi.n	8006e66 <_scanf_float+0x326>
 8006e7e:	e6a5      	b.n	8006bcc <_scanf_float+0x8c>
 8006e80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006e84:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
 8006e88:	4632      	mov	r2, r6
 8006e8a:	4638      	mov	r0, r7
 8006e8c:	4798      	blx	r3
 8006e8e:	6923      	ldr	r3, [r4, #16]
 8006e90:	3b01      	subs	r3, #1
 8006e92:	6123      	str	r3, [r4, #16]
 8006e94:	4545      	cmp	r5, r8
 8006e96:	d8f3      	bhi.n	8006e80 <_scanf_float+0x340>
 8006e98:	e698      	b.n	8006bcc <_scanf_float+0x8c>
 8006e9a:	9b03      	ldr	r3, [sp, #12]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0bf      	beq.n	8006e20 <_scanf_float+0x2e0>
 8006ea0:	9904      	ldr	r1, [sp, #16]
 8006ea2:	230a      	movs	r3, #10
 8006ea4:	4632      	mov	r2, r6
 8006ea6:	3101      	adds	r1, #1
 8006ea8:	4638      	mov	r0, r7
 8006eaa:	f000 ff19 	bl	8007ce0 <_strtol_r>
 8006eae:	9b03      	ldr	r3, [sp, #12]
 8006eb0:	9d04      	ldr	r5, [sp, #16]
 8006eb2:	1ac2      	subs	r2, r0, r3
 8006eb4:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006eb8:	429d      	cmp	r5, r3
 8006eba:	bf28      	it	cs
 8006ebc:	f504 75b7 	addcs.w	r5, r4, #366	; 0x16e
 8006ec0:	490f      	ldr	r1, [pc, #60]	; (8006f00 <_scanf_float+0x3c0>)
 8006ec2:	4628      	mov	r0, r5
 8006ec4:	f000 f824 	bl	8006f10 <siprintf>
 8006ec8:	e7aa      	b.n	8006e20 <_scanf_float+0x2e0>
 8006eca:	f015 0504 	ands.w	r5, r5, #4
 8006ece:	d1b8      	bne.n	8006e42 <_scanf_float+0x302>
 8006ed0:	681f      	ldr	r7, [r3, #0]
 8006ed2:	ee10 2a10 	vmov	r2, s0
 8006ed6:	464b      	mov	r3, r9
 8006ed8:	ee10 0a10 	vmov	r0, s0
 8006edc:	4649      	mov	r1, r9
 8006ede:	f7f9 fe35 	bl	8000b4c <__aeabi_dcmpun>
 8006ee2:	b128      	cbz	r0, 8006ef0 <_scanf_float+0x3b0>
 8006ee4:	4628      	mov	r0, r5
 8006ee6:	f000 f80d 	bl	8006f04 <nanf>
 8006eea:	ed87 0a00 	vstr	s0, [r7]
 8006eee:	e7ab      	b.n	8006e48 <_scanf_float+0x308>
 8006ef0:	4640      	mov	r0, r8
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	f7f9 fe88 	bl	8000c08 <__aeabi_d2f>
 8006ef8:	6038      	str	r0, [r7, #0]
 8006efa:	e7a5      	b.n	8006e48 <_scanf_float+0x308>
 8006efc:	2600      	movs	r6, #0
 8006efe:	e666      	b.n	8006bce <_scanf_float+0x8e>
 8006f00:	0800a62a 	.word	0x0800a62a

08006f04 <nanf>:
 8006f04:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006f0c <nanf+0x8>
 8006f08:	4770      	bx	lr
 8006f0a:	bf00      	nop
 8006f0c:	7fc00000 	.word	0x7fc00000

08006f10 <siprintf>:
 8006f10:	b40e      	push	{r1, r2, r3}
 8006f12:	b500      	push	{lr}
 8006f14:	b09c      	sub	sp, #112	; 0x70
 8006f16:	ab1d      	add	r3, sp, #116	; 0x74
 8006f18:	9002      	str	r0, [sp, #8]
 8006f1a:	9006      	str	r0, [sp, #24]
 8006f1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f20:	4809      	ldr	r0, [pc, #36]	; (8006f48 <siprintf+0x38>)
 8006f22:	9107      	str	r1, [sp, #28]
 8006f24:	9104      	str	r1, [sp, #16]
 8006f26:	4909      	ldr	r1, [pc, #36]	; (8006f4c <siprintf+0x3c>)
 8006f28:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f2c:	9105      	str	r1, [sp, #20]
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	9301      	str	r3, [sp, #4]
 8006f32:	a902      	add	r1, sp, #8
 8006f34:	f002 fda8 	bl	8009a88 <_svfiprintf_r>
 8006f38:	9b02      	ldr	r3, [sp, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	701a      	strb	r2, [r3, #0]
 8006f3e:	b01c      	add	sp, #112	; 0x70
 8006f40:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f44:	b003      	add	sp, #12
 8006f46:	4770      	bx	lr
 8006f48:	20000014 	.word	0x20000014
 8006f4c:	ffff0208 	.word	0xffff0208

08006f50 <siscanf>:
 8006f50:	b40e      	push	{r1, r2, r3}
 8006f52:	b530      	push	{r4, r5, lr}
 8006f54:	b09c      	sub	sp, #112	; 0x70
 8006f56:	ac1f      	add	r4, sp, #124	; 0x7c
 8006f58:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006f5c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006f60:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006f64:	9002      	str	r0, [sp, #8]
 8006f66:	9006      	str	r0, [sp, #24]
 8006f68:	f7f9 f93c 	bl	80001e4 <strlen>
 8006f6c:	4b0b      	ldr	r3, [pc, #44]	; (8006f9c <siscanf+0x4c>)
 8006f6e:	9003      	str	r0, [sp, #12]
 8006f70:	9007      	str	r0, [sp, #28]
 8006f72:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f74:	480a      	ldr	r0, [pc, #40]	; (8006fa0 <siscanf+0x50>)
 8006f76:	9401      	str	r4, [sp, #4]
 8006f78:	2300      	movs	r3, #0
 8006f7a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006f7c:	9314      	str	r3, [sp, #80]	; 0x50
 8006f7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006f82:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006f86:	462a      	mov	r2, r5
 8006f88:	4623      	mov	r3, r4
 8006f8a:	a902      	add	r1, sp, #8
 8006f8c:	6800      	ldr	r0, [r0, #0]
 8006f8e:	f002 fecd 	bl	8009d2c <__ssvfiscanf_r>
 8006f92:	b01c      	add	sp, #112	; 0x70
 8006f94:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006f98:	b003      	add	sp, #12
 8006f9a:	4770      	bx	lr
 8006f9c:	08006fa5 	.word	0x08006fa5
 8006fa0:	20000014 	.word	0x20000014

08006fa4 <__seofread>:
 8006fa4:	2000      	movs	r0, #0
 8006fa6:	4770      	bx	lr

08006fa8 <sulp>:
 8006fa8:	b570      	push	{r4, r5, r6, lr}
 8006faa:	4604      	mov	r4, r0
 8006fac:	460d      	mov	r5, r1
 8006fae:	ec45 4b10 	vmov	d0, r4, r5
 8006fb2:	4616      	mov	r6, r2
 8006fb4:	f002 fb24 	bl	8009600 <__ulp>
 8006fb8:	ec51 0b10 	vmov	r0, r1, d0
 8006fbc:	b17e      	cbz	r6, 8006fde <sulp+0x36>
 8006fbe:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006fc2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	dd09      	ble.n	8006fde <sulp+0x36>
 8006fca:	051b      	lsls	r3, r3, #20
 8006fcc:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006fd0:	2400      	movs	r4, #0
 8006fd2:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006fd6:	4622      	mov	r2, r4
 8006fd8:	462b      	mov	r3, r5
 8006fda:	f7f9 fb1d 	bl	8000618 <__aeabi_dmul>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}

08006fe0 <_strtod_l>:
 8006fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe4:	461f      	mov	r7, r3
 8006fe6:	b0a1      	sub	sp, #132	; 0x84
 8006fe8:	2300      	movs	r3, #0
 8006fea:	4681      	mov	r9, r0
 8006fec:	4638      	mov	r0, r7
 8006fee:	460e      	mov	r6, r1
 8006ff0:	9217      	str	r2, [sp, #92]	; 0x5c
 8006ff2:	931c      	str	r3, [sp, #112]	; 0x70
 8006ff4:	f002 f804 	bl	8009000 <__localeconv_l>
 8006ff8:	4680      	mov	r8, r0
 8006ffa:	6800      	ldr	r0, [r0, #0]
 8006ffc:	f7f9 f8f2 	bl	80001e4 <strlen>
 8007000:	f04f 0a00 	mov.w	sl, #0
 8007004:	4604      	mov	r4, r0
 8007006:	f04f 0b00 	mov.w	fp, #0
 800700a:	961b      	str	r6, [sp, #108]	; 0x6c
 800700c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800700e:	781a      	ldrb	r2, [r3, #0]
 8007010:	2a0d      	cmp	r2, #13
 8007012:	d832      	bhi.n	800707a <_strtod_l+0x9a>
 8007014:	2a09      	cmp	r2, #9
 8007016:	d236      	bcs.n	8007086 <_strtod_l+0xa6>
 8007018:	2a00      	cmp	r2, #0
 800701a:	d03e      	beq.n	800709a <_strtod_l+0xba>
 800701c:	2300      	movs	r3, #0
 800701e:	930d      	str	r3, [sp, #52]	; 0x34
 8007020:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8007022:	782b      	ldrb	r3, [r5, #0]
 8007024:	2b30      	cmp	r3, #48	; 0x30
 8007026:	f040 80ac 	bne.w	8007182 <_strtod_l+0x1a2>
 800702a:	786b      	ldrb	r3, [r5, #1]
 800702c:	2b58      	cmp	r3, #88	; 0x58
 800702e:	d001      	beq.n	8007034 <_strtod_l+0x54>
 8007030:	2b78      	cmp	r3, #120	; 0x78
 8007032:	d167      	bne.n	8007104 <_strtod_l+0x124>
 8007034:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007036:	9301      	str	r3, [sp, #4]
 8007038:	ab1c      	add	r3, sp, #112	; 0x70
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	9702      	str	r7, [sp, #8]
 800703e:	ab1d      	add	r3, sp, #116	; 0x74
 8007040:	4a88      	ldr	r2, [pc, #544]	; (8007264 <_strtod_l+0x284>)
 8007042:	a91b      	add	r1, sp, #108	; 0x6c
 8007044:	4648      	mov	r0, r9
 8007046:	f001 fcf2 	bl	8008a2e <__gethex>
 800704a:	f010 0407 	ands.w	r4, r0, #7
 800704e:	4606      	mov	r6, r0
 8007050:	d005      	beq.n	800705e <_strtod_l+0x7e>
 8007052:	2c06      	cmp	r4, #6
 8007054:	d12b      	bne.n	80070ae <_strtod_l+0xce>
 8007056:	3501      	adds	r5, #1
 8007058:	2300      	movs	r3, #0
 800705a:	951b      	str	r5, [sp, #108]	; 0x6c
 800705c:	930d      	str	r3, [sp, #52]	; 0x34
 800705e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007060:	2b00      	cmp	r3, #0
 8007062:	f040 859a 	bne.w	8007b9a <_strtod_l+0xbba>
 8007066:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007068:	b1e3      	cbz	r3, 80070a4 <_strtod_l+0xc4>
 800706a:	4652      	mov	r2, sl
 800706c:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8007070:	ec43 2b10 	vmov	d0, r2, r3
 8007074:	b021      	add	sp, #132	; 0x84
 8007076:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707a:	2a2b      	cmp	r2, #43	; 0x2b
 800707c:	d015      	beq.n	80070aa <_strtod_l+0xca>
 800707e:	2a2d      	cmp	r2, #45	; 0x2d
 8007080:	d004      	beq.n	800708c <_strtod_l+0xac>
 8007082:	2a20      	cmp	r2, #32
 8007084:	d1ca      	bne.n	800701c <_strtod_l+0x3c>
 8007086:	3301      	adds	r3, #1
 8007088:	931b      	str	r3, [sp, #108]	; 0x6c
 800708a:	e7bf      	b.n	800700c <_strtod_l+0x2c>
 800708c:	2201      	movs	r2, #1
 800708e:	920d      	str	r2, [sp, #52]	; 0x34
 8007090:	1c5a      	adds	r2, r3, #1
 8007092:	921b      	str	r2, [sp, #108]	; 0x6c
 8007094:	785b      	ldrb	r3, [r3, #1]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1c2      	bne.n	8007020 <_strtod_l+0x40>
 800709a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800709c:	961b      	str	r6, [sp, #108]	; 0x6c
 800709e:	2b00      	cmp	r3, #0
 80070a0:	f040 8579 	bne.w	8007b96 <_strtod_l+0xbb6>
 80070a4:	4652      	mov	r2, sl
 80070a6:	465b      	mov	r3, fp
 80070a8:	e7e2      	b.n	8007070 <_strtod_l+0x90>
 80070aa:	2200      	movs	r2, #0
 80070ac:	e7ef      	b.n	800708e <_strtod_l+0xae>
 80070ae:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80070b0:	b13a      	cbz	r2, 80070c2 <_strtod_l+0xe2>
 80070b2:	2135      	movs	r1, #53	; 0x35
 80070b4:	a81e      	add	r0, sp, #120	; 0x78
 80070b6:	f002 fb9b 	bl	80097f0 <__copybits>
 80070ba:	991c      	ldr	r1, [sp, #112]	; 0x70
 80070bc:	4648      	mov	r0, r9
 80070be:	f002 f808 	bl	80090d2 <_Bfree>
 80070c2:	3c01      	subs	r4, #1
 80070c4:	2c04      	cmp	r4, #4
 80070c6:	d806      	bhi.n	80070d6 <_strtod_l+0xf6>
 80070c8:	e8df f004 	tbb	[pc, r4]
 80070cc:	1714030a 	.word	0x1714030a
 80070d0:	0a          	.byte	0x0a
 80070d1:	00          	.byte	0x00
 80070d2:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 80070d6:	0730      	lsls	r0, r6, #28
 80070d8:	d5c1      	bpl.n	800705e <_strtod_l+0x7e>
 80070da:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80070de:	e7be      	b.n	800705e <_strtod_l+0x7e>
 80070e0:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 80070e4:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80070e6:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80070ea:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80070ee:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80070f2:	e7f0      	b.n	80070d6 <_strtod_l+0xf6>
 80070f4:	f8df b170 	ldr.w	fp, [pc, #368]	; 8007268 <_strtod_l+0x288>
 80070f8:	e7ed      	b.n	80070d6 <_strtod_l+0xf6>
 80070fa:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80070fe:	f04f 3aff 	mov.w	sl, #4294967295
 8007102:	e7e8      	b.n	80070d6 <_strtod_l+0xf6>
 8007104:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007106:	1c5a      	adds	r2, r3, #1
 8007108:	921b      	str	r2, [sp, #108]	; 0x6c
 800710a:	785b      	ldrb	r3, [r3, #1]
 800710c:	2b30      	cmp	r3, #48	; 0x30
 800710e:	d0f9      	beq.n	8007104 <_strtod_l+0x124>
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0a4      	beq.n	800705e <_strtod_l+0x7e>
 8007114:	2301      	movs	r3, #1
 8007116:	2500      	movs	r5, #0
 8007118:	9306      	str	r3, [sp, #24]
 800711a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800711c:	9308      	str	r3, [sp, #32]
 800711e:	9507      	str	r5, [sp, #28]
 8007120:	9505      	str	r5, [sp, #20]
 8007122:	220a      	movs	r2, #10
 8007124:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8007126:	7807      	ldrb	r7, [r0, #0]
 8007128:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800712c:	b2d9      	uxtb	r1, r3
 800712e:	2909      	cmp	r1, #9
 8007130:	d929      	bls.n	8007186 <_strtod_l+0x1a6>
 8007132:	4622      	mov	r2, r4
 8007134:	f8d8 1000 	ldr.w	r1, [r8]
 8007138:	f003 f8e2 	bl	800a300 <strncmp>
 800713c:	2800      	cmp	r0, #0
 800713e:	d031      	beq.n	80071a4 <_strtod_l+0x1c4>
 8007140:	2000      	movs	r0, #0
 8007142:	9c05      	ldr	r4, [sp, #20]
 8007144:	9004      	str	r0, [sp, #16]
 8007146:	463b      	mov	r3, r7
 8007148:	4602      	mov	r2, r0
 800714a:	2b65      	cmp	r3, #101	; 0x65
 800714c:	d001      	beq.n	8007152 <_strtod_l+0x172>
 800714e:	2b45      	cmp	r3, #69	; 0x45
 8007150:	d114      	bne.n	800717c <_strtod_l+0x19c>
 8007152:	b924      	cbnz	r4, 800715e <_strtod_l+0x17e>
 8007154:	b910      	cbnz	r0, 800715c <_strtod_l+0x17c>
 8007156:	9b06      	ldr	r3, [sp, #24]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d09e      	beq.n	800709a <_strtod_l+0xba>
 800715c:	2400      	movs	r4, #0
 800715e:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 8007160:	1c73      	adds	r3, r6, #1
 8007162:	931b      	str	r3, [sp, #108]	; 0x6c
 8007164:	7873      	ldrb	r3, [r6, #1]
 8007166:	2b2b      	cmp	r3, #43	; 0x2b
 8007168:	d078      	beq.n	800725c <_strtod_l+0x27c>
 800716a:	2b2d      	cmp	r3, #45	; 0x2d
 800716c:	d070      	beq.n	8007250 <_strtod_l+0x270>
 800716e:	f04f 0c00 	mov.w	ip, #0
 8007172:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 8007176:	2f09      	cmp	r7, #9
 8007178:	d97c      	bls.n	8007274 <_strtod_l+0x294>
 800717a:	961b      	str	r6, [sp, #108]	; 0x6c
 800717c:	f04f 0e00 	mov.w	lr, #0
 8007180:	e09a      	b.n	80072b8 <_strtod_l+0x2d8>
 8007182:	2300      	movs	r3, #0
 8007184:	e7c7      	b.n	8007116 <_strtod_l+0x136>
 8007186:	9905      	ldr	r1, [sp, #20]
 8007188:	2908      	cmp	r1, #8
 800718a:	bfdd      	ittte	le
 800718c:	9907      	ldrle	r1, [sp, #28]
 800718e:	fb02 3301 	mlale	r3, r2, r1, r3
 8007192:	9307      	strle	r3, [sp, #28]
 8007194:	fb02 3505 	mlagt	r5, r2, r5, r3
 8007198:	9b05      	ldr	r3, [sp, #20]
 800719a:	3001      	adds	r0, #1
 800719c:	3301      	adds	r3, #1
 800719e:	9305      	str	r3, [sp, #20]
 80071a0:	901b      	str	r0, [sp, #108]	; 0x6c
 80071a2:	e7bf      	b.n	8007124 <_strtod_l+0x144>
 80071a4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071a6:	191a      	adds	r2, r3, r4
 80071a8:	921b      	str	r2, [sp, #108]	; 0x6c
 80071aa:	9a05      	ldr	r2, [sp, #20]
 80071ac:	5d1b      	ldrb	r3, [r3, r4]
 80071ae:	2a00      	cmp	r2, #0
 80071b0:	d037      	beq.n	8007222 <_strtod_l+0x242>
 80071b2:	9c05      	ldr	r4, [sp, #20]
 80071b4:	4602      	mov	r2, r0
 80071b6:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 80071ba:	2909      	cmp	r1, #9
 80071bc:	d913      	bls.n	80071e6 <_strtod_l+0x206>
 80071be:	2101      	movs	r1, #1
 80071c0:	9104      	str	r1, [sp, #16]
 80071c2:	e7c2      	b.n	800714a <_strtod_l+0x16a>
 80071c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071c6:	1c5a      	adds	r2, r3, #1
 80071c8:	921b      	str	r2, [sp, #108]	; 0x6c
 80071ca:	785b      	ldrb	r3, [r3, #1]
 80071cc:	3001      	adds	r0, #1
 80071ce:	2b30      	cmp	r3, #48	; 0x30
 80071d0:	d0f8      	beq.n	80071c4 <_strtod_l+0x1e4>
 80071d2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80071d6:	2a08      	cmp	r2, #8
 80071d8:	f200 84e4 	bhi.w	8007ba4 <_strtod_l+0xbc4>
 80071dc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071de:	9208      	str	r2, [sp, #32]
 80071e0:	4602      	mov	r2, r0
 80071e2:	2000      	movs	r0, #0
 80071e4:	4604      	mov	r4, r0
 80071e6:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 80071ea:	f100 0101 	add.w	r1, r0, #1
 80071ee:	d012      	beq.n	8007216 <_strtod_l+0x236>
 80071f0:	440a      	add	r2, r1
 80071f2:	eb00 0c04 	add.w	ip, r0, r4
 80071f6:	4621      	mov	r1, r4
 80071f8:	270a      	movs	r7, #10
 80071fa:	458c      	cmp	ip, r1
 80071fc:	d113      	bne.n	8007226 <_strtod_l+0x246>
 80071fe:	1821      	adds	r1, r4, r0
 8007200:	2908      	cmp	r1, #8
 8007202:	f104 0401 	add.w	r4, r4, #1
 8007206:	4404      	add	r4, r0
 8007208:	dc19      	bgt.n	800723e <_strtod_l+0x25e>
 800720a:	9b07      	ldr	r3, [sp, #28]
 800720c:	210a      	movs	r1, #10
 800720e:	fb01 e303 	mla	r3, r1, r3, lr
 8007212:	9307      	str	r3, [sp, #28]
 8007214:	2100      	movs	r1, #0
 8007216:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007218:	1c58      	adds	r0, r3, #1
 800721a:	901b      	str	r0, [sp, #108]	; 0x6c
 800721c:	785b      	ldrb	r3, [r3, #1]
 800721e:	4608      	mov	r0, r1
 8007220:	e7c9      	b.n	80071b6 <_strtod_l+0x1d6>
 8007222:	9805      	ldr	r0, [sp, #20]
 8007224:	e7d3      	b.n	80071ce <_strtod_l+0x1ee>
 8007226:	2908      	cmp	r1, #8
 8007228:	f101 0101 	add.w	r1, r1, #1
 800722c:	dc03      	bgt.n	8007236 <_strtod_l+0x256>
 800722e:	9b07      	ldr	r3, [sp, #28]
 8007230:	437b      	muls	r3, r7
 8007232:	9307      	str	r3, [sp, #28]
 8007234:	e7e1      	b.n	80071fa <_strtod_l+0x21a>
 8007236:	2910      	cmp	r1, #16
 8007238:	bfd8      	it	le
 800723a:	437d      	mulle	r5, r7
 800723c:	e7dd      	b.n	80071fa <_strtod_l+0x21a>
 800723e:	2c10      	cmp	r4, #16
 8007240:	bfdc      	itt	le
 8007242:	210a      	movle	r1, #10
 8007244:	fb01 e505 	mlale	r5, r1, r5, lr
 8007248:	e7e4      	b.n	8007214 <_strtod_l+0x234>
 800724a:	2301      	movs	r3, #1
 800724c:	9304      	str	r3, [sp, #16]
 800724e:	e781      	b.n	8007154 <_strtod_l+0x174>
 8007250:	f04f 0c01 	mov.w	ip, #1
 8007254:	1cb3      	adds	r3, r6, #2
 8007256:	931b      	str	r3, [sp, #108]	; 0x6c
 8007258:	78b3      	ldrb	r3, [r6, #2]
 800725a:	e78a      	b.n	8007172 <_strtod_l+0x192>
 800725c:	f04f 0c00 	mov.w	ip, #0
 8007260:	e7f8      	b.n	8007254 <_strtod_l+0x274>
 8007262:	bf00      	nop
 8007264:	0800a630 	.word	0x0800a630
 8007268:	7ff00000 	.word	0x7ff00000
 800726c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800726e:	1c5f      	adds	r7, r3, #1
 8007270:	971b      	str	r7, [sp, #108]	; 0x6c
 8007272:	785b      	ldrb	r3, [r3, #1]
 8007274:	2b30      	cmp	r3, #48	; 0x30
 8007276:	d0f9      	beq.n	800726c <_strtod_l+0x28c>
 8007278:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800727c:	2f08      	cmp	r7, #8
 800727e:	f63f af7d 	bhi.w	800717c <_strtod_l+0x19c>
 8007282:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8007286:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007288:	930a      	str	r3, [sp, #40]	; 0x28
 800728a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800728c:	1c5f      	adds	r7, r3, #1
 800728e:	971b      	str	r7, [sp, #108]	; 0x6c
 8007290:	785b      	ldrb	r3, [r3, #1]
 8007292:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 8007296:	f1b8 0f09 	cmp.w	r8, #9
 800729a:	d937      	bls.n	800730c <_strtod_l+0x32c>
 800729c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800729e:	1a7f      	subs	r7, r7, r1
 80072a0:	2f08      	cmp	r7, #8
 80072a2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80072a6:	dc37      	bgt.n	8007318 <_strtod_l+0x338>
 80072a8:	45be      	cmp	lr, r7
 80072aa:	bfa8      	it	ge
 80072ac:	46be      	movge	lr, r7
 80072ae:	f1bc 0f00 	cmp.w	ip, #0
 80072b2:	d001      	beq.n	80072b8 <_strtod_l+0x2d8>
 80072b4:	f1ce 0e00 	rsb	lr, lr, #0
 80072b8:	2c00      	cmp	r4, #0
 80072ba:	d151      	bne.n	8007360 <_strtod_l+0x380>
 80072bc:	2800      	cmp	r0, #0
 80072be:	f47f aece 	bne.w	800705e <_strtod_l+0x7e>
 80072c2:	9a06      	ldr	r2, [sp, #24]
 80072c4:	2a00      	cmp	r2, #0
 80072c6:	f47f aeca 	bne.w	800705e <_strtod_l+0x7e>
 80072ca:	9a04      	ldr	r2, [sp, #16]
 80072cc:	2a00      	cmp	r2, #0
 80072ce:	f47f aee4 	bne.w	800709a <_strtod_l+0xba>
 80072d2:	2b4e      	cmp	r3, #78	; 0x4e
 80072d4:	d027      	beq.n	8007326 <_strtod_l+0x346>
 80072d6:	dc21      	bgt.n	800731c <_strtod_l+0x33c>
 80072d8:	2b49      	cmp	r3, #73	; 0x49
 80072da:	f47f aede 	bne.w	800709a <_strtod_l+0xba>
 80072de:	49a0      	ldr	r1, [pc, #640]	; (8007560 <_strtod_l+0x580>)
 80072e0:	a81b      	add	r0, sp, #108	; 0x6c
 80072e2:	f001 fdd7 	bl	8008e94 <__match>
 80072e6:	2800      	cmp	r0, #0
 80072e8:	f43f aed7 	beq.w	800709a <_strtod_l+0xba>
 80072ec:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072ee:	499d      	ldr	r1, [pc, #628]	; (8007564 <_strtod_l+0x584>)
 80072f0:	3b01      	subs	r3, #1
 80072f2:	a81b      	add	r0, sp, #108	; 0x6c
 80072f4:	931b      	str	r3, [sp, #108]	; 0x6c
 80072f6:	f001 fdcd 	bl	8008e94 <__match>
 80072fa:	b910      	cbnz	r0, 8007302 <_strtod_l+0x322>
 80072fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80072fe:	3301      	adds	r3, #1
 8007300:	931b      	str	r3, [sp, #108]	; 0x6c
 8007302:	f8df b274 	ldr.w	fp, [pc, #628]	; 8007578 <_strtod_l+0x598>
 8007306:	f04f 0a00 	mov.w	sl, #0
 800730a:	e6a8      	b.n	800705e <_strtod_l+0x7e>
 800730c:	210a      	movs	r1, #10
 800730e:	fb01 3e0e 	mla	lr, r1, lr, r3
 8007312:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8007316:	e7b8      	b.n	800728a <_strtod_l+0x2aa>
 8007318:	46be      	mov	lr, r7
 800731a:	e7c8      	b.n	80072ae <_strtod_l+0x2ce>
 800731c:	2b69      	cmp	r3, #105	; 0x69
 800731e:	d0de      	beq.n	80072de <_strtod_l+0x2fe>
 8007320:	2b6e      	cmp	r3, #110	; 0x6e
 8007322:	f47f aeba 	bne.w	800709a <_strtod_l+0xba>
 8007326:	4990      	ldr	r1, [pc, #576]	; (8007568 <_strtod_l+0x588>)
 8007328:	a81b      	add	r0, sp, #108	; 0x6c
 800732a:	f001 fdb3 	bl	8008e94 <__match>
 800732e:	2800      	cmp	r0, #0
 8007330:	f43f aeb3 	beq.w	800709a <_strtod_l+0xba>
 8007334:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b28      	cmp	r3, #40	; 0x28
 800733a:	d10e      	bne.n	800735a <_strtod_l+0x37a>
 800733c:	aa1e      	add	r2, sp, #120	; 0x78
 800733e:	498b      	ldr	r1, [pc, #556]	; (800756c <_strtod_l+0x58c>)
 8007340:	a81b      	add	r0, sp, #108	; 0x6c
 8007342:	f001 fdbb 	bl	8008ebc <__hexnan>
 8007346:	2805      	cmp	r0, #5
 8007348:	d107      	bne.n	800735a <_strtod_l+0x37a>
 800734a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800734c:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 8007350:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8007354:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8007358:	e681      	b.n	800705e <_strtod_l+0x7e>
 800735a:	f8df b224 	ldr.w	fp, [pc, #548]	; 8007580 <_strtod_l+0x5a0>
 800735e:	e7d2      	b.n	8007306 <_strtod_l+0x326>
 8007360:	ebae 0302 	sub.w	r3, lr, r2
 8007364:	9306      	str	r3, [sp, #24]
 8007366:	9b05      	ldr	r3, [sp, #20]
 8007368:	9807      	ldr	r0, [sp, #28]
 800736a:	2b00      	cmp	r3, #0
 800736c:	bf08      	it	eq
 800736e:	4623      	moveq	r3, r4
 8007370:	2c10      	cmp	r4, #16
 8007372:	9305      	str	r3, [sp, #20]
 8007374:	46a0      	mov	r8, r4
 8007376:	bfa8      	it	ge
 8007378:	f04f 0810 	movge.w	r8, #16
 800737c:	f7f9 f8d2 	bl	8000524 <__aeabi_ui2d>
 8007380:	2c09      	cmp	r4, #9
 8007382:	4682      	mov	sl, r0
 8007384:	468b      	mov	fp, r1
 8007386:	dc13      	bgt.n	80073b0 <_strtod_l+0x3d0>
 8007388:	9b06      	ldr	r3, [sp, #24]
 800738a:	2b00      	cmp	r3, #0
 800738c:	f43f ae67 	beq.w	800705e <_strtod_l+0x7e>
 8007390:	9b06      	ldr	r3, [sp, #24]
 8007392:	dd7a      	ble.n	800748a <_strtod_l+0x4aa>
 8007394:	2b16      	cmp	r3, #22
 8007396:	dc61      	bgt.n	800745c <_strtod_l+0x47c>
 8007398:	4a75      	ldr	r2, [pc, #468]	; (8007570 <_strtod_l+0x590>)
 800739a:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800739e:	e9de 0100 	ldrd	r0, r1, [lr]
 80073a2:	4652      	mov	r2, sl
 80073a4:	465b      	mov	r3, fp
 80073a6:	f7f9 f937 	bl	8000618 <__aeabi_dmul>
 80073aa:	4682      	mov	sl, r0
 80073ac:	468b      	mov	fp, r1
 80073ae:	e656      	b.n	800705e <_strtod_l+0x7e>
 80073b0:	4b6f      	ldr	r3, [pc, #444]	; (8007570 <_strtod_l+0x590>)
 80073b2:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80073b6:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80073ba:	f7f9 f92d 	bl	8000618 <__aeabi_dmul>
 80073be:	4606      	mov	r6, r0
 80073c0:	4628      	mov	r0, r5
 80073c2:	460f      	mov	r7, r1
 80073c4:	f7f9 f8ae 	bl	8000524 <__aeabi_ui2d>
 80073c8:	4602      	mov	r2, r0
 80073ca:	460b      	mov	r3, r1
 80073cc:	4630      	mov	r0, r6
 80073ce:	4639      	mov	r1, r7
 80073d0:	f7f8 ff6c 	bl	80002ac <__adddf3>
 80073d4:	2c0f      	cmp	r4, #15
 80073d6:	4682      	mov	sl, r0
 80073d8:	468b      	mov	fp, r1
 80073da:	ddd5      	ble.n	8007388 <_strtod_l+0x3a8>
 80073dc:	9b06      	ldr	r3, [sp, #24]
 80073de:	eba4 0808 	sub.w	r8, r4, r8
 80073e2:	4498      	add	r8, r3
 80073e4:	f1b8 0f00 	cmp.w	r8, #0
 80073e8:	f340 8096 	ble.w	8007518 <_strtod_l+0x538>
 80073ec:	f018 030f 	ands.w	r3, r8, #15
 80073f0:	d00a      	beq.n	8007408 <_strtod_l+0x428>
 80073f2:	495f      	ldr	r1, [pc, #380]	; (8007570 <_strtod_l+0x590>)
 80073f4:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80073f8:	4652      	mov	r2, sl
 80073fa:	465b      	mov	r3, fp
 80073fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007400:	f7f9 f90a 	bl	8000618 <__aeabi_dmul>
 8007404:	4682      	mov	sl, r0
 8007406:	468b      	mov	fp, r1
 8007408:	f038 080f 	bics.w	r8, r8, #15
 800740c:	d073      	beq.n	80074f6 <_strtod_l+0x516>
 800740e:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8007412:	dd47      	ble.n	80074a4 <_strtod_l+0x4c4>
 8007414:	2400      	movs	r4, #0
 8007416:	46a0      	mov	r8, r4
 8007418:	9407      	str	r4, [sp, #28]
 800741a:	9405      	str	r4, [sp, #20]
 800741c:	2322      	movs	r3, #34	; 0x22
 800741e:	f8df b158 	ldr.w	fp, [pc, #344]	; 8007578 <_strtod_l+0x598>
 8007422:	f8c9 3000 	str.w	r3, [r9]
 8007426:	f04f 0a00 	mov.w	sl, #0
 800742a:	9b07      	ldr	r3, [sp, #28]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f43f ae16 	beq.w	800705e <_strtod_l+0x7e>
 8007432:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007434:	4648      	mov	r0, r9
 8007436:	f001 fe4c 	bl	80090d2 <_Bfree>
 800743a:	9905      	ldr	r1, [sp, #20]
 800743c:	4648      	mov	r0, r9
 800743e:	f001 fe48 	bl	80090d2 <_Bfree>
 8007442:	4641      	mov	r1, r8
 8007444:	4648      	mov	r0, r9
 8007446:	f001 fe44 	bl	80090d2 <_Bfree>
 800744a:	9907      	ldr	r1, [sp, #28]
 800744c:	4648      	mov	r0, r9
 800744e:	f001 fe40 	bl	80090d2 <_Bfree>
 8007452:	4621      	mov	r1, r4
 8007454:	4648      	mov	r0, r9
 8007456:	f001 fe3c 	bl	80090d2 <_Bfree>
 800745a:	e600      	b.n	800705e <_strtod_l+0x7e>
 800745c:	9a06      	ldr	r2, [sp, #24]
 800745e:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 8007462:	4293      	cmp	r3, r2
 8007464:	dbba      	blt.n	80073dc <_strtod_l+0x3fc>
 8007466:	4d42      	ldr	r5, [pc, #264]	; (8007570 <_strtod_l+0x590>)
 8007468:	f1c4 040f 	rsb	r4, r4, #15
 800746c:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 8007470:	4652      	mov	r2, sl
 8007472:	465b      	mov	r3, fp
 8007474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007478:	f7f9 f8ce 	bl	8000618 <__aeabi_dmul>
 800747c:	9b06      	ldr	r3, [sp, #24]
 800747e:	1b1c      	subs	r4, r3, r4
 8007480:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8007484:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007488:	e78d      	b.n	80073a6 <_strtod_l+0x3c6>
 800748a:	f113 0f16 	cmn.w	r3, #22
 800748e:	dba5      	blt.n	80073dc <_strtod_l+0x3fc>
 8007490:	4a37      	ldr	r2, [pc, #220]	; (8007570 <_strtod_l+0x590>)
 8007492:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 8007496:	e9d2 2300 	ldrd	r2, r3, [r2]
 800749a:	4650      	mov	r0, sl
 800749c:	4659      	mov	r1, fp
 800749e:	f7f9 f9e5 	bl	800086c <__aeabi_ddiv>
 80074a2:	e782      	b.n	80073aa <_strtod_l+0x3ca>
 80074a4:	2300      	movs	r3, #0
 80074a6:	4e33      	ldr	r6, [pc, #204]	; (8007574 <_strtod_l+0x594>)
 80074a8:	ea4f 1828 	mov.w	r8, r8, asr #4
 80074ac:	4650      	mov	r0, sl
 80074ae:	4659      	mov	r1, fp
 80074b0:	461d      	mov	r5, r3
 80074b2:	f1b8 0f01 	cmp.w	r8, #1
 80074b6:	dc21      	bgt.n	80074fc <_strtod_l+0x51c>
 80074b8:	b10b      	cbz	r3, 80074be <_strtod_l+0x4de>
 80074ba:	4682      	mov	sl, r0
 80074bc:	468b      	mov	fp, r1
 80074be:	4b2d      	ldr	r3, [pc, #180]	; (8007574 <_strtod_l+0x594>)
 80074c0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80074c4:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 80074c8:	4652      	mov	r2, sl
 80074ca:	465b      	mov	r3, fp
 80074cc:	e9d5 0100 	ldrd	r0, r1, [r5]
 80074d0:	f7f9 f8a2 	bl	8000618 <__aeabi_dmul>
 80074d4:	4b28      	ldr	r3, [pc, #160]	; (8007578 <_strtod_l+0x598>)
 80074d6:	460a      	mov	r2, r1
 80074d8:	400b      	ands	r3, r1
 80074da:	4928      	ldr	r1, [pc, #160]	; (800757c <_strtod_l+0x59c>)
 80074dc:	428b      	cmp	r3, r1
 80074de:	4682      	mov	sl, r0
 80074e0:	d898      	bhi.n	8007414 <_strtod_l+0x434>
 80074e2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80074e6:	428b      	cmp	r3, r1
 80074e8:	bf86      	itte	hi
 80074ea:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8007584 <_strtod_l+0x5a4>
 80074ee:	f04f 3aff 	movhi.w	sl, #4294967295
 80074f2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80074f6:	2300      	movs	r3, #0
 80074f8:	9304      	str	r3, [sp, #16]
 80074fa:	e077      	b.n	80075ec <_strtod_l+0x60c>
 80074fc:	f018 0f01 	tst.w	r8, #1
 8007500:	d006      	beq.n	8007510 <_strtod_l+0x530>
 8007502:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 8007506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800750a:	f7f9 f885 	bl	8000618 <__aeabi_dmul>
 800750e:	2301      	movs	r3, #1
 8007510:	3501      	adds	r5, #1
 8007512:	ea4f 0868 	mov.w	r8, r8, asr #1
 8007516:	e7cc      	b.n	80074b2 <_strtod_l+0x4d2>
 8007518:	d0ed      	beq.n	80074f6 <_strtod_l+0x516>
 800751a:	f1c8 0800 	rsb	r8, r8, #0
 800751e:	f018 020f 	ands.w	r2, r8, #15
 8007522:	d00a      	beq.n	800753a <_strtod_l+0x55a>
 8007524:	4b12      	ldr	r3, [pc, #72]	; (8007570 <_strtod_l+0x590>)
 8007526:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800752a:	4650      	mov	r0, sl
 800752c:	4659      	mov	r1, fp
 800752e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007532:	f7f9 f99b 	bl	800086c <__aeabi_ddiv>
 8007536:	4682      	mov	sl, r0
 8007538:	468b      	mov	fp, r1
 800753a:	ea5f 1828 	movs.w	r8, r8, asr #4
 800753e:	d0da      	beq.n	80074f6 <_strtod_l+0x516>
 8007540:	f1b8 0f1f 	cmp.w	r8, #31
 8007544:	dd20      	ble.n	8007588 <_strtod_l+0x5a8>
 8007546:	2400      	movs	r4, #0
 8007548:	46a0      	mov	r8, r4
 800754a:	9407      	str	r4, [sp, #28]
 800754c:	9405      	str	r4, [sp, #20]
 800754e:	2322      	movs	r3, #34	; 0x22
 8007550:	f04f 0a00 	mov.w	sl, #0
 8007554:	f04f 0b00 	mov.w	fp, #0
 8007558:	f8c9 3000 	str.w	r3, [r9]
 800755c:	e765      	b.n	800742a <_strtod_l+0x44a>
 800755e:	bf00      	nop
 8007560:	0800a5fd 	.word	0x0800a5fd
 8007564:	0800a683 	.word	0x0800a683
 8007568:	0800a605 	.word	0x0800a605
 800756c:	0800a644 	.word	0x0800a644
 8007570:	0800a6c0 	.word	0x0800a6c0
 8007574:	0800a698 	.word	0x0800a698
 8007578:	7ff00000 	.word	0x7ff00000
 800757c:	7ca00000 	.word	0x7ca00000
 8007580:	fff80000 	.word	0xfff80000
 8007584:	7fefffff 	.word	0x7fefffff
 8007588:	f018 0310 	ands.w	r3, r8, #16
 800758c:	bf18      	it	ne
 800758e:	236a      	movne	r3, #106	; 0x6a
 8007590:	4da0      	ldr	r5, [pc, #640]	; (8007814 <_strtod_l+0x834>)
 8007592:	9304      	str	r3, [sp, #16]
 8007594:	4650      	mov	r0, sl
 8007596:	4659      	mov	r1, fp
 8007598:	2300      	movs	r3, #0
 800759a:	f1b8 0f00 	cmp.w	r8, #0
 800759e:	f300 810a 	bgt.w	80077b6 <_strtod_l+0x7d6>
 80075a2:	b10b      	cbz	r3, 80075a8 <_strtod_l+0x5c8>
 80075a4:	4682      	mov	sl, r0
 80075a6:	468b      	mov	fp, r1
 80075a8:	9b04      	ldr	r3, [sp, #16]
 80075aa:	b1bb      	cbz	r3, 80075dc <_strtod_l+0x5fc>
 80075ac:	f3cb 530a 	ubfx	r3, fp, #20, #11
 80075b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	4659      	mov	r1, fp
 80075b8:	dd10      	ble.n	80075dc <_strtod_l+0x5fc>
 80075ba:	2b1f      	cmp	r3, #31
 80075bc:	f340 8107 	ble.w	80077ce <_strtod_l+0x7ee>
 80075c0:	2b34      	cmp	r3, #52	; 0x34
 80075c2:	bfde      	ittt	le
 80075c4:	3b20      	suble	r3, #32
 80075c6:	f04f 32ff 	movle.w	r2, #4294967295
 80075ca:	fa02 f303 	lslle.w	r3, r2, r3
 80075ce:	f04f 0a00 	mov.w	sl, #0
 80075d2:	bfcc      	ite	gt
 80075d4:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80075d8:	ea03 0b01 	andle.w	fp, r3, r1
 80075dc:	2200      	movs	r2, #0
 80075de:	2300      	movs	r3, #0
 80075e0:	4650      	mov	r0, sl
 80075e2:	4659      	mov	r1, fp
 80075e4:	f7f9 fa80 	bl	8000ae8 <__aeabi_dcmpeq>
 80075e8:	2800      	cmp	r0, #0
 80075ea:	d1ac      	bne.n	8007546 <_strtod_l+0x566>
 80075ec:	9b07      	ldr	r3, [sp, #28]
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	9a05      	ldr	r2, [sp, #20]
 80075f2:	9908      	ldr	r1, [sp, #32]
 80075f4:	4623      	mov	r3, r4
 80075f6:	4648      	mov	r0, r9
 80075f8:	f001 fdbd 	bl	8009176 <__s2b>
 80075fc:	9007      	str	r0, [sp, #28]
 80075fe:	2800      	cmp	r0, #0
 8007600:	f43f af08 	beq.w	8007414 <_strtod_l+0x434>
 8007604:	9a06      	ldr	r2, [sp, #24]
 8007606:	9b06      	ldr	r3, [sp, #24]
 8007608:	2a00      	cmp	r2, #0
 800760a:	f1c3 0300 	rsb	r3, r3, #0
 800760e:	bfa8      	it	ge
 8007610:	2300      	movge	r3, #0
 8007612:	930e      	str	r3, [sp, #56]	; 0x38
 8007614:	2400      	movs	r4, #0
 8007616:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800761a:	9316      	str	r3, [sp, #88]	; 0x58
 800761c:	46a0      	mov	r8, r4
 800761e:	9b07      	ldr	r3, [sp, #28]
 8007620:	4648      	mov	r0, r9
 8007622:	6859      	ldr	r1, [r3, #4]
 8007624:	f001 fd21 	bl	800906a <_Balloc>
 8007628:	9005      	str	r0, [sp, #20]
 800762a:	2800      	cmp	r0, #0
 800762c:	f43f aef6 	beq.w	800741c <_strtod_l+0x43c>
 8007630:	9b07      	ldr	r3, [sp, #28]
 8007632:	691a      	ldr	r2, [r3, #16]
 8007634:	3202      	adds	r2, #2
 8007636:	f103 010c 	add.w	r1, r3, #12
 800763a:	0092      	lsls	r2, r2, #2
 800763c:	300c      	adds	r0, #12
 800763e:	f001 fd09 	bl	8009054 <memcpy>
 8007642:	aa1e      	add	r2, sp, #120	; 0x78
 8007644:	a91d      	add	r1, sp, #116	; 0x74
 8007646:	ec4b ab10 	vmov	d0, sl, fp
 800764a:	4648      	mov	r0, r9
 800764c:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8007650:	f002 f84c 	bl	80096ec <__d2b>
 8007654:	901c      	str	r0, [sp, #112]	; 0x70
 8007656:	2800      	cmp	r0, #0
 8007658:	f43f aee0 	beq.w	800741c <_strtod_l+0x43c>
 800765c:	2101      	movs	r1, #1
 800765e:	4648      	mov	r0, r9
 8007660:	f001 fe15 	bl	800928e <__i2b>
 8007664:	4680      	mov	r8, r0
 8007666:	2800      	cmp	r0, #0
 8007668:	f43f aed8 	beq.w	800741c <_strtod_l+0x43c>
 800766c:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800766e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8007670:	2e00      	cmp	r6, #0
 8007672:	bfab      	itete	ge
 8007674:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 8007676:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 8007678:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800767a:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800767c:	bfac      	ite	ge
 800767e:	18f7      	addge	r7, r6, r3
 8007680:	1b9d      	sublt	r5, r3, r6
 8007682:	9b04      	ldr	r3, [sp, #16]
 8007684:	1af6      	subs	r6, r6, r3
 8007686:	4416      	add	r6, r2
 8007688:	4b63      	ldr	r3, [pc, #396]	; (8007818 <_strtod_l+0x838>)
 800768a:	3e01      	subs	r6, #1
 800768c:	429e      	cmp	r6, r3
 800768e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007692:	f280 80af 	bge.w	80077f4 <_strtod_l+0x814>
 8007696:	1b9b      	subs	r3, r3, r6
 8007698:	2b1f      	cmp	r3, #31
 800769a:	eba2 0203 	sub.w	r2, r2, r3
 800769e:	f04f 0101 	mov.w	r1, #1
 80076a2:	f300 809b 	bgt.w	80077dc <_strtod_l+0x7fc>
 80076a6:	fa01 f303 	lsl.w	r3, r1, r3
 80076aa:	930f      	str	r3, [sp, #60]	; 0x3c
 80076ac:	2300      	movs	r3, #0
 80076ae:	930a      	str	r3, [sp, #40]	; 0x28
 80076b0:	18be      	adds	r6, r7, r2
 80076b2:	9b04      	ldr	r3, [sp, #16]
 80076b4:	42b7      	cmp	r7, r6
 80076b6:	4415      	add	r5, r2
 80076b8:	441d      	add	r5, r3
 80076ba:	463b      	mov	r3, r7
 80076bc:	bfa8      	it	ge
 80076be:	4633      	movge	r3, r6
 80076c0:	42ab      	cmp	r3, r5
 80076c2:	bfa8      	it	ge
 80076c4:	462b      	movge	r3, r5
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	bfc2      	ittt	gt
 80076ca:	1af6      	subgt	r6, r6, r3
 80076cc:	1aed      	subgt	r5, r5, r3
 80076ce:	1aff      	subgt	r7, r7, r3
 80076d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076d2:	b1bb      	cbz	r3, 8007704 <_strtod_l+0x724>
 80076d4:	4641      	mov	r1, r8
 80076d6:	461a      	mov	r2, r3
 80076d8:	4648      	mov	r0, r9
 80076da:	f001 fe77 	bl	80093cc <__pow5mult>
 80076de:	4680      	mov	r8, r0
 80076e0:	2800      	cmp	r0, #0
 80076e2:	f43f ae9b 	beq.w	800741c <_strtod_l+0x43c>
 80076e6:	4601      	mov	r1, r0
 80076e8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80076ea:	4648      	mov	r0, r9
 80076ec:	f001 fdd8 	bl	80092a0 <__multiply>
 80076f0:	900c      	str	r0, [sp, #48]	; 0x30
 80076f2:	2800      	cmp	r0, #0
 80076f4:	f43f ae92 	beq.w	800741c <_strtod_l+0x43c>
 80076f8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80076fa:	4648      	mov	r0, r9
 80076fc:	f001 fce9 	bl	80090d2 <_Bfree>
 8007700:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007702:	931c      	str	r3, [sp, #112]	; 0x70
 8007704:	2e00      	cmp	r6, #0
 8007706:	dc7a      	bgt.n	80077fe <_strtod_l+0x81e>
 8007708:	9b06      	ldr	r3, [sp, #24]
 800770a:	2b00      	cmp	r3, #0
 800770c:	dd08      	ble.n	8007720 <_strtod_l+0x740>
 800770e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007710:	9905      	ldr	r1, [sp, #20]
 8007712:	4648      	mov	r0, r9
 8007714:	f001 fe5a 	bl	80093cc <__pow5mult>
 8007718:	9005      	str	r0, [sp, #20]
 800771a:	2800      	cmp	r0, #0
 800771c:	f43f ae7e 	beq.w	800741c <_strtod_l+0x43c>
 8007720:	2d00      	cmp	r5, #0
 8007722:	dd08      	ble.n	8007736 <_strtod_l+0x756>
 8007724:	462a      	mov	r2, r5
 8007726:	9905      	ldr	r1, [sp, #20]
 8007728:	4648      	mov	r0, r9
 800772a:	f001 fe9d 	bl	8009468 <__lshift>
 800772e:	9005      	str	r0, [sp, #20]
 8007730:	2800      	cmp	r0, #0
 8007732:	f43f ae73 	beq.w	800741c <_strtod_l+0x43c>
 8007736:	2f00      	cmp	r7, #0
 8007738:	dd08      	ble.n	800774c <_strtod_l+0x76c>
 800773a:	4641      	mov	r1, r8
 800773c:	463a      	mov	r2, r7
 800773e:	4648      	mov	r0, r9
 8007740:	f001 fe92 	bl	8009468 <__lshift>
 8007744:	4680      	mov	r8, r0
 8007746:	2800      	cmp	r0, #0
 8007748:	f43f ae68 	beq.w	800741c <_strtod_l+0x43c>
 800774c:	9a05      	ldr	r2, [sp, #20]
 800774e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007750:	4648      	mov	r0, r9
 8007752:	f001 fef7 	bl	8009544 <__mdiff>
 8007756:	4604      	mov	r4, r0
 8007758:	2800      	cmp	r0, #0
 800775a:	f43f ae5f 	beq.w	800741c <_strtod_l+0x43c>
 800775e:	68c3      	ldr	r3, [r0, #12]
 8007760:	930c      	str	r3, [sp, #48]	; 0x30
 8007762:	2300      	movs	r3, #0
 8007764:	60c3      	str	r3, [r0, #12]
 8007766:	4641      	mov	r1, r8
 8007768:	f001 fed2 	bl	8009510 <__mcmp>
 800776c:	2800      	cmp	r0, #0
 800776e:	da55      	bge.n	800781c <_strtod_l+0x83c>
 8007770:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007772:	b9e3      	cbnz	r3, 80077ae <_strtod_l+0x7ce>
 8007774:	f1ba 0f00 	cmp.w	sl, #0
 8007778:	d119      	bne.n	80077ae <_strtod_l+0x7ce>
 800777a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800777e:	b9b3      	cbnz	r3, 80077ae <_strtod_l+0x7ce>
 8007780:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007784:	0d1b      	lsrs	r3, r3, #20
 8007786:	051b      	lsls	r3, r3, #20
 8007788:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800778c:	d90f      	bls.n	80077ae <_strtod_l+0x7ce>
 800778e:	6963      	ldr	r3, [r4, #20]
 8007790:	b913      	cbnz	r3, 8007798 <_strtod_l+0x7b8>
 8007792:	6923      	ldr	r3, [r4, #16]
 8007794:	2b01      	cmp	r3, #1
 8007796:	dd0a      	ble.n	80077ae <_strtod_l+0x7ce>
 8007798:	4621      	mov	r1, r4
 800779a:	2201      	movs	r2, #1
 800779c:	4648      	mov	r0, r9
 800779e:	f001 fe63 	bl	8009468 <__lshift>
 80077a2:	4641      	mov	r1, r8
 80077a4:	4604      	mov	r4, r0
 80077a6:	f001 feb3 	bl	8009510 <__mcmp>
 80077aa:	2800      	cmp	r0, #0
 80077ac:	dc67      	bgt.n	800787e <_strtod_l+0x89e>
 80077ae:	9b04      	ldr	r3, [sp, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d171      	bne.n	8007898 <_strtod_l+0x8b8>
 80077b4:	e63d      	b.n	8007432 <_strtod_l+0x452>
 80077b6:	f018 0f01 	tst.w	r8, #1
 80077ba:	d004      	beq.n	80077c6 <_strtod_l+0x7e6>
 80077bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80077c0:	f7f8 ff2a 	bl	8000618 <__aeabi_dmul>
 80077c4:	2301      	movs	r3, #1
 80077c6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80077ca:	3508      	adds	r5, #8
 80077cc:	e6e5      	b.n	800759a <_strtod_l+0x5ba>
 80077ce:	f04f 32ff 	mov.w	r2, #4294967295
 80077d2:	fa02 f303 	lsl.w	r3, r2, r3
 80077d6:	ea03 0a0a 	and.w	sl, r3, sl
 80077da:	e6ff      	b.n	80075dc <_strtod_l+0x5fc>
 80077dc:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80077e0:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80077e4:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80077e8:	36e2      	adds	r6, #226	; 0xe2
 80077ea:	fa01 f306 	lsl.w	r3, r1, r6
 80077ee:	930a      	str	r3, [sp, #40]	; 0x28
 80077f0:	910f      	str	r1, [sp, #60]	; 0x3c
 80077f2:	e75d      	b.n	80076b0 <_strtod_l+0x6d0>
 80077f4:	2300      	movs	r3, #0
 80077f6:	930a      	str	r3, [sp, #40]	; 0x28
 80077f8:	2301      	movs	r3, #1
 80077fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80077fc:	e758      	b.n	80076b0 <_strtod_l+0x6d0>
 80077fe:	4632      	mov	r2, r6
 8007800:	991c      	ldr	r1, [sp, #112]	; 0x70
 8007802:	4648      	mov	r0, r9
 8007804:	f001 fe30 	bl	8009468 <__lshift>
 8007808:	901c      	str	r0, [sp, #112]	; 0x70
 800780a:	2800      	cmp	r0, #0
 800780c:	f47f af7c 	bne.w	8007708 <_strtod_l+0x728>
 8007810:	e604      	b.n	800741c <_strtod_l+0x43c>
 8007812:	bf00      	nop
 8007814:	0800a658 	.word	0x0800a658
 8007818:	fffffc02 	.word	0xfffffc02
 800781c:	465d      	mov	r5, fp
 800781e:	f040 8086 	bne.w	800792e <_strtod_l+0x94e>
 8007822:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007824:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007828:	b32a      	cbz	r2, 8007876 <_strtod_l+0x896>
 800782a:	4aaf      	ldr	r2, [pc, #700]	; (8007ae8 <_strtod_l+0xb08>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d153      	bne.n	80078d8 <_strtod_l+0x8f8>
 8007830:	9b04      	ldr	r3, [sp, #16]
 8007832:	4650      	mov	r0, sl
 8007834:	b1d3      	cbz	r3, 800786c <_strtod_l+0x88c>
 8007836:	4aad      	ldr	r2, [pc, #692]	; (8007aec <_strtod_l+0xb0c>)
 8007838:	402a      	ands	r2, r5
 800783a:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800783e:	f04f 31ff 	mov.w	r1, #4294967295
 8007842:	d816      	bhi.n	8007872 <_strtod_l+0x892>
 8007844:	0d12      	lsrs	r2, r2, #20
 8007846:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800784a:	fa01 f303 	lsl.w	r3, r1, r3
 800784e:	4298      	cmp	r0, r3
 8007850:	d142      	bne.n	80078d8 <_strtod_l+0x8f8>
 8007852:	4ba7      	ldr	r3, [pc, #668]	; (8007af0 <_strtod_l+0xb10>)
 8007854:	429d      	cmp	r5, r3
 8007856:	d102      	bne.n	800785e <_strtod_l+0x87e>
 8007858:	3001      	adds	r0, #1
 800785a:	f43f addf 	beq.w	800741c <_strtod_l+0x43c>
 800785e:	4ba3      	ldr	r3, [pc, #652]	; (8007aec <_strtod_l+0xb0c>)
 8007860:	402b      	ands	r3, r5
 8007862:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007866:	f04f 0a00 	mov.w	sl, #0
 800786a:	e7a0      	b.n	80077ae <_strtod_l+0x7ce>
 800786c:	f04f 33ff 	mov.w	r3, #4294967295
 8007870:	e7ed      	b.n	800784e <_strtod_l+0x86e>
 8007872:	460b      	mov	r3, r1
 8007874:	e7eb      	b.n	800784e <_strtod_l+0x86e>
 8007876:	bb7b      	cbnz	r3, 80078d8 <_strtod_l+0x8f8>
 8007878:	f1ba 0f00 	cmp.w	sl, #0
 800787c:	d12c      	bne.n	80078d8 <_strtod_l+0x8f8>
 800787e:	9904      	ldr	r1, [sp, #16]
 8007880:	4a9a      	ldr	r2, [pc, #616]	; (8007aec <_strtod_l+0xb0c>)
 8007882:	465b      	mov	r3, fp
 8007884:	b1f1      	cbz	r1, 80078c4 <_strtod_l+0x8e4>
 8007886:	ea02 010b 	and.w	r1, r2, fp
 800788a:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800788e:	dc19      	bgt.n	80078c4 <_strtod_l+0x8e4>
 8007890:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007894:	f77f ae5b 	ble.w	800754e <_strtod_l+0x56e>
 8007898:	4a96      	ldr	r2, [pc, #600]	; (8007af4 <_strtod_l+0xb14>)
 800789a:	2300      	movs	r3, #0
 800789c:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 80078a0:	4650      	mov	r0, sl
 80078a2:	4659      	mov	r1, fp
 80078a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078a8:	f7f8 feb6 	bl	8000618 <__aeabi_dmul>
 80078ac:	4682      	mov	sl, r0
 80078ae:	468b      	mov	fp, r1
 80078b0:	2900      	cmp	r1, #0
 80078b2:	f47f adbe 	bne.w	8007432 <_strtod_l+0x452>
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f47f adbb 	bne.w	8007432 <_strtod_l+0x452>
 80078bc:	2322      	movs	r3, #34	; 0x22
 80078be:	f8c9 3000 	str.w	r3, [r9]
 80078c2:	e5b6      	b.n	8007432 <_strtod_l+0x452>
 80078c4:	4013      	ands	r3, r2
 80078c6:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80078ca:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80078ce:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80078d2:	f04f 3aff 	mov.w	sl, #4294967295
 80078d6:	e76a      	b.n	80077ae <_strtod_l+0x7ce>
 80078d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078da:	b193      	cbz	r3, 8007902 <_strtod_l+0x922>
 80078dc:	422b      	tst	r3, r5
 80078de:	f43f af66 	beq.w	80077ae <_strtod_l+0x7ce>
 80078e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80078e4:	9a04      	ldr	r2, [sp, #16]
 80078e6:	4650      	mov	r0, sl
 80078e8:	4659      	mov	r1, fp
 80078ea:	b173      	cbz	r3, 800790a <_strtod_l+0x92a>
 80078ec:	f7ff fb5c 	bl	8006fa8 <sulp>
 80078f0:	4602      	mov	r2, r0
 80078f2:	460b      	mov	r3, r1
 80078f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80078f8:	f7f8 fcd8 	bl	80002ac <__adddf3>
 80078fc:	4682      	mov	sl, r0
 80078fe:	468b      	mov	fp, r1
 8007900:	e755      	b.n	80077ae <_strtod_l+0x7ce>
 8007902:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007904:	ea13 0f0a 	tst.w	r3, sl
 8007908:	e7e9      	b.n	80078de <_strtod_l+0x8fe>
 800790a:	f7ff fb4d 	bl	8006fa8 <sulp>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007916:	f7f8 fcc7 	bl	80002a8 <__aeabi_dsub>
 800791a:	2200      	movs	r2, #0
 800791c:	2300      	movs	r3, #0
 800791e:	4682      	mov	sl, r0
 8007920:	468b      	mov	fp, r1
 8007922:	f7f9 f8e1 	bl	8000ae8 <__aeabi_dcmpeq>
 8007926:	2800      	cmp	r0, #0
 8007928:	f47f ae11 	bne.w	800754e <_strtod_l+0x56e>
 800792c:	e73f      	b.n	80077ae <_strtod_l+0x7ce>
 800792e:	4641      	mov	r1, r8
 8007930:	4620      	mov	r0, r4
 8007932:	f001 ff2a 	bl	800978a <__ratio>
 8007936:	ec57 6b10 	vmov	r6, r7, d0
 800793a:	2200      	movs	r2, #0
 800793c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007940:	ee10 0a10 	vmov	r0, s0
 8007944:	4639      	mov	r1, r7
 8007946:	f7f9 f8e3 	bl	8000b10 <__aeabi_dcmple>
 800794a:	2800      	cmp	r0, #0
 800794c:	d077      	beq.n	8007a3e <_strtod_l+0xa5e>
 800794e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007950:	2b00      	cmp	r3, #0
 8007952:	d04a      	beq.n	80079ea <_strtod_l+0xa0a>
 8007954:	4b68      	ldr	r3, [pc, #416]	; (8007af8 <_strtod_l+0xb18>)
 8007956:	2200      	movs	r2, #0
 8007958:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800795c:	4f66      	ldr	r7, [pc, #408]	; (8007af8 <_strtod_l+0xb18>)
 800795e:	2600      	movs	r6, #0
 8007960:	4b62      	ldr	r3, [pc, #392]	; (8007aec <_strtod_l+0xb0c>)
 8007962:	402b      	ands	r3, r5
 8007964:	930f      	str	r3, [sp, #60]	; 0x3c
 8007966:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007968:	4b64      	ldr	r3, [pc, #400]	; (8007afc <_strtod_l+0xb1c>)
 800796a:	429a      	cmp	r2, r3
 800796c:	f040 80ce 	bne.w	8007b0c <_strtod_l+0xb2c>
 8007970:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007974:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007978:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800797c:	ec4b ab10 	vmov	d0, sl, fp
 8007980:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8007984:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8007988:	f001 fe3a 	bl	8009600 <__ulp>
 800798c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8007990:	ec53 2b10 	vmov	r2, r3, d0
 8007994:	f7f8 fe40 	bl	8000618 <__aeabi_dmul>
 8007998:	4652      	mov	r2, sl
 800799a:	465b      	mov	r3, fp
 800799c:	f7f8 fc86 	bl	80002ac <__adddf3>
 80079a0:	460b      	mov	r3, r1
 80079a2:	4952      	ldr	r1, [pc, #328]	; (8007aec <_strtod_l+0xb0c>)
 80079a4:	4a56      	ldr	r2, [pc, #344]	; (8007b00 <_strtod_l+0xb20>)
 80079a6:	4019      	ands	r1, r3
 80079a8:	4291      	cmp	r1, r2
 80079aa:	4682      	mov	sl, r0
 80079ac:	d95b      	bls.n	8007a66 <_strtod_l+0xa86>
 80079ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079b0:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d103      	bne.n	80079c0 <_strtod_l+0x9e0>
 80079b8:	9b08      	ldr	r3, [sp, #32]
 80079ba:	3301      	adds	r3, #1
 80079bc:	f43f ad2e 	beq.w	800741c <_strtod_l+0x43c>
 80079c0:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8007af0 <_strtod_l+0xb10>
 80079c4:	f04f 3aff 	mov.w	sl, #4294967295
 80079c8:	991c      	ldr	r1, [sp, #112]	; 0x70
 80079ca:	4648      	mov	r0, r9
 80079cc:	f001 fb81 	bl	80090d2 <_Bfree>
 80079d0:	9905      	ldr	r1, [sp, #20]
 80079d2:	4648      	mov	r0, r9
 80079d4:	f001 fb7d 	bl	80090d2 <_Bfree>
 80079d8:	4641      	mov	r1, r8
 80079da:	4648      	mov	r0, r9
 80079dc:	f001 fb79 	bl	80090d2 <_Bfree>
 80079e0:	4621      	mov	r1, r4
 80079e2:	4648      	mov	r0, r9
 80079e4:	f001 fb75 	bl	80090d2 <_Bfree>
 80079e8:	e619      	b.n	800761e <_strtod_l+0x63e>
 80079ea:	f1ba 0f00 	cmp.w	sl, #0
 80079ee:	d11a      	bne.n	8007a26 <_strtod_l+0xa46>
 80079f0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80079f4:	b9eb      	cbnz	r3, 8007a32 <_strtod_l+0xa52>
 80079f6:	2200      	movs	r2, #0
 80079f8:	4b3f      	ldr	r3, [pc, #252]	; (8007af8 <_strtod_l+0xb18>)
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f9 f87d 	bl	8000afc <__aeabi_dcmplt>
 8007a02:	b9c8      	cbnz	r0, 8007a38 <_strtod_l+0xa58>
 8007a04:	4630      	mov	r0, r6
 8007a06:	4639      	mov	r1, r7
 8007a08:	2200      	movs	r2, #0
 8007a0a:	4b3e      	ldr	r3, [pc, #248]	; (8007b04 <_strtod_l+0xb24>)
 8007a0c:	f7f8 fe04 	bl	8000618 <__aeabi_dmul>
 8007a10:	4606      	mov	r6, r0
 8007a12:	460f      	mov	r7, r1
 8007a14:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007a18:	9618      	str	r6, [sp, #96]	; 0x60
 8007a1a:	9319      	str	r3, [sp, #100]	; 0x64
 8007a1c:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8007a20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007a24:	e79c      	b.n	8007960 <_strtod_l+0x980>
 8007a26:	f1ba 0f01 	cmp.w	sl, #1
 8007a2a:	d102      	bne.n	8007a32 <_strtod_l+0xa52>
 8007a2c:	2d00      	cmp	r5, #0
 8007a2e:	f43f ad8e 	beq.w	800754e <_strtod_l+0x56e>
 8007a32:	2200      	movs	r2, #0
 8007a34:	4b34      	ldr	r3, [pc, #208]	; (8007b08 <_strtod_l+0xb28>)
 8007a36:	e78f      	b.n	8007958 <_strtod_l+0x978>
 8007a38:	2600      	movs	r6, #0
 8007a3a:	4f32      	ldr	r7, [pc, #200]	; (8007b04 <_strtod_l+0xb24>)
 8007a3c:	e7ea      	b.n	8007a14 <_strtod_l+0xa34>
 8007a3e:	4b31      	ldr	r3, [pc, #196]	; (8007b04 <_strtod_l+0xb24>)
 8007a40:	4630      	mov	r0, r6
 8007a42:	4639      	mov	r1, r7
 8007a44:	2200      	movs	r2, #0
 8007a46:	f7f8 fde7 	bl	8000618 <__aeabi_dmul>
 8007a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a4c:	4606      	mov	r6, r0
 8007a4e:	460f      	mov	r7, r1
 8007a50:	b933      	cbnz	r3, 8007a60 <_strtod_l+0xa80>
 8007a52:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007a56:	9010      	str	r0, [sp, #64]	; 0x40
 8007a58:	9311      	str	r3, [sp, #68]	; 0x44
 8007a5a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007a5e:	e7df      	b.n	8007a20 <_strtod_l+0xa40>
 8007a60:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007a64:	e7f9      	b.n	8007a5a <_strtod_l+0xa7a>
 8007a66:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8007a6a:	9b04      	ldr	r3, [sp, #16]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d1ab      	bne.n	80079c8 <_strtod_l+0x9e8>
 8007a70:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007a74:	0d1b      	lsrs	r3, r3, #20
 8007a76:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a78:	051b      	lsls	r3, r3, #20
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	465d      	mov	r5, fp
 8007a7e:	d1a3      	bne.n	80079c8 <_strtod_l+0x9e8>
 8007a80:	4639      	mov	r1, r7
 8007a82:	4630      	mov	r0, r6
 8007a84:	f7f9 f878 	bl	8000b78 <__aeabi_d2iz>
 8007a88:	f7f8 fd5c 	bl	8000544 <__aeabi_i2d>
 8007a8c:	460b      	mov	r3, r1
 8007a8e:	4602      	mov	r2, r0
 8007a90:	4639      	mov	r1, r7
 8007a92:	4630      	mov	r0, r6
 8007a94:	f7f8 fc08 	bl	80002a8 <__aeabi_dsub>
 8007a98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	460f      	mov	r7, r1
 8007a9e:	b933      	cbnz	r3, 8007aae <_strtod_l+0xace>
 8007aa0:	f1ba 0f00 	cmp.w	sl, #0
 8007aa4:	d103      	bne.n	8007aae <_strtod_l+0xace>
 8007aa6:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8007aaa:	2d00      	cmp	r5, #0
 8007aac:	d06d      	beq.n	8007b8a <_strtod_l+0xbaa>
 8007aae:	a30a      	add	r3, pc, #40	; (adr r3, 8007ad8 <_strtod_l+0xaf8>)
 8007ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ab4:	4630      	mov	r0, r6
 8007ab6:	4639      	mov	r1, r7
 8007ab8:	f7f9 f820 	bl	8000afc <__aeabi_dcmplt>
 8007abc:	2800      	cmp	r0, #0
 8007abe:	f47f acb8 	bne.w	8007432 <_strtod_l+0x452>
 8007ac2:	a307      	add	r3, pc, #28	; (adr r3, 8007ae0 <_strtod_l+0xb00>)
 8007ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ac8:	4630      	mov	r0, r6
 8007aca:	4639      	mov	r1, r7
 8007acc:	f7f9 f834 	bl	8000b38 <__aeabi_dcmpgt>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	f43f af79 	beq.w	80079c8 <_strtod_l+0x9e8>
 8007ad6:	e4ac      	b.n	8007432 <_strtod_l+0x452>
 8007ad8:	94a03595 	.word	0x94a03595
 8007adc:	3fdfffff 	.word	0x3fdfffff
 8007ae0:	35afe535 	.word	0x35afe535
 8007ae4:	3fe00000 	.word	0x3fe00000
 8007ae8:	000fffff 	.word	0x000fffff
 8007aec:	7ff00000 	.word	0x7ff00000
 8007af0:	7fefffff 	.word	0x7fefffff
 8007af4:	39500000 	.word	0x39500000
 8007af8:	3ff00000 	.word	0x3ff00000
 8007afc:	7fe00000 	.word	0x7fe00000
 8007b00:	7c9fffff 	.word	0x7c9fffff
 8007b04:	3fe00000 	.word	0x3fe00000
 8007b08:	bff00000 	.word	0xbff00000
 8007b0c:	9b04      	ldr	r3, [sp, #16]
 8007b0e:	b333      	cbz	r3, 8007b5e <_strtod_l+0xb7e>
 8007b10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b12:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007b16:	d822      	bhi.n	8007b5e <_strtod_l+0xb7e>
 8007b18:	a327      	add	r3, pc, #156	; (adr r3, 8007bb8 <_strtod_l+0xbd8>)
 8007b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1e:	4630      	mov	r0, r6
 8007b20:	4639      	mov	r1, r7
 8007b22:	f7f8 fff5 	bl	8000b10 <__aeabi_dcmple>
 8007b26:	b1a0      	cbz	r0, 8007b52 <_strtod_l+0xb72>
 8007b28:	4639      	mov	r1, r7
 8007b2a:	4630      	mov	r0, r6
 8007b2c:	f7f9 f84c 	bl	8000bc8 <__aeabi_d2uiz>
 8007b30:	2800      	cmp	r0, #0
 8007b32:	bf08      	it	eq
 8007b34:	2001      	moveq	r0, #1
 8007b36:	f7f8 fcf5 	bl	8000524 <__aeabi_ui2d>
 8007b3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b3c:	4606      	mov	r6, r0
 8007b3e:	460f      	mov	r7, r1
 8007b40:	bb03      	cbnz	r3, 8007b84 <_strtod_l+0xba4>
 8007b42:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007b46:	9012      	str	r0, [sp, #72]	; 0x48
 8007b48:	9313      	str	r3, [sp, #76]	; 0x4c
 8007b4a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8007b4e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 8007b52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007b54:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007b56:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007b5a:	1a9b      	subs	r3, r3, r2
 8007b5c:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b5e:	ed9d 0b08 	vldr	d0, [sp, #32]
 8007b62:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 8007b66:	f001 fd4b 	bl	8009600 <__ulp>
 8007b6a:	4650      	mov	r0, sl
 8007b6c:	ec53 2b10 	vmov	r2, r3, d0
 8007b70:	4659      	mov	r1, fp
 8007b72:	f7f8 fd51 	bl	8000618 <__aeabi_dmul>
 8007b76:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007b7a:	f7f8 fb97 	bl	80002ac <__adddf3>
 8007b7e:	4682      	mov	sl, r0
 8007b80:	468b      	mov	fp, r1
 8007b82:	e772      	b.n	8007a6a <_strtod_l+0xa8a>
 8007b84:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8007b88:	e7df      	b.n	8007b4a <_strtod_l+0xb6a>
 8007b8a:	a30d      	add	r3, pc, #52	; (adr r3, 8007bc0 <_strtod_l+0xbe0>)
 8007b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b90:	f7f8 ffb4 	bl	8000afc <__aeabi_dcmplt>
 8007b94:	e79c      	b.n	8007ad0 <_strtod_l+0xaf0>
 8007b96:	2300      	movs	r3, #0
 8007b98:	930d      	str	r3, [sp, #52]	; 0x34
 8007b9a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007b9c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007b9e:	6013      	str	r3, [r2, #0]
 8007ba0:	f7ff ba61 	b.w	8007066 <_strtod_l+0x86>
 8007ba4:	2b65      	cmp	r3, #101	; 0x65
 8007ba6:	f04f 0200 	mov.w	r2, #0
 8007baa:	f43f ab4e 	beq.w	800724a <_strtod_l+0x26a>
 8007bae:	2101      	movs	r1, #1
 8007bb0:	4614      	mov	r4, r2
 8007bb2:	9104      	str	r1, [sp, #16]
 8007bb4:	f7ff bacb 	b.w	800714e <_strtod_l+0x16e>
 8007bb8:	ffc00000 	.word	0xffc00000
 8007bbc:	41dfffff 	.word	0x41dfffff
 8007bc0:	94a03595 	.word	0x94a03595
 8007bc4:	3fcfffff 	.word	0x3fcfffff

08007bc8 <_strtod_r>:
 8007bc8:	4b05      	ldr	r3, [pc, #20]	; (8007be0 <_strtod_r+0x18>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	b410      	push	{r4}
 8007bce:	6a1b      	ldr	r3, [r3, #32]
 8007bd0:	4c04      	ldr	r4, [pc, #16]	; (8007be4 <_strtod_r+0x1c>)
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	bf08      	it	eq
 8007bd6:	4623      	moveq	r3, r4
 8007bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bdc:	f7ff ba00 	b.w	8006fe0 <_strtod_l>
 8007be0:	20000014 	.word	0x20000014
 8007be4:	20000078 	.word	0x20000078

08007be8 <_strtol_l.isra.0>:
 8007be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	4680      	mov	r8, r0
 8007bee:	4689      	mov	r9, r1
 8007bf0:	4692      	mov	sl, r2
 8007bf2:	461e      	mov	r6, r3
 8007bf4:	460f      	mov	r7, r1
 8007bf6:	463d      	mov	r5, r7
 8007bf8:	9808      	ldr	r0, [sp, #32]
 8007bfa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007bfe:	f001 f9ed 	bl	8008fdc <__locale_ctype_ptr_l>
 8007c02:	4420      	add	r0, r4
 8007c04:	7843      	ldrb	r3, [r0, #1]
 8007c06:	f013 0308 	ands.w	r3, r3, #8
 8007c0a:	d132      	bne.n	8007c72 <_strtol_l.isra.0+0x8a>
 8007c0c:	2c2d      	cmp	r4, #45	; 0x2d
 8007c0e:	d132      	bne.n	8007c76 <_strtol_l.isra.0+0x8e>
 8007c10:	787c      	ldrb	r4, [r7, #1]
 8007c12:	1cbd      	adds	r5, r7, #2
 8007c14:	2201      	movs	r2, #1
 8007c16:	2e00      	cmp	r6, #0
 8007c18:	d05d      	beq.n	8007cd6 <_strtol_l.isra.0+0xee>
 8007c1a:	2e10      	cmp	r6, #16
 8007c1c:	d109      	bne.n	8007c32 <_strtol_l.isra.0+0x4a>
 8007c1e:	2c30      	cmp	r4, #48	; 0x30
 8007c20:	d107      	bne.n	8007c32 <_strtol_l.isra.0+0x4a>
 8007c22:	782b      	ldrb	r3, [r5, #0]
 8007c24:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007c28:	2b58      	cmp	r3, #88	; 0x58
 8007c2a:	d14f      	bne.n	8007ccc <_strtol_l.isra.0+0xe4>
 8007c2c:	786c      	ldrb	r4, [r5, #1]
 8007c2e:	2610      	movs	r6, #16
 8007c30:	3502      	adds	r5, #2
 8007c32:	2a00      	cmp	r2, #0
 8007c34:	bf14      	ite	ne
 8007c36:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 8007c3a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 8007c3e:	2700      	movs	r7, #0
 8007c40:	fbb1 fcf6 	udiv	ip, r1, r6
 8007c44:	4638      	mov	r0, r7
 8007c46:	fb06 1e1c 	mls	lr, r6, ip, r1
 8007c4a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 8007c4e:	2b09      	cmp	r3, #9
 8007c50:	d817      	bhi.n	8007c82 <_strtol_l.isra.0+0x9a>
 8007c52:	461c      	mov	r4, r3
 8007c54:	42a6      	cmp	r6, r4
 8007c56:	dd23      	ble.n	8007ca0 <_strtol_l.isra.0+0xb8>
 8007c58:	1c7b      	adds	r3, r7, #1
 8007c5a:	d007      	beq.n	8007c6c <_strtol_l.isra.0+0x84>
 8007c5c:	4584      	cmp	ip, r0
 8007c5e:	d31c      	bcc.n	8007c9a <_strtol_l.isra.0+0xb2>
 8007c60:	d101      	bne.n	8007c66 <_strtol_l.isra.0+0x7e>
 8007c62:	45a6      	cmp	lr, r4
 8007c64:	db19      	blt.n	8007c9a <_strtol_l.isra.0+0xb2>
 8007c66:	fb00 4006 	mla	r0, r0, r6, r4
 8007c6a:	2701      	movs	r7, #1
 8007c6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007c70:	e7eb      	b.n	8007c4a <_strtol_l.isra.0+0x62>
 8007c72:	462f      	mov	r7, r5
 8007c74:	e7bf      	b.n	8007bf6 <_strtol_l.isra.0+0xe>
 8007c76:	2c2b      	cmp	r4, #43	; 0x2b
 8007c78:	bf04      	itt	eq
 8007c7a:	1cbd      	addeq	r5, r7, #2
 8007c7c:	787c      	ldrbeq	r4, [r7, #1]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	e7c9      	b.n	8007c16 <_strtol_l.isra.0+0x2e>
 8007c82:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 8007c86:	2b19      	cmp	r3, #25
 8007c88:	d801      	bhi.n	8007c8e <_strtol_l.isra.0+0xa6>
 8007c8a:	3c37      	subs	r4, #55	; 0x37
 8007c8c:	e7e2      	b.n	8007c54 <_strtol_l.isra.0+0x6c>
 8007c8e:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 8007c92:	2b19      	cmp	r3, #25
 8007c94:	d804      	bhi.n	8007ca0 <_strtol_l.isra.0+0xb8>
 8007c96:	3c57      	subs	r4, #87	; 0x57
 8007c98:	e7dc      	b.n	8007c54 <_strtol_l.isra.0+0x6c>
 8007c9a:	f04f 37ff 	mov.w	r7, #4294967295
 8007c9e:	e7e5      	b.n	8007c6c <_strtol_l.isra.0+0x84>
 8007ca0:	1c7b      	adds	r3, r7, #1
 8007ca2:	d108      	bne.n	8007cb6 <_strtol_l.isra.0+0xce>
 8007ca4:	2322      	movs	r3, #34	; 0x22
 8007ca6:	f8c8 3000 	str.w	r3, [r8]
 8007caa:	4608      	mov	r0, r1
 8007cac:	f1ba 0f00 	cmp.w	sl, #0
 8007cb0:	d107      	bne.n	8007cc2 <_strtol_l.isra.0+0xda>
 8007cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cb6:	b102      	cbz	r2, 8007cba <_strtol_l.isra.0+0xd2>
 8007cb8:	4240      	negs	r0, r0
 8007cba:	f1ba 0f00 	cmp.w	sl, #0
 8007cbe:	d0f8      	beq.n	8007cb2 <_strtol_l.isra.0+0xca>
 8007cc0:	b10f      	cbz	r7, 8007cc6 <_strtol_l.isra.0+0xde>
 8007cc2:	f105 39ff 	add.w	r9, r5, #4294967295
 8007cc6:	f8ca 9000 	str.w	r9, [sl]
 8007cca:	e7f2      	b.n	8007cb2 <_strtol_l.isra.0+0xca>
 8007ccc:	2430      	movs	r4, #48	; 0x30
 8007cce:	2e00      	cmp	r6, #0
 8007cd0:	d1af      	bne.n	8007c32 <_strtol_l.isra.0+0x4a>
 8007cd2:	2608      	movs	r6, #8
 8007cd4:	e7ad      	b.n	8007c32 <_strtol_l.isra.0+0x4a>
 8007cd6:	2c30      	cmp	r4, #48	; 0x30
 8007cd8:	d0a3      	beq.n	8007c22 <_strtol_l.isra.0+0x3a>
 8007cda:	260a      	movs	r6, #10
 8007cdc:	e7a9      	b.n	8007c32 <_strtol_l.isra.0+0x4a>
	...

08007ce0 <_strtol_r>:
 8007ce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007ce2:	4c06      	ldr	r4, [pc, #24]	; (8007cfc <_strtol_r+0x1c>)
 8007ce4:	4d06      	ldr	r5, [pc, #24]	; (8007d00 <_strtol_r+0x20>)
 8007ce6:	6824      	ldr	r4, [r4, #0]
 8007ce8:	6a24      	ldr	r4, [r4, #32]
 8007cea:	2c00      	cmp	r4, #0
 8007cec:	bf08      	it	eq
 8007cee:	462c      	moveq	r4, r5
 8007cf0:	9400      	str	r4, [sp, #0]
 8007cf2:	f7ff ff79 	bl	8007be8 <_strtol_l.isra.0>
 8007cf6:	b003      	add	sp, #12
 8007cf8:	bd30      	pop	{r4, r5, pc}
 8007cfa:	bf00      	nop
 8007cfc:	20000014 	.word	0x20000014
 8007d00:	20000078 	.word	0x20000078

08007d04 <quorem>:
 8007d04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d08:	6903      	ldr	r3, [r0, #16]
 8007d0a:	690c      	ldr	r4, [r1, #16]
 8007d0c:	42a3      	cmp	r3, r4
 8007d0e:	4680      	mov	r8, r0
 8007d10:	f2c0 8082 	blt.w	8007e18 <quorem+0x114>
 8007d14:	3c01      	subs	r4, #1
 8007d16:	f101 0714 	add.w	r7, r1, #20
 8007d1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007d1e:	f100 0614 	add.w	r6, r0, #20
 8007d22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007d26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007d2a:	eb06 030c 	add.w	r3, r6, ip
 8007d2e:	3501      	adds	r5, #1
 8007d30:	eb07 090c 	add.w	r9, r7, ip
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	fbb0 f5f5 	udiv	r5, r0, r5
 8007d3a:	b395      	cbz	r5, 8007da2 <quorem+0x9e>
 8007d3c:	f04f 0a00 	mov.w	sl, #0
 8007d40:	4638      	mov	r0, r7
 8007d42:	46b6      	mov	lr, r6
 8007d44:	46d3      	mov	fp, sl
 8007d46:	f850 2b04 	ldr.w	r2, [r0], #4
 8007d4a:	b293      	uxth	r3, r2
 8007d4c:	fb05 a303 	mla	r3, r5, r3, sl
 8007d50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007d54:	b29b      	uxth	r3, r3
 8007d56:	ebab 0303 	sub.w	r3, fp, r3
 8007d5a:	0c12      	lsrs	r2, r2, #16
 8007d5c:	f8de b000 	ldr.w	fp, [lr]
 8007d60:	fb05 a202 	mla	r2, r5, r2, sl
 8007d64:	fa13 f38b 	uxtah	r3, r3, fp
 8007d68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8007d6c:	fa1f fb82 	uxth.w	fp, r2
 8007d70:	f8de 2000 	ldr.w	r2, [lr]
 8007d74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8007d78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007d7c:	b29b      	uxth	r3, r3
 8007d7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007d82:	4581      	cmp	r9, r0
 8007d84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8007d88:	f84e 3b04 	str.w	r3, [lr], #4
 8007d8c:	d2db      	bcs.n	8007d46 <quorem+0x42>
 8007d8e:	f856 300c 	ldr.w	r3, [r6, ip]
 8007d92:	b933      	cbnz	r3, 8007da2 <quorem+0x9e>
 8007d94:	9b01      	ldr	r3, [sp, #4]
 8007d96:	3b04      	subs	r3, #4
 8007d98:	429e      	cmp	r6, r3
 8007d9a:	461a      	mov	r2, r3
 8007d9c:	d330      	bcc.n	8007e00 <quorem+0xfc>
 8007d9e:	f8c8 4010 	str.w	r4, [r8, #16]
 8007da2:	4640      	mov	r0, r8
 8007da4:	f001 fbb4 	bl	8009510 <__mcmp>
 8007da8:	2800      	cmp	r0, #0
 8007daa:	db25      	blt.n	8007df8 <quorem+0xf4>
 8007dac:	3501      	adds	r5, #1
 8007dae:	4630      	mov	r0, r6
 8007db0:	f04f 0c00 	mov.w	ip, #0
 8007db4:	f857 2b04 	ldr.w	r2, [r7], #4
 8007db8:	f8d0 e000 	ldr.w	lr, [r0]
 8007dbc:	b293      	uxth	r3, r2
 8007dbe:	ebac 0303 	sub.w	r3, ip, r3
 8007dc2:	0c12      	lsrs	r2, r2, #16
 8007dc4:	fa13 f38e 	uxtah	r3, r3, lr
 8007dc8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007dcc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007dd0:	b29b      	uxth	r3, r3
 8007dd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007dd6:	45b9      	cmp	r9, r7
 8007dd8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007ddc:	f840 3b04 	str.w	r3, [r0], #4
 8007de0:	d2e8      	bcs.n	8007db4 <quorem+0xb0>
 8007de2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8007de6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8007dea:	b92a      	cbnz	r2, 8007df8 <quorem+0xf4>
 8007dec:	3b04      	subs	r3, #4
 8007dee:	429e      	cmp	r6, r3
 8007df0:	461a      	mov	r2, r3
 8007df2:	d30b      	bcc.n	8007e0c <quorem+0x108>
 8007df4:	f8c8 4010 	str.w	r4, [r8, #16]
 8007df8:	4628      	mov	r0, r5
 8007dfa:	b003      	add	sp, #12
 8007dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e00:	6812      	ldr	r2, [r2, #0]
 8007e02:	3b04      	subs	r3, #4
 8007e04:	2a00      	cmp	r2, #0
 8007e06:	d1ca      	bne.n	8007d9e <quorem+0x9a>
 8007e08:	3c01      	subs	r4, #1
 8007e0a:	e7c5      	b.n	8007d98 <quorem+0x94>
 8007e0c:	6812      	ldr	r2, [r2, #0]
 8007e0e:	3b04      	subs	r3, #4
 8007e10:	2a00      	cmp	r2, #0
 8007e12:	d1ef      	bne.n	8007df4 <quorem+0xf0>
 8007e14:	3c01      	subs	r4, #1
 8007e16:	e7ea      	b.n	8007dee <quorem+0xea>
 8007e18:	2000      	movs	r0, #0
 8007e1a:	e7ee      	b.n	8007dfa <quorem+0xf6>
 8007e1c:	0000      	movs	r0, r0
	...

08007e20 <_dtoa_r>:
 8007e20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e24:	ec57 6b10 	vmov	r6, r7, d0
 8007e28:	b097      	sub	sp, #92	; 0x5c
 8007e2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e2c:	9106      	str	r1, [sp, #24]
 8007e2e:	4604      	mov	r4, r0
 8007e30:	920b      	str	r2, [sp, #44]	; 0x2c
 8007e32:	9312      	str	r3, [sp, #72]	; 0x48
 8007e34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007e38:	e9cd 6700 	strd	r6, r7, [sp]
 8007e3c:	b93d      	cbnz	r5, 8007e4e <_dtoa_r+0x2e>
 8007e3e:	2010      	movs	r0, #16
 8007e40:	f001 f8ee 	bl	8009020 <malloc>
 8007e44:	6260      	str	r0, [r4, #36]	; 0x24
 8007e46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e4a:	6005      	str	r5, [r0, #0]
 8007e4c:	60c5      	str	r5, [r0, #12]
 8007e4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	b151      	cbz	r1, 8007e6a <_dtoa_r+0x4a>
 8007e54:	685a      	ldr	r2, [r3, #4]
 8007e56:	604a      	str	r2, [r1, #4]
 8007e58:	2301      	movs	r3, #1
 8007e5a:	4093      	lsls	r3, r2
 8007e5c:	608b      	str	r3, [r1, #8]
 8007e5e:	4620      	mov	r0, r4
 8007e60:	f001 f937 	bl	80090d2 <_Bfree>
 8007e64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e66:	2200      	movs	r2, #0
 8007e68:	601a      	str	r2, [r3, #0]
 8007e6a:	1e3b      	subs	r3, r7, #0
 8007e6c:	bfbb      	ittet	lt
 8007e6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8007e72:	9301      	strlt	r3, [sp, #4]
 8007e74:	2300      	movge	r3, #0
 8007e76:	2201      	movlt	r2, #1
 8007e78:	bfac      	ite	ge
 8007e7a:	f8c8 3000 	strge.w	r3, [r8]
 8007e7e:	f8c8 2000 	strlt.w	r2, [r8]
 8007e82:	4baf      	ldr	r3, [pc, #700]	; (8008140 <_dtoa_r+0x320>)
 8007e84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007e88:	ea33 0308 	bics.w	r3, r3, r8
 8007e8c:	d114      	bne.n	8007eb8 <_dtoa_r+0x98>
 8007e8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007e90:	f242 730f 	movw	r3, #9999	; 0x270f
 8007e94:	6013      	str	r3, [r2, #0]
 8007e96:	9b00      	ldr	r3, [sp, #0]
 8007e98:	b923      	cbnz	r3, 8007ea4 <_dtoa_r+0x84>
 8007e9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8007e9e:	2800      	cmp	r0, #0
 8007ea0:	f000 8542 	beq.w	8008928 <_dtoa_r+0xb08>
 8007ea4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ea6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8008154 <_dtoa_r+0x334>
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	f000 8544 	beq.w	8008938 <_dtoa_r+0xb18>
 8007eb0:	f10b 0303 	add.w	r3, fp, #3
 8007eb4:	f000 bd3e 	b.w	8008934 <_dtoa_r+0xb14>
 8007eb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	2300      	movs	r3, #0
 8007ec0:	4630      	mov	r0, r6
 8007ec2:	4639      	mov	r1, r7
 8007ec4:	f7f8 fe10 	bl	8000ae8 <__aeabi_dcmpeq>
 8007ec8:	4681      	mov	r9, r0
 8007eca:	b168      	cbz	r0, 8007ee8 <_dtoa_r+0xc8>
 8007ecc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007ece:	2301      	movs	r3, #1
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	f000 8524 	beq.w	8008922 <_dtoa_r+0xb02>
 8007eda:	4b9a      	ldr	r3, [pc, #616]	; (8008144 <_dtoa_r+0x324>)
 8007edc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007ede:	f103 3bff 	add.w	fp, r3, #4294967295
 8007ee2:	6013      	str	r3, [r2, #0]
 8007ee4:	f000 bd28 	b.w	8008938 <_dtoa_r+0xb18>
 8007ee8:	aa14      	add	r2, sp, #80	; 0x50
 8007eea:	a915      	add	r1, sp, #84	; 0x54
 8007eec:	ec47 6b10 	vmov	d0, r6, r7
 8007ef0:	4620      	mov	r0, r4
 8007ef2:	f001 fbfb 	bl	80096ec <__d2b>
 8007ef6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8007efa:	9004      	str	r0, [sp, #16]
 8007efc:	2d00      	cmp	r5, #0
 8007efe:	d07c      	beq.n	8007ffa <_dtoa_r+0x1da>
 8007f00:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007f04:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007f08:	46b2      	mov	sl, r6
 8007f0a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 8007f0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007f12:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007f16:	2200      	movs	r2, #0
 8007f18:	4b8b      	ldr	r3, [pc, #556]	; (8008148 <_dtoa_r+0x328>)
 8007f1a:	4650      	mov	r0, sl
 8007f1c:	4659      	mov	r1, fp
 8007f1e:	f7f8 f9c3 	bl	80002a8 <__aeabi_dsub>
 8007f22:	a381      	add	r3, pc, #516	; (adr r3, 8008128 <_dtoa_r+0x308>)
 8007f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f28:	f7f8 fb76 	bl	8000618 <__aeabi_dmul>
 8007f2c:	a380      	add	r3, pc, #512	; (adr r3, 8008130 <_dtoa_r+0x310>)
 8007f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f32:	f7f8 f9bb 	bl	80002ac <__adddf3>
 8007f36:	4606      	mov	r6, r0
 8007f38:	4628      	mov	r0, r5
 8007f3a:	460f      	mov	r7, r1
 8007f3c:	f7f8 fb02 	bl	8000544 <__aeabi_i2d>
 8007f40:	a37d      	add	r3, pc, #500	; (adr r3, 8008138 <_dtoa_r+0x318>)
 8007f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f46:	f7f8 fb67 	bl	8000618 <__aeabi_dmul>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	4630      	mov	r0, r6
 8007f50:	4639      	mov	r1, r7
 8007f52:	f7f8 f9ab 	bl	80002ac <__adddf3>
 8007f56:	4606      	mov	r6, r0
 8007f58:	460f      	mov	r7, r1
 8007f5a:	f7f8 fe0d 	bl	8000b78 <__aeabi_d2iz>
 8007f5e:	2200      	movs	r2, #0
 8007f60:	4682      	mov	sl, r0
 8007f62:	2300      	movs	r3, #0
 8007f64:	4630      	mov	r0, r6
 8007f66:	4639      	mov	r1, r7
 8007f68:	f7f8 fdc8 	bl	8000afc <__aeabi_dcmplt>
 8007f6c:	b148      	cbz	r0, 8007f82 <_dtoa_r+0x162>
 8007f6e:	4650      	mov	r0, sl
 8007f70:	f7f8 fae8 	bl	8000544 <__aeabi_i2d>
 8007f74:	4632      	mov	r2, r6
 8007f76:	463b      	mov	r3, r7
 8007f78:	f7f8 fdb6 	bl	8000ae8 <__aeabi_dcmpeq>
 8007f7c:	b908      	cbnz	r0, 8007f82 <_dtoa_r+0x162>
 8007f7e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f82:	f1ba 0f16 	cmp.w	sl, #22
 8007f86:	d859      	bhi.n	800803c <_dtoa_r+0x21c>
 8007f88:	4970      	ldr	r1, [pc, #448]	; (800814c <_dtoa_r+0x32c>)
 8007f8a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007f8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f96:	f7f8 fdcf 	bl	8000b38 <__aeabi_dcmpgt>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d050      	beq.n	8008040 <_dtoa_r+0x220>
 8007f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	930f      	str	r3, [sp, #60]	; 0x3c
 8007fa6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007fa8:	1b5d      	subs	r5, r3, r5
 8007faa:	f1b5 0801 	subs.w	r8, r5, #1
 8007fae:	bf49      	itett	mi
 8007fb0:	f1c5 0301 	rsbmi	r3, r5, #1
 8007fb4:	2300      	movpl	r3, #0
 8007fb6:	9305      	strmi	r3, [sp, #20]
 8007fb8:	f04f 0800 	movmi.w	r8, #0
 8007fbc:	bf58      	it	pl
 8007fbe:	9305      	strpl	r3, [sp, #20]
 8007fc0:	f1ba 0f00 	cmp.w	sl, #0
 8007fc4:	db3e      	blt.n	8008044 <_dtoa_r+0x224>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	44d0      	add	r8, sl
 8007fca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8007fce:	9307      	str	r3, [sp, #28]
 8007fd0:	9b06      	ldr	r3, [sp, #24]
 8007fd2:	2b09      	cmp	r3, #9
 8007fd4:	f200 8090 	bhi.w	80080f8 <_dtoa_r+0x2d8>
 8007fd8:	2b05      	cmp	r3, #5
 8007fda:	bfc4      	itt	gt
 8007fdc:	3b04      	subgt	r3, #4
 8007fde:	9306      	strgt	r3, [sp, #24]
 8007fe0:	9b06      	ldr	r3, [sp, #24]
 8007fe2:	f1a3 0302 	sub.w	r3, r3, #2
 8007fe6:	bfcc      	ite	gt
 8007fe8:	2500      	movgt	r5, #0
 8007fea:	2501      	movle	r5, #1
 8007fec:	2b03      	cmp	r3, #3
 8007fee:	f200 808f 	bhi.w	8008110 <_dtoa_r+0x2f0>
 8007ff2:	e8df f003 	tbb	[pc, r3]
 8007ff6:	7f7d      	.short	0x7f7d
 8007ff8:	7131      	.short	0x7131
 8007ffa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8007ffe:	441d      	add	r5, r3
 8008000:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8008004:	2820      	cmp	r0, #32
 8008006:	dd13      	ble.n	8008030 <_dtoa_r+0x210>
 8008008:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800800c:	9b00      	ldr	r3, [sp, #0]
 800800e:	fa08 f800 	lsl.w	r8, r8, r0
 8008012:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8008016:	fa23 f000 	lsr.w	r0, r3, r0
 800801a:	ea48 0000 	orr.w	r0, r8, r0
 800801e:	f7f8 fa81 	bl	8000524 <__aeabi_ui2d>
 8008022:	2301      	movs	r3, #1
 8008024:	4682      	mov	sl, r0
 8008026:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800802a:	3d01      	subs	r5, #1
 800802c:	9313      	str	r3, [sp, #76]	; 0x4c
 800802e:	e772      	b.n	8007f16 <_dtoa_r+0xf6>
 8008030:	9b00      	ldr	r3, [sp, #0]
 8008032:	f1c0 0020 	rsb	r0, r0, #32
 8008036:	fa03 f000 	lsl.w	r0, r3, r0
 800803a:	e7f0      	b.n	800801e <_dtoa_r+0x1fe>
 800803c:	2301      	movs	r3, #1
 800803e:	e7b1      	b.n	8007fa4 <_dtoa_r+0x184>
 8008040:	900f      	str	r0, [sp, #60]	; 0x3c
 8008042:	e7b0      	b.n	8007fa6 <_dtoa_r+0x186>
 8008044:	9b05      	ldr	r3, [sp, #20]
 8008046:	eba3 030a 	sub.w	r3, r3, sl
 800804a:	9305      	str	r3, [sp, #20]
 800804c:	f1ca 0300 	rsb	r3, sl, #0
 8008050:	9307      	str	r3, [sp, #28]
 8008052:	2300      	movs	r3, #0
 8008054:	930e      	str	r3, [sp, #56]	; 0x38
 8008056:	e7bb      	b.n	8007fd0 <_dtoa_r+0x1b0>
 8008058:	2301      	movs	r3, #1
 800805a:	930a      	str	r3, [sp, #40]	; 0x28
 800805c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800805e:	2b00      	cmp	r3, #0
 8008060:	dd59      	ble.n	8008116 <_dtoa_r+0x2f6>
 8008062:	9302      	str	r3, [sp, #8]
 8008064:	4699      	mov	r9, r3
 8008066:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008068:	2200      	movs	r2, #0
 800806a:	6072      	str	r2, [r6, #4]
 800806c:	2204      	movs	r2, #4
 800806e:	f102 0014 	add.w	r0, r2, #20
 8008072:	4298      	cmp	r0, r3
 8008074:	6871      	ldr	r1, [r6, #4]
 8008076:	d953      	bls.n	8008120 <_dtoa_r+0x300>
 8008078:	4620      	mov	r0, r4
 800807a:	f000 fff6 	bl	800906a <_Balloc>
 800807e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008080:	6030      	str	r0, [r6, #0]
 8008082:	f1b9 0f0e 	cmp.w	r9, #14
 8008086:	f8d3 b000 	ldr.w	fp, [r3]
 800808a:	f200 80e6 	bhi.w	800825a <_dtoa_r+0x43a>
 800808e:	2d00      	cmp	r5, #0
 8008090:	f000 80e3 	beq.w	800825a <_dtoa_r+0x43a>
 8008094:	ed9d 7b00 	vldr	d7, [sp]
 8008098:	f1ba 0f00 	cmp.w	sl, #0
 800809c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80080a0:	dd74      	ble.n	800818c <_dtoa_r+0x36c>
 80080a2:	4a2a      	ldr	r2, [pc, #168]	; (800814c <_dtoa_r+0x32c>)
 80080a4:	f00a 030f 	and.w	r3, sl, #15
 80080a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80080ac:	ed93 7b00 	vldr	d7, [r3]
 80080b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80080b4:	06f0      	lsls	r0, r6, #27
 80080b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80080ba:	d565      	bpl.n	8008188 <_dtoa_r+0x368>
 80080bc:	4b24      	ldr	r3, [pc, #144]	; (8008150 <_dtoa_r+0x330>)
 80080be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80080c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80080c6:	f7f8 fbd1 	bl	800086c <__aeabi_ddiv>
 80080ca:	e9cd 0100 	strd	r0, r1, [sp]
 80080ce:	f006 060f 	and.w	r6, r6, #15
 80080d2:	2503      	movs	r5, #3
 80080d4:	4f1e      	ldr	r7, [pc, #120]	; (8008150 <_dtoa_r+0x330>)
 80080d6:	e04c      	b.n	8008172 <_dtoa_r+0x352>
 80080d8:	2301      	movs	r3, #1
 80080da:	930a      	str	r3, [sp, #40]	; 0x28
 80080dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80080de:	4453      	add	r3, sl
 80080e0:	f103 0901 	add.w	r9, r3, #1
 80080e4:	9302      	str	r3, [sp, #8]
 80080e6:	464b      	mov	r3, r9
 80080e8:	2b01      	cmp	r3, #1
 80080ea:	bfb8      	it	lt
 80080ec:	2301      	movlt	r3, #1
 80080ee:	e7ba      	b.n	8008066 <_dtoa_r+0x246>
 80080f0:	2300      	movs	r3, #0
 80080f2:	e7b2      	b.n	800805a <_dtoa_r+0x23a>
 80080f4:	2300      	movs	r3, #0
 80080f6:	e7f0      	b.n	80080da <_dtoa_r+0x2ba>
 80080f8:	2501      	movs	r5, #1
 80080fa:	2300      	movs	r3, #0
 80080fc:	9306      	str	r3, [sp, #24]
 80080fe:	950a      	str	r5, [sp, #40]	; 0x28
 8008100:	f04f 33ff 	mov.w	r3, #4294967295
 8008104:	9302      	str	r3, [sp, #8]
 8008106:	4699      	mov	r9, r3
 8008108:	2200      	movs	r2, #0
 800810a:	2312      	movs	r3, #18
 800810c:	920b      	str	r2, [sp, #44]	; 0x2c
 800810e:	e7aa      	b.n	8008066 <_dtoa_r+0x246>
 8008110:	2301      	movs	r3, #1
 8008112:	930a      	str	r3, [sp, #40]	; 0x28
 8008114:	e7f4      	b.n	8008100 <_dtoa_r+0x2e0>
 8008116:	2301      	movs	r3, #1
 8008118:	9302      	str	r3, [sp, #8]
 800811a:	4699      	mov	r9, r3
 800811c:	461a      	mov	r2, r3
 800811e:	e7f5      	b.n	800810c <_dtoa_r+0x2ec>
 8008120:	3101      	adds	r1, #1
 8008122:	6071      	str	r1, [r6, #4]
 8008124:	0052      	lsls	r2, r2, #1
 8008126:	e7a2      	b.n	800806e <_dtoa_r+0x24e>
 8008128:	636f4361 	.word	0x636f4361
 800812c:	3fd287a7 	.word	0x3fd287a7
 8008130:	8b60c8b3 	.word	0x8b60c8b3
 8008134:	3fc68a28 	.word	0x3fc68a28
 8008138:	509f79fb 	.word	0x509f79fb
 800813c:	3fd34413 	.word	0x3fd34413
 8008140:	7ff00000 	.word	0x7ff00000
 8008144:	0800a7bc 	.word	0x0800a7bc
 8008148:	3ff80000 	.word	0x3ff80000
 800814c:	0800a6c0 	.word	0x0800a6c0
 8008150:	0800a698 	.word	0x0800a698
 8008154:	0800a689 	.word	0x0800a689
 8008158:	07f1      	lsls	r1, r6, #31
 800815a:	d508      	bpl.n	800816e <_dtoa_r+0x34e>
 800815c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008160:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008164:	f7f8 fa58 	bl	8000618 <__aeabi_dmul>
 8008168:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800816c:	3501      	adds	r5, #1
 800816e:	1076      	asrs	r6, r6, #1
 8008170:	3708      	adds	r7, #8
 8008172:	2e00      	cmp	r6, #0
 8008174:	d1f0      	bne.n	8008158 <_dtoa_r+0x338>
 8008176:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800817a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800817e:	f7f8 fb75 	bl	800086c <__aeabi_ddiv>
 8008182:	e9cd 0100 	strd	r0, r1, [sp]
 8008186:	e01a      	b.n	80081be <_dtoa_r+0x39e>
 8008188:	2502      	movs	r5, #2
 800818a:	e7a3      	b.n	80080d4 <_dtoa_r+0x2b4>
 800818c:	f000 80a0 	beq.w	80082d0 <_dtoa_r+0x4b0>
 8008190:	f1ca 0600 	rsb	r6, sl, #0
 8008194:	4b9f      	ldr	r3, [pc, #636]	; (8008414 <_dtoa_r+0x5f4>)
 8008196:	4fa0      	ldr	r7, [pc, #640]	; (8008418 <_dtoa_r+0x5f8>)
 8008198:	f006 020f 	and.w	r2, r6, #15
 800819c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80081a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80081a8:	f7f8 fa36 	bl	8000618 <__aeabi_dmul>
 80081ac:	e9cd 0100 	strd	r0, r1, [sp]
 80081b0:	1136      	asrs	r6, r6, #4
 80081b2:	2300      	movs	r3, #0
 80081b4:	2502      	movs	r5, #2
 80081b6:	2e00      	cmp	r6, #0
 80081b8:	d17f      	bne.n	80082ba <_dtoa_r+0x49a>
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d1e1      	bne.n	8008182 <_dtoa_r+0x362>
 80081be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8087 	beq.w	80082d4 <_dtoa_r+0x4b4>
 80081c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80081ca:	2200      	movs	r2, #0
 80081cc:	4b93      	ldr	r3, [pc, #588]	; (800841c <_dtoa_r+0x5fc>)
 80081ce:	4630      	mov	r0, r6
 80081d0:	4639      	mov	r1, r7
 80081d2:	f7f8 fc93 	bl	8000afc <__aeabi_dcmplt>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d07c      	beq.n	80082d4 <_dtoa_r+0x4b4>
 80081da:	f1b9 0f00 	cmp.w	r9, #0
 80081de:	d079      	beq.n	80082d4 <_dtoa_r+0x4b4>
 80081e0:	9b02      	ldr	r3, [sp, #8]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dd35      	ble.n	8008252 <_dtoa_r+0x432>
 80081e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80081ea:	9308      	str	r3, [sp, #32]
 80081ec:	4639      	mov	r1, r7
 80081ee:	2200      	movs	r2, #0
 80081f0:	4b8b      	ldr	r3, [pc, #556]	; (8008420 <_dtoa_r+0x600>)
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7f8 fa10 	bl	8000618 <__aeabi_dmul>
 80081f8:	e9cd 0100 	strd	r0, r1, [sp]
 80081fc:	9f02      	ldr	r7, [sp, #8]
 80081fe:	3501      	adds	r5, #1
 8008200:	4628      	mov	r0, r5
 8008202:	f7f8 f99f 	bl	8000544 <__aeabi_i2d>
 8008206:	e9dd 2300 	ldrd	r2, r3, [sp]
 800820a:	f7f8 fa05 	bl	8000618 <__aeabi_dmul>
 800820e:	2200      	movs	r2, #0
 8008210:	4b84      	ldr	r3, [pc, #528]	; (8008424 <_dtoa_r+0x604>)
 8008212:	f7f8 f84b 	bl	80002ac <__adddf3>
 8008216:	4605      	mov	r5, r0
 8008218:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800821c:	2f00      	cmp	r7, #0
 800821e:	d15d      	bne.n	80082dc <_dtoa_r+0x4bc>
 8008220:	2200      	movs	r2, #0
 8008222:	4b81      	ldr	r3, [pc, #516]	; (8008428 <_dtoa_r+0x608>)
 8008224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008228:	f7f8 f83e 	bl	80002a8 <__aeabi_dsub>
 800822c:	462a      	mov	r2, r5
 800822e:	4633      	mov	r3, r6
 8008230:	e9cd 0100 	strd	r0, r1, [sp]
 8008234:	f7f8 fc80 	bl	8000b38 <__aeabi_dcmpgt>
 8008238:	2800      	cmp	r0, #0
 800823a:	f040 8288 	bne.w	800874e <_dtoa_r+0x92e>
 800823e:	462a      	mov	r2, r5
 8008240:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8008244:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008248:	f7f8 fc58 	bl	8000afc <__aeabi_dcmplt>
 800824c:	2800      	cmp	r0, #0
 800824e:	f040 827c 	bne.w	800874a <_dtoa_r+0x92a>
 8008252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008256:	e9cd 2300 	strd	r2, r3, [sp]
 800825a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800825c:	2b00      	cmp	r3, #0
 800825e:	f2c0 8150 	blt.w	8008502 <_dtoa_r+0x6e2>
 8008262:	f1ba 0f0e 	cmp.w	sl, #14
 8008266:	f300 814c 	bgt.w	8008502 <_dtoa_r+0x6e2>
 800826a:	4b6a      	ldr	r3, [pc, #424]	; (8008414 <_dtoa_r+0x5f4>)
 800826c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008270:	ed93 7b00 	vldr	d7, [r3]
 8008274:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008276:	2b00      	cmp	r3, #0
 8008278:	ed8d 7b02 	vstr	d7, [sp, #8]
 800827c:	f280 80d8 	bge.w	8008430 <_dtoa_r+0x610>
 8008280:	f1b9 0f00 	cmp.w	r9, #0
 8008284:	f300 80d4 	bgt.w	8008430 <_dtoa_r+0x610>
 8008288:	f040 825e 	bne.w	8008748 <_dtoa_r+0x928>
 800828c:	2200      	movs	r2, #0
 800828e:	4b66      	ldr	r3, [pc, #408]	; (8008428 <_dtoa_r+0x608>)
 8008290:	ec51 0b17 	vmov	r0, r1, d7
 8008294:	f7f8 f9c0 	bl	8000618 <__aeabi_dmul>
 8008298:	e9dd 2300 	ldrd	r2, r3, [sp]
 800829c:	f7f8 fc42 	bl	8000b24 <__aeabi_dcmpge>
 80082a0:	464f      	mov	r7, r9
 80082a2:	464e      	mov	r6, r9
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f040 8234 	bne.w	8008712 <_dtoa_r+0x8f2>
 80082aa:	2331      	movs	r3, #49	; 0x31
 80082ac:	f10b 0501 	add.w	r5, fp, #1
 80082b0:	f88b 3000 	strb.w	r3, [fp]
 80082b4:	f10a 0a01 	add.w	sl, sl, #1
 80082b8:	e22f      	b.n	800871a <_dtoa_r+0x8fa>
 80082ba:	07f2      	lsls	r2, r6, #31
 80082bc:	d505      	bpl.n	80082ca <_dtoa_r+0x4aa>
 80082be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80082c2:	f7f8 f9a9 	bl	8000618 <__aeabi_dmul>
 80082c6:	3501      	adds	r5, #1
 80082c8:	2301      	movs	r3, #1
 80082ca:	1076      	asrs	r6, r6, #1
 80082cc:	3708      	adds	r7, #8
 80082ce:	e772      	b.n	80081b6 <_dtoa_r+0x396>
 80082d0:	2502      	movs	r5, #2
 80082d2:	e774      	b.n	80081be <_dtoa_r+0x39e>
 80082d4:	f8cd a020 	str.w	sl, [sp, #32]
 80082d8:	464f      	mov	r7, r9
 80082da:	e791      	b.n	8008200 <_dtoa_r+0x3e0>
 80082dc:	4b4d      	ldr	r3, [pc, #308]	; (8008414 <_dtoa_r+0x5f4>)
 80082de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80082e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80082e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d047      	beq.n	800837c <_dtoa_r+0x55c>
 80082ec:	4602      	mov	r2, r0
 80082ee:	460b      	mov	r3, r1
 80082f0:	2000      	movs	r0, #0
 80082f2:	494e      	ldr	r1, [pc, #312]	; (800842c <_dtoa_r+0x60c>)
 80082f4:	f7f8 faba 	bl	800086c <__aeabi_ddiv>
 80082f8:	462a      	mov	r2, r5
 80082fa:	4633      	mov	r3, r6
 80082fc:	f7f7 ffd4 	bl	80002a8 <__aeabi_dsub>
 8008300:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008304:	465d      	mov	r5, fp
 8008306:	e9dd 0100 	ldrd	r0, r1, [sp]
 800830a:	f7f8 fc35 	bl	8000b78 <__aeabi_d2iz>
 800830e:	4606      	mov	r6, r0
 8008310:	f7f8 f918 	bl	8000544 <__aeabi_i2d>
 8008314:	4602      	mov	r2, r0
 8008316:	460b      	mov	r3, r1
 8008318:	e9dd 0100 	ldrd	r0, r1, [sp]
 800831c:	f7f7 ffc4 	bl	80002a8 <__aeabi_dsub>
 8008320:	3630      	adds	r6, #48	; 0x30
 8008322:	f805 6b01 	strb.w	r6, [r5], #1
 8008326:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800832a:	e9cd 0100 	strd	r0, r1, [sp]
 800832e:	f7f8 fbe5 	bl	8000afc <__aeabi_dcmplt>
 8008332:	2800      	cmp	r0, #0
 8008334:	d163      	bne.n	80083fe <_dtoa_r+0x5de>
 8008336:	e9dd 2300 	ldrd	r2, r3, [sp]
 800833a:	2000      	movs	r0, #0
 800833c:	4937      	ldr	r1, [pc, #220]	; (800841c <_dtoa_r+0x5fc>)
 800833e:	f7f7 ffb3 	bl	80002a8 <__aeabi_dsub>
 8008342:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008346:	f7f8 fbd9 	bl	8000afc <__aeabi_dcmplt>
 800834a:	2800      	cmp	r0, #0
 800834c:	f040 80b7 	bne.w	80084be <_dtoa_r+0x69e>
 8008350:	eba5 030b 	sub.w	r3, r5, fp
 8008354:	429f      	cmp	r7, r3
 8008356:	f77f af7c 	ble.w	8008252 <_dtoa_r+0x432>
 800835a:	2200      	movs	r2, #0
 800835c:	4b30      	ldr	r3, [pc, #192]	; (8008420 <_dtoa_r+0x600>)
 800835e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008362:	f7f8 f959 	bl	8000618 <__aeabi_dmul>
 8008366:	2200      	movs	r2, #0
 8008368:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800836c:	4b2c      	ldr	r3, [pc, #176]	; (8008420 <_dtoa_r+0x600>)
 800836e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008372:	f7f8 f951 	bl	8000618 <__aeabi_dmul>
 8008376:	e9cd 0100 	strd	r0, r1, [sp]
 800837a:	e7c4      	b.n	8008306 <_dtoa_r+0x4e6>
 800837c:	462a      	mov	r2, r5
 800837e:	4633      	mov	r3, r6
 8008380:	f7f8 f94a 	bl	8000618 <__aeabi_dmul>
 8008384:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008388:	eb0b 0507 	add.w	r5, fp, r7
 800838c:	465e      	mov	r6, fp
 800838e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008392:	f7f8 fbf1 	bl	8000b78 <__aeabi_d2iz>
 8008396:	4607      	mov	r7, r0
 8008398:	f7f8 f8d4 	bl	8000544 <__aeabi_i2d>
 800839c:	3730      	adds	r7, #48	; 0x30
 800839e:	4602      	mov	r2, r0
 80083a0:	460b      	mov	r3, r1
 80083a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083a6:	f7f7 ff7f 	bl	80002a8 <__aeabi_dsub>
 80083aa:	f806 7b01 	strb.w	r7, [r6], #1
 80083ae:	42ae      	cmp	r6, r5
 80083b0:	e9cd 0100 	strd	r0, r1, [sp]
 80083b4:	f04f 0200 	mov.w	r2, #0
 80083b8:	d126      	bne.n	8008408 <_dtoa_r+0x5e8>
 80083ba:	4b1c      	ldr	r3, [pc, #112]	; (800842c <_dtoa_r+0x60c>)
 80083bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80083c0:	f7f7 ff74 	bl	80002ac <__adddf3>
 80083c4:	4602      	mov	r2, r0
 80083c6:	460b      	mov	r3, r1
 80083c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083cc:	f7f8 fbb4 	bl	8000b38 <__aeabi_dcmpgt>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d174      	bne.n	80084be <_dtoa_r+0x69e>
 80083d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80083d8:	2000      	movs	r0, #0
 80083da:	4914      	ldr	r1, [pc, #80]	; (800842c <_dtoa_r+0x60c>)
 80083dc:	f7f7 ff64 	bl	80002a8 <__aeabi_dsub>
 80083e0:	4602      	mov	r2, r0
 80083e2:	460b      	mov	r3, r1
 80083e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80083e8:	f7f8 fb88 	bl	8000afc <__aeabi_dcmplt>
 80083ec:	2800      	cmp	r0, #0
 80083ee:	f43f af30 	beq.w	8008252 <_dtoa_r+0x432>
 80083f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80083f6:	2b30      	cmp	r3, #48	; 0x30
 80083f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80083fc:	d002      	beq.n	8008404 <_dtoa_r+0x5e4>
 80083fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008402:	e04a      	b.n	800849a <_dtoa_r+0x67a>
 8008404:	4615      	mov	r5, r2
 8008406:	e7f4      	b.n	80083f2 <_dtoa_r+0x5d2>
 8008408:	4b05      	ldr	r3, [pc, #20]	; (8008420 <_dtoa_r+0x600>)
 800840a:	f7f8 f905 	bl	8000618 <__aeabi_dmul>
 800840e:	e9cd 0100 	strd	r0, r1, [sp]
 8008412:	e7bc      	b.n	800838e <_dtoa_r+0x56e>
 8008414:	0800a6c0 	.word	0x0800a6c0
 8008418:	0800a698 	.word	0x0800a698
 800841c:	3ff00000 	.word	0x3ff00000
 8008420:	40240000 	.word	0x40240000
 8008424:	401c0000 	.word	0x401c0000
 8008428:	40140000 	.word	0x40140000
 800842c:	3fe00000 	.word	0x3fe00000
 8008430:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008434:	465d      	mov	r5, fp
 8008436:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800843a:	4630      	mov	r0, r6
 800843c:	4639      	mov	r1, r7
 800843e:	f7f8 fa15 	bl	800086c <__aeabi_ddiv>
 8008442:	f7f8 fb99 	bl	8000b78 <__aeabi_d2iz>
 8008446:	4680      	mov	r8, r0
 8008448:	f7f8 f87c 	bl	8000544 <__aeabi_i2d>
 800844c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008450:	f7f8 f8e2 	bl	8000618 <__aeabi_dmul>
 8008454:	4602      	mov	r2, r0
 8008456:	460b      	mov	r3, r1
 8008458:	4630      	mov	r0, r6
 800845a:	4639      	mov	r1, r7
 800845c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8008460:	f7f7 ff22 	bl	80002a8 <__aeabi_dsub>
 8008464:	f805 6b01 	strb.w	r6, [r5], #1
 8008468:	eba5 060b 	sub.w	r6, r5, fp
 800846c:	45b1      	cmp	r9, r6
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	d139      	bne.n	80084e8 <_dtoa_r+0x6c8>
 8008474:	f7f7 ff1a 	bl	80002ac <__adddf3>
 8008478:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800847c:	4606      	mov	r6, r0
 800847e:	460f      	mov	r7, r1
 8008480:	f7f8 fb5a 	bl	8000b38 <__aeabi_dcmpgt>
 8008484:	b9c8      	cbnz	r0, 80084ba <_dtoa_r+0x69a>
 8008486:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800848a:	4630      	mov	r0, r6
 800848c:	4639      	mov	r1, r7
 800848e:	f7f8 fb2b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008492:	b110      	cbz	r0, 800849a <_dtoa_r+0x67a>
 8008494:	f018 0f01 	tst.w	r8, #1
 8008498:	d10f      	bne.n	80084ba <_dtoa_r+0x69a>
 800849a:	9904      	ldr	r1, [sp, #16]
 800849c:	4620      	mov	r0, r4
 800849e:	f000 fe18 	bl	80090d2 <_Bfree>
 80084a2:	2300      	movs	r3, #0
 80084a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80084a6:	702b      	strb	r3, [r5, #0]
 80084a8:	f10a 0301 	add.w	r3, sl, #1
 80084ac:	6013      	str	r3, [r2, #0]
 80084ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	f000 8241 	beq.w	8008938 <_dtoa_r+0xb18>
 80084b6:	601d      	str	r5, [r3, #0]
 80084b8:	e23e      	b.n	8008938 <_dtoa_r+0xb18>
 80084ba:	f8cd a020 	str.w	sl, [sp, #32]
 80084be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80084c2:	2a39      	cmp	r2, #57	; 0x39
 80084c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80084c8:	d108      	bne.n	80084dc <_dtoa_r+0x6bc>
 80084ca:	459b      	cmp	fp, r3
 80084cc:	d10a      	bne.n	80084e4 <_dtoa_r+0x6c4>
 80084ce:	9b08      	ldr	r3, [sp, #32]
 80084d0:	3301      	adds	r3, #1
 80084d2:	9308      	str	r3, [sp, #32]
 80084d4:	2330      	movs	r3, #48	; 0x30
 80084d6:	f88b 3000 	strb.w	r3, [fp]
 80084da:	465b      	mov	r3, fp
 80084dc:	781a      	ldrb	r2, [r3, #0]
 80084de:	3201      	adds	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
 80084e2:	e78c      	b.n	80083fe <_dtoa_r+0x5de>
 80084e4:	461d      	mov	r5, r3
 80084e6:	e7ea      	b.n	80084be <_dtoa_r+0x69e>
 80084e8:	2200      	movs	r2, #0
 80084ea:	4b9b      	ldr	r3, [pc, #620]	; (8008758 <_dtoa_r+0x938>)
 80084ec:	f7f8 f894 	bl	8000618 <__aeabi_dmul>
 80084f0:	2200      	movs	r2, #0
 80084f2:	2300      	movs	r3, #0
 80084f4:	4606      	mov	r6, r0
 80084f6:	460f      	mov	r7, r1
 80084f8:	f7f8 faf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80084fc:	2800      	cmp	r0, #0
 80084fe:	d09a      	beq.n	8008436 <_dtoa_r+0x616>
 8008500:	e7cb      	b.n	800849a <_dtoa_r+0x67a>
 8008502:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008504:	2a00      	cmp	r2, #0
 8008506:	f000 808b 	beq.w	8008620 <_dtoa_r+0x800>
 800850a:	9a06      	ldr	r2, [sp, #24]
 800850c:	2a01      	cmp	r2, #1
 800850e:	dc6e      	bgt.n	80085ee <_dtoa_r+0x7ce>
 8008510:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008512:	2a00      	cmp	r2, #0
 8008514:	d067      	beq.n	80085e6 <_dtoa_r+0x7c6>
 8008516:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800851a:	9f07      	ldr	r7, [sp, #28]
 800851c:	9d05      	ldr	r5, [sp, #20]
 800851e:	9a05      	ldr	r2, [sp, #20]
 8008520:	2101      	movs	r1, #1
 8008522:	441a      	add	r2, r3
 8008524:	4620      	mov	r0, r4
 8008526:	9205      	str	r2, [sp, #20]
 8008528:	4498      	add	r8, r3
 800852a:	f000 feb0 	bl	800928e <__i2b>
 800852e:	4606      	mov	r6, r0
 8008530:	2d00      	cmp	r5, #0
 8008532:	dd0c      	ble.n	800854e <_dtoa_r+0x72e>
 8008534:	f1b8 0f00 	cmp.w	r8, #0
 8008538:	dd09      	ble.n	800854e <_dtoa_r+0x72e>
 800853a:	4545      	cmp	r5, r8
 800853c:	9a05      	ldr	r2, [sp, #20]
 800853e:	462b      	mov	r3, r5
 8008540:	bfa8      	it	ge
 8008542:	4643      	movge	r3, r8
 8008544:	1ad2      	subs	r2, r2, r3
 8008546:	9205      	str	r2, [sp, #20]
 8008548:	1aed      	subs	r5, r5, r3
 800854a:	eba8 0803 	sub.w	r8, r8, r3
 800854e:	9b07      	ldr	r3, [sp, #28]
 8008550:	b1eb      	cbz	r3, 800858e <_dtoa_r+0x76e>
 8008552:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008554:	2b00      	cmp	r3, #0
 8008556:	d067      	beq.n	8008628 <_dtoa_r+0x808>
 8008558:	b18f      	cbz	r7, 800857e <_dtoa_r+0x75e>
 800855a:	4631      	mov	r1, r6
 800855c:	463a      	mov	r2, r7
 800855e:	4620      	mov	r0, r4
 8008560:	f000 ff34 	bl	80093cc <__pow5mult>
 8008564:	9a04      	ldr	r2, [sp, #16]
 8008566:	4601      	mov	r1, r0
 8008568:	4606      	mov	r6, r0
 800856a:	4620      	mov	r0, r4
 800856c:	f000 fe98 	bl	80092a0 <__multiply>
 8008570:	9904      	ldr	r1, [sp, #16]
 8008572:	9008      	str	r0, [sp, #32]
 8008574:	4620      	mov	r0, r4
 8008576:	f000 fdac 	bl	80090d2 <_Bfree>
 800857a:	9b08      	ldr	r3, [sp, #32]
 800857c:	9304      	str	r3, [sp, #16]
 800857e:	9b07      	ldr	r3, [sp, #28]
 8008580:	1bda      	subs	r2, r3, r7
 8008582:	d004      	beq.n	800858e <_dtoa_r+0x76e>
 8008584:	9904      	ldr	r1, [sp, #16]
 8008586:	4620      	mov	r0, r4
 8008588:	f000 ff20 	bl	80093cc <__pow5mult>
 800858c:	9004      	str	r0, [sp, #16]
 800858e:	2101      	movs	r1, #1
 8008590:	4620      	mov	r0, r4
 8008592:	f000 fe7c 	bl	800928e <__i2b>
 8008596:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008598:	4607      	mov	r7, r0
 800859a:	2b00      	cmp	r3, #0
 800859c:	f000 81d0 	beq.w	8008940 <_dtoa_r+0xb20>
 80085a0:	461a      	mov	r2, r3
 80085a2:	4601      	mov	r1, r0
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 ff11 	bl	80093cc <__pow5mult>
 80085aa:	9b06      	ldr	r3, [sp, #24]
 80085ac:	2b01      	cmp	r3, #1
 80085ae:	4607      	mov	r7, r0
 80085b0:	dc40      	bgt.n	8008634 <_dtoa_r+0x814>
 80085b2:	9b00      	ldr	r3, [sp, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d139      	bne.n	800862c <_dtoa_r+0x80c>
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d136      	bne.n	8008630 <_dtoa_r+0x810>
 80085c2:	9b01      	ldr	r3, [sp, #4]
 80085c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80085c8:	0d1b      	lsrs	r3, r3, #20
 80085ca:	051b      	lsls	r3, r3, #20
 80085cc:	b12b      	cbz	r3, 80085da <_dtoa_r+0x7ba>
 80085ce:	9b05      	ldr	r3, [sp, #20]
 80085d0:	3301      	adds	r3, #1
 80085d2:	9305      	str	r3, [sp, #20]
 80085d4:	f108 0801 	add.w	r8, r8, #1
 80085d8:	2301      	movs	r3, #1
 80085da:	9307      	str	r3, [sp, #28]
 80085dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d12a      	bne.n	8008638 <_dtoa_r+0x818>
 80085e2:	2001      	movs	r0, #1
 80085e4:	e030      	b.n	8008648 <_dtoa_r+0x828>
 80085e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80085e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80085ec:	e795      	b.n	800851a <_dtoa_r+0x6fa>
 80085ee:	9b07      	ldr	r3, [sp, #28]
 80085f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80085f4:	42bb      	cmp	r3, r7
 80085f6:	bfbf      	itttt	lt
 80085f8:	9b07      	ldrlt	r3, [sp, #28]
 80085fa:	9707      	strlt	r7, [sp, #28]
 80085fc:	1afa      	sublt	r2, r7, r3
 80085fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008600:	bfbb      	ittet	lt
 8008602:	189b      	addlt	r3, r3, r2
 8008604:	930e      	strlt	r3, [sp, #56]	; 0x38
 8008606:	1bdf      	subge	r7, r3, r7
 8008608:	2700      	movlt	r7, #0
 800860a:	f1b9 0f00 	cmp.w	r9, #0
 800860e:	bfb5      	itete	lt
 8008610:	9b05      	ldrlt	r3, [sp, #20]
 8008612:	9d05      	ldrge	r5, [sp, #20]
 8008614:	eba3 0509 	sublt.w	r5, r3, r9
 8008618:	464b      	movge	r3, r9
 800861a:	bfb8      	it	lt
 800861c:	2300      	movlt	r3, #0
 800861e:	e77e      	b.n	800851e <_dtoa_r+0x6fe>
 8008620:	9f07      	ldr	r7, [sp, #28]
 8008622:	9d05      	ldr	r5, [sp, #20]
 8008624:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8008626:	e783      	b.n	8008530 <_dtoa_r+0x710>
 8008628:	9a07      	ldr	r2, [sp, #28]
 800862a:	e7ab      	b.n	8008584 <_dtoa_r+0x764>
 800862c:	2300      	movs	r3, #0
 800862e:	e7d4      	b.n	80085da <_dtoa_r+0x7ba>
 8008630:	9b00      	ldr	r3, [sp, #0]
 8008632:	e7d2      	b.n	80085da <_dtoa_r+0x7ba>
 8008634:	2300      	movs	r3, #0
 8008636:	9307      	str	r3, [sp, #28]
 8008638:	693b      	ldr	r3, [r7, #16]
 800863a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800863e:	6918      	ldr	r0, [r3, #16]
 8008640:	f000 fdd7 	bl	80091f2 <__hi0bits>
 8008644:	f1c0 0020 	rsb	r0, r0, #32
 8008648:	4440      	add	r0, r8
 800864a:	f010 001f 	ands.w	r0, r0, #31
 800864e:	d047      	beq.n	80086e0 <_dtoa_r+0x8c0>
 8008650:	f1c0 0320 	rsb	r3, r0, #32
 8008654:	2b04      	cmp	r3, #4
 8008656:	dd3b      	ble.n	80086d0 <_dtoa_r+0x8b0>
 8008658:	9b05      	ldr	r3, [sp, #20]
 800865a:	f1c0 001c 	rsb	r0, r0, #28
 800865e:	4403      	add	r3, r0
 8008660:	9305      	str	r3, [sp, #20]
 8008662:	4405      	add	r5, r0
 8008664:	4480      	add	r8, r0
 8008666:	9b05      	ldr	r3, [sp, #20]
 8008668:	2b00      	cmp	r3, #0
 800866a:	dd05      	ble.n	8008678 <_dtoa_r+0x858>
 800866c:	461a      	mov	r2, r3
 800866e:	9904      	ldr	r1, [sp, #16]
 8008670:	4620      	mov	r0, r4
 8008672:	f000 fef9 	bl	8009468 <__lshift>
 8008676:	9004      	str	r0, [sp, #16]
 8008678:	f1b8 0f00 	cmp.w	r8, #0
 800867c:	dd05      	ble.n	800868a <_dtoa_r+0x86a>
 800867e:	4639      	mov	r1, r7
 8008680:	4642      	mov	r2, r8
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fef0 	bl	8009468 <__lshift>
 8008688:	4607      	mov	r7, r0
 800868a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800868c:	b353      	cbz	r3, 80086e4 <_dtoa_r+0x8c4>
 800868e:	4639      	mov	r1, r7
 8008690:	9804      	ldr	r0, [sp, #16]
 8008692:	f000 ff3d 	bl	8009510 <__mcmp>
 8008696:	2800      	cmp	r0, #0
 8008698:	da24      	bge.n	80086e4 <_dtoa_r+0x8c4>
 800869a:	2300      	movs	r3, #0
 800869c:	220a      	movs	r2, #10
 800869e:	9904      	ldr	r1, [sp, #16]
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 fd2d 	bl	8009100 <__multadd>
 80086a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086a8:	9004      	str	r0, [sp, #16]
 80086aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	f000 814d 	beq.w	800894e <_dtoa_r+0xb2e>
 80086b4:	2300      	movs	r3, #0
 80086b6:	4631      	mov	r1, r6
 80086b8:	220a      	movs	r2, #10
 80086ba:	4620      	mov	r0, r4
 80086bc:	f000 fd20 	bl	8009100 <__multadd>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	4606      	mov	r6, r0
 80086c6:	dc4f      	bgt.n	8008768 <_dtoa_r+0x948>
 80086c8:	9b06      	ldr	r3, [sp, #24]
 80086ca:	2b02      	cmp	r3, #2
 80086cc:	dd4c      	ble.n	8008768 <_dtoa_r+0x948>
 80086ce:	e011      	b.n	80086f4 <_dtoa_r+0x8d4>
 80086d0:	d0c9      	beq.n	8008666 <_dtoa_r+0x846>
 80086d2:	9a05      	ldr	r2, [sp, #20]
 80086d4:	331c      	adds	r3, #28
 80086d6:	441a      	add	r2, r3
 80086d8:	9205      	str	r2, [sp, #20]
 80086da:	441d      	add	r5, r3
 80086dc:	4498      	add	r8, r3
 80086de:	e7c2      	b.n	8008666 <_dtoa_r+0x846>
 80086e0:	4603      	mov	r3, r0
 80086e2:	e7f6      	b.n	80086d2 <_dtoa_r+0x8b2>
 80086e4:	f1b9 0f00 	cmp.w	r9, #0
 80086e8:	dc38      	bgt.n	800875c <_dtoa_r+0x93c>
 80086ea:	9b06      	ldr	r3, [sp, #24]
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	dd35      	ble.n	800875c <_dtoa_r+0x93c>
 80086f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80086f4:	9b02      	ldr	r3, [sp, #8]
 80086f6:	b963      	cbnz	r3, 8008712 <_dtoa_r+0x8f2>
 80086f8:	4639      	mov	r1, r7
 80086fa:	2205      	movs	r2, #5
 80086fc:	4620      	mov	r0, r4
 80086fe:	f000 fcff 	bl	8009100 <__multadd>
 8008702:	4601      	mov	r1, r0
 8008704:	4607      	mov	r7, r0
 8008706:	9804      	ldr	r0, [sp, #16]
 8008708:	f000 ff02 	bl	8009510 <__mcmp>
 800870c:	2800      	cmp	r0, #0
 800870e:	f73f adcc 	bgt.w	80082aa <_dtoa_r+0x48a>
 8008712:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008714:	465d      	mov	r5, fp
 8008716:	ea6f 0a03 	mvn.w	sl, r3
 800871a:	f04f 0900 	mov.w	r9, #0
 800871e:	4639      	mov	r1, r7
 8008720:	4620      	mov	r0, r4
 8008722:	f000 fcd6 	bl	80090d2 <_Bfree>
 8008726:	2e00      	cmp	r6, #0
 8008728:	f43f aeb7 	beq.w	800849a <_dtoa_r+0x67a>
 800872c:	f1b9 0f00 	cmp.w	r9, #0
 8008730:	d005      	beq.n	800873e <_dtoa_r+0x91e>
 8008732:	45b1      	cmp	r9, r6
 8008734:	d003      	beq.n	800873e <_dtoa_r+0x91e>
 8008736:	4649      	mov	r1, r9
 8008738:	4620      	mov	r0, r4
 800873a:	f000 fcca 	bl	80090d2 <_Bfree>
 800873e:	4631      	mov	r1, r6
 8008740:	4620      	mov	r0, r4
 8008742:	f000 fcc6 	bl	80090d2 <_Bfree>
 8008746:	e6a8      	b.n	800849a <_dtoa_r+0x67a>
 8008748:	2700      	movs	r7, #0
 800874a:	463e      	mov	r6, r7
 800874c:	e7e1      	b.n	8008712 <_dtoa_r+0x8f2>
 800874e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008752:	463e      	mov	r6, r7
 8008754:	e5a9      	b.n	80082aa <_dtoa_r+0x48a>
 8008756:	bf00      	nop
 8008758:	40240000 	.word	0x40240000
 800875c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800875e:	f8cd 9008 	str.w	r9, [sp, #8]
 8008762:	2b00      	cmp	r3, #0
 8008764:	f000 80fa 	beq.w	800895c <_dtoa_r+0xb3c>
 8008768:	2d00      	cmp	r5, #0
 800876a:	dd05      	ble.n	8008778 <_dtoa_r+0x958>
 800876c:	4631      	mov	r1, r6
 800876e:	462a      	mov	r2, r5
 8008770:	4620      	mov	r0, r4
 8008772:	f000 fe79 	bl	8009468 <__lshift>
 8008776:	4606      	mov	r6, r0
 8008778:	9b07      	ldr	r3, [sp, #28]
 800877a:	2b00      	cmp	r3, #0
 800877c:	d04c      	beq.n	8008818 <_dtoa_r+0x9f8>
 800877e:	6871      	ldr	r1, [r6, #4]
 8008780:	4620      	mov	r0, r4
 8008782:	f000 fc72 	bl	800906a <_Balloc>
 8008786:	6932      	ldr	r2, [r6, #16]
 8008788:	3202      	adds	r2, #2
 800878a:	4605      	mov	r5, r0
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	f106 010c 	add.w	r1, r6, #12
 8008792:	300c      	adds	r0, #12
 8008794:	f000 fc5e 	bl	8009054 <memcpy>
 8008798:	2201      	movs	r2, #1
 800879a:	4629      	mov	r1, r5
 800879c:	4620      	mov	r0, r4
 800879e:	f000 fe63 	bl	8009468 <__lshift>
 80087a2:	9b00      	ldr	r3, [sp, #0]
 80087a4:	f8cd b014 	str.w	fp, [sp, #20]
 80087a8:	f003 0301 	and.w	r3, r3, #1
 80087ac:	46b1      	mov	r9, r6
 80087ae:	9307      	str	r3, [sp, #28]
 80087b0:	4606      	mov	r6, r0
 80087b2:	4639      	mov	r1, r7
 80087b4:	9804      	ldr	r0, [sp, #16]
 80087b6:	f7ff faa5 	bl	8007d04 <quorem>
 80087ba:	4649      	mov	r1, r9
 80087bc:	4605      	mov	r5, r0
 80087be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80087c2:	9804      	ldr	r0, [sp, #16]
 80087c4:	f000 fea4 	bl	8009510 <__mcmp>
 80087c8:	4632      	mov	r2, r6
 80087ca:	9000      	str	r0, [sp, #0]
 80087cc:	4639      	mov	r1, r7
 80087ce:	4620      	mov	r0, r4
 80087d0:	f000 feb8 	bl	8009544 <__mdiff>
 80087d4:	68c3      	ldr	r3, [r0, #12]
 80087d6:	4602      	mov	r2, r0
 80087d8:	bb03      	cbnz	r3, 800881c <_dtoa_r+0x9fc>
 80087da:	4601      	mov	r1, r0
 80087dc:	9008      	str	r0, [sp, #32]
 80087de:	9804      	ldr	r0, [sp, #16]
 80087e0:	f000 fe96 	bl	8009510 <__mcmp>
 80087e4:	9a08      	ldr	r2, [sp, #32]
 80087e6:	4603      	mov	r3, r0
 80087e8:	4611      	mov	r1, r2
 80087ea:	4620      	mov	r0, r4
 80087ec:	9308      	str	r3, [sp, #32]
 80087ee:	f000 fc70 	bl	80090d2 <_Bfree>
 80087f2:	9b08      	ldr	r3, [sp, #32]
 80087f4:	b9a3      	cbnz	r3, 8008820 <_dtoa_r+0xa00>
 80087f6:	9a06      	ldr	r2, [sp, #24]
 80087f8:	b992      	cbnz	r2, 8008820 <_dtoa_r+0xa00>
 80087fa:	9a07      	ldr	r2, [sp, #28]
 80087fc:	b982      	cbnz	r2, 8008820 <_dtoa_r+0xa00>
 80087fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008802:	d029      	beq.n	8008858 <_dtoa_r+0xa38>
 8008804:	9b00      	ldr	r3, [sp, #0]
 8008806:	2b00      	cmp	r3, #0
 8008808:	dd01      	ble.n	800880e <_dtoa_r+0x9ee>
 800880a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800880e:	9b05      	ldr	r3, [sp, #20]
 8008810:	1c5d      	adds	r5, r3, #1
 8008812:	f883 8000 	strb.w	r8, [r3]
 8008816:	e782      	b.n	800871e <_dtoa_r+0x8fe>
 8008818:	4630      	mov	r0, r6
 800881a:	e7c2      	b.n	80087a2 <_dtoa_r+0x982>
 800881c:	2301      	movs	r3, #1
 800881e:	e7e3      	b.n	80087e8 <_dtoa_r+0x9c8>
 8008820:	9a00      	ldr	r2, [sp, #0]
 8008822:	2a00      	cmp	r2, #0
 8008824:	db04      	blt.n	8008830 <_dtoa_r+0xa10>
 8008826:	d125      	bne.n	8008874 <_dtoa_r+0xa54>
 8008828:	9a06      	ldr	r2, [sp, #24]
 800882a:	bb1a      	cbnz	r2, 8008874 <_dtoa_r+0xa54>
 800882c:	9a07      	ldr	r2, [sp, #28]
 800882e:	bb0a      	cbnz	r2, 8008874 <_dtoa_r+0xa54>
 8008830:	2b00      	cmp	r3, #0
 8008832:	ddec      	ble.n	800880e <_dtoa_r+0x9ee>
 8008834:	2201      	movs	r2, #1
 8008836:	9904      	ldr	r1, [sp, #16]
 8008838:	4620      	mov	r0, r4
 800883a:	f000 fe15 	bl	8009468 <__lshift>
 800883e:	4639      	mov	r1, r7
 8008840:	9004      	str	r0, [sp, #16]
 8008842:	f000 fe65 	bl	8009510 <__mcmp>
 8008846:	2800      	cmp	r0, #0
 8008848:	dc03      	bgt.n	8008852 <_dtoa_r+0xa32>
 800884a:	d1e0      	bne.n	800880e <_dtoa_r+0x9ee>
 800884c:	f018 0f01 	tst.w	r8, #1
 8008850:	d0dd      	beq.n	800880e <_dtoa_r+0x9ee>
 8008852:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008856:	d1d8      	bne.n	800880a <_dtoa_r+0x9ea>
 8008858:	9b05      	ldr	r3, [sp, #20]
 800885a:	9a05      	ldr	r2, [sp, #20]
 800885c:	1c5d      	adds	r5, r3, #1
 800885e:	2339      	movs	r3, #57	; 0x39
 8008860:	7013      	strb	r3, [r2, #0]
 8008862:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008866:	2b39      	cmp	r3, #57	; 0x39
 8008868:	f105 32ff 	add.w	r2, r5, #4294967295
 800886c:	d04f      	beq.n	800890e <_dtoa_r+0xaee>
 800886e:	3301      	adds	r3, #1
 8008870:	7013      	strb	r3, [r2, #0]
 8008872:	e754      	b.n	800871e <_dtoa_r+0x8fe>
 8008874:	9a05      	ldr	r2, [sp, #20]
 8008876:	2b00      	cmp	r3, #0
 8008878:	f102 0501 	add.w	r5, r2, #1
 800887c:	dd06      	ble.n	800888c <_dtoa_r+0xa6c>
 800887e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008882:	d0e9      	beq.n	8008858 <_dtoa_r+0xa38>
 8008884:	f108 0801 	add.w	r8, r8, #1
 8008888:	9b05      	ldr	r3, [sp, #20]
 800888a:	e7c2      	b.n	8008812 <_dtoa_r+0x9f2>
 800888c:	9a02      	ldr	r2, [sp, #8]
 800888e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008892:	eba5 030b 	sub.w	r3, r5, fp
 8008896:	4293      	cmp	r3, r2
 8008898:	d021      	beq.n	80088de <_dtoa_r+0xabe>
 800889a:	2300      	movs	r3, #0
 800889c:	220a      	movs	r2, #10
 800889e:	9904      	ldr	r1, [sp, #16]
 80088a0:	4620      	mov	r0, r4
 80088a2:	f000 fc2d 	bl	8009100 <__multadd>
 80088a6:	45b1      	cmp	r9, r6
 80088a8:	9004      	str	r0, [sp, #16]
 80088aa:	f04f 0300 	mov.w	r3, #0
 80088ae:	f04f 020a 	mov.w	r2, #10
 80088b2:	4649      	mov	r1, r9
 80088b4:	4620      	mov	r0, r4
 80088b6:	d105      	bne.n	80088c4 <_dtoa_r+0xaa4>
 80088b8:	f000 fc22 	bl	8009100 <__multadd>
 80088bc:	4681      	mov	r9, r0
 80088be:	4606      	mov	r6, r0
 80088c0:	9505      	str	r5, [sp, #20]
 80088c2:	e776      	b.n	80087b2 <_dtoa_r+0x992>
 80088c4:	f000 fc1c 	bl	8009100 <__multadd>
 80088c8:	4631      	mov	r1, r6
 80088ca:	4681      	mov	r9, r0
 80088cc:	2300      	movs	r3, #0
 80088ce:	220a      	movs	r2, #10
 80088d0:	4620      	mov	r0, r4
 80088d2:	f000 fc15 	bl	8009100 <__multadd>
 80088d6:	4606      	mov	r6, r0
 80088d8:	e7f2      	b.n	80088c0 <_dtoa_r+0xaa0>
 80088da:	f04f 0900 	mov.w	r9, #0
 80088de:	2201      	movs	r2, #1
 80088e0:	9904      	ldr	r1, [sp, #16]
 80088e2:	4620      	mov	r0, r4
 80088e4:	f000 fdc0 	bl	8009468 <__lshift>
 80088e8:	4639      	mov	r1, r7
 80088ea:	9004      	str	r0, [sp, #16]
 80088ec:	f000 fe10 	bl	8009510 <__mcmp>
 80088f0:	2800      	cmp	r0, #0
 80088f2:	dcb6      	bgt.n	8008862 <_dtoa_r+0xa42>
 80088f4:	d102      	bne.n	80088fc <_dtoa_r+0xadc>
 80088f6:	f018 0f01 	tst.w	r8, #1
 80088fa:	d1b2      	bne.n	8008862 <_dtoa_r+0xa42>
 80088fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008900:	2b30      	cmp	r3, #48	; 0x30
 8008902:	f105 32ff 	add.w	r2, r5, #4294967295
 8008906:	f47f af0a 	bne.w	800871e <_dtoa_r+0x8fe>
 800890a:	4615      	mov	r5, r2
 800890c:	e7f6      	b.n	80088fc <_dtoa_r+0xadc>
 800890e:	4593      	cmp	fp, r2
 8008910:	d105      	bne.n	800891e <_dtoa_r+0xafe>
 8008912:	2331      	movs	r3, #49	; 0x31
 8008914:	f10a 0a01 	add.w	sl, sl, #1
 8008918:	f88b 3000 	strb.w	r3, [fp]
 800891c:	e6ff      	b.n	800871e <_dtoa_r+0x8fe>
 800891e:	4615      	mov	r5, r2
 8008920:	e79f      	b.n	8008862 <_dtoa_r+0xa42>
 8008922:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008988 <_dtoa_r+0xb68>
 8008926:	e007      	b.n	8008938 <_dtoa_r+0xb18>
 8008928:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800892a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800898c <_dtoa_r+0xb6c>
 800892e:	b11b      	cbz	r3, 8008938 <_dtoa_r+0xb18>
 8008930:	f10b 0308 	add.w	r3, fp, #8
 8008934:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008936:	6013      	str	r3, [r2, #0]
 8008938:	4658      	mov	r0, fp
 800893a:	b017      	add	sp, #92	; 0x5c
 800893c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008940:	9b06      	ldr	r3, [sp, #24]
 8008942:	2b01      	cmp	r3, #1
 8008944:	f77f ae35 	ble.w	80085b2 <_dtoa_r+0x792>
 8008948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800894a:	9307      	str	r3, [sp, #28]
 800894c:	e649      	b.n	80085e2 <_dtoa_r+0x7c2>
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	dc03      	bgt.n	800895c <_dtoa_r+0xb3c>
 8008954:	9b06      	ldr	r3, [sp, #24]
 8008956:	2b02      	cmp	r3, #2
 8008958:	f73f aecc 	bgt.w	80086f4 <_dtoa_r+0x8d4>
 800895c:	465d      	mov	r5, fp
 800895e:	4639      	mov	r1, r7
 8008960:	9804      	ldr	r0, [sp, #16]
 8008962:	f7ff f9cf 	bl	8007d04 <quorem>
 8008966:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800896a:	f805 8b01 	strb.w	r8, [r5], #1
 800896e:	9a02      	ldr	r2, [sp, #8]
 8008970:	eba5 030b 	sub.w	r3, r5, fp
 8008974:	429a      	cmp	r2, r3
 8008976:	ddb0      	ble.n	80088da <_dtoa_r+0xaba>
 8008978:	2300      	movs	r3, #0
 800897a:	220a      	movs	r2, #10
 800897c:	9904      	ldr	r1, [sp, #16]
 800897e:	4620      	mov	r0, r4
 8008980:	f000 fbbe 	bl	8009100 <__multadd>
 8008984:	9004      	str	r0, [sp, #16]
 8008986:	e7ea      	b.n	800895e <_dtoa_r+0xb3e>
 8008988:	0800a7bb 	.word	0x0800a7bb
 800898c:	0800a680 	.word	0x0800a680

08008990 <rshift>:
 8008990:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008992:	6906      	ldr	r6, [r0, #16]
 8008994:	114b      	asrs	r3, r1, #5
 8008996:	429e      	cmp	r6, r3
 8008998:	f100 0414 	add.w	r4, r0, #20
 800899c:	dd30      	ble.n	8008a00 <rshift+0x70>
 800899e:	f011 011f 	ands.w	r1, r1, #31
 80089a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80089a6:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 80089aa:	d108      	bne.n	80089be <rshift+0x2e>
 80089ac:	4621      	mov	r1, r4
 80089ae:	42b2      	cmp	r2, r6
 80089b0:	460b      	mov	r3, r1
 80089b2:	d211      	bcs.n	80089d8 <rshift+0x48>
 80089b4:	f852 3b04 	ldr.w	r3, [r2], #4
 80089b8:	f841 3b04 	str.w	r3, [r1], #4
 80089bc:	e7f7      	b.n	80089ae <rshift+0x1e>
 80089be:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 80089c2:	f1c1 0c20 	rsb	ip, r1, #32
 80089c6:	40cd      	lsrs	r5, r1
 80089c8:	3204      	adds	r2, #4
 80089ca:	4623      	mov	r3, r4
 80089cc:	42b2      	cmp	r2, r6
 80089ce:	4617      	mov	r7, r2
 80089d0:	d30c      	bcc.n	80089ec <rshift+0x5c>
 80089d2:	601d      	str	r5, [r3, #0]
 80089d4:	b105      	cbz	r5, 80089d8 <rshift+0x48>
 80089d6:	3304      	adds	r3, #4
 80089d8:	1b1a      	subs	r2, r3, r4
 80089da:	42a3      	cmp	r3, r4
 80089dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80089e0:	bf08      	it	eq
 80089e2:	2300      	moveq	r3, #0
 80089e4:	6102      	str	r2, [r0, #16]
 80089e6:	bf08      	it	eq
 80089e8:	6143      	streq	r3, [r0, #20]
 80089ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089ec:	683f      	ldr	r7, [r7, #0]
 80089ee:	fa07 f70c 	lsl.w	r7, r7, ip
 80089f2:	433d      	orrs	r5, r7
 80089f4:	f843 5b04 	str.w	r5, [r3], #4
 80089f8:	f852 5b04 	ldr.w	r5, [r2], #4
 80089fc:	40cd      	lsrs	r5, r1
 80089fe:	e7e5      	b.n	80089cc <rshift+0x3c>
 8008a00:	4623      	mov	r3, r4
 8008a02:	e7e9      	b.n	80089d8 <rshift+0x48>

08008a04 <__hexdig_fun>:
 8008a04:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008a08:	2b09      	cmp	r3, #9
 8008a0a:	d802      	bhi.n	8008a12 <__hexdig_fun+0xe>
 8008a0c:	3820      	subs	r0, #32
 8008a0e:	b2c0      	uxtb	r0, r0
 8008a10:	4770      	bx	lr
 8008a12:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008a16:	2b05      	cmp	r3, #5
 8008a18:	d801      	bhi.n	8008a1e <__hexdig_fun+0x1a>
 8008a1a:	3847      	subs	r0, #71	; 0x47
 8008a1c:	e7f7      	b.n	8008a0e <__hexdig_fun+0xa>
 8008a1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008a22:	2b05      	cmp	r3, #5
 8008a24:	d801      	bhi.n	8008a2a <__hexdig_fun+0x26>
 8008a26:	3827      	subs	r0, #39	; 0x27
 8008a28:	e7f1      	b.n	8008a0e <__hexdig_fun+0xa>
 8008a2a:	2000      	movs	r0, #0
 8008a2c:	4770      	bx	lr

08008a2e <__gethex>:
 8008a2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a32:	b08b      	sub	sp, #44	; 0x2c
 8008a34:	468a      	mov	sl, r1
 8008a36:	9002      	str	r0, [sp, #8]
 8008a38:	9816      	ldr	r0, [sp, #88]	; 0x58
 8008a3a:	9306      	str	r3, [sp, #24]
 8008a3c:	4690      	mov	r8, r2
 8008a3e:	f000 fadf 	bl	8009000 <__localeconv_l>
 8008a42:	6803      	ldr	r3, [r0, #0]
 8008a44:	9303      	str	r3, [sp, #12]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7f7 fbcc 	bl	80001e4 <strlen>
 8008a4c:	9b03      	ldr	r3, [sp, #12]
 8008a4e:	9001      	str	r0, [sp, #4]
 8008a50:	4403      	add	r3, r0
 8008a52:	f04f 0b00 	mov.w	fp, #0
 8008a56:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8008a5a:	9307      	str	r3, [sp, #28]
 8008a5c:	f8da 3000 	ldr.w	r3, [sl]
 8008a60:	3302      	adds	r3, #2
 8008a62:	461f      	mov	r7, r3
 8008a64:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008a68:	2830      	cmp	r0, #48	; 0x30
 8008a6a:	d06c      	beq.n	8008b46 <__gethex+0x118>
 8008a6c:	f7ff ffca 	bl	8008a04 <__hexdig_fun>
 8008a70:	4604      	mov	r4, r0
 8008a72:	2800      	cmp	r0, #0
 8008a74:	d16a      	bne.n	8008b4c <__gethex+0x11e>
 8008a76:	9a01      	ldr	r2, [sp, #4]
 8008a78:	9903      	ldr	r1, [sp, #12]
 8008a7a:	4638      	mov	r0, r7
 8008a7c:	f001 fc40 	bl	800a300 <strncmp>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d166      	bne.n	8008b52 <__gethex+0x124>
 8008a84:	9b01      	ldr	r3, [sp, #4]
 8008a86:	5cf8      	ldrb	r0, [r7, r3]
 8008a88:	18fe      	adds	r6, r7, r3
 8008a8a:	f7ff ffbb 	bl	8008a04 <__hexdig_fun>
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d062      	beq.n	8008b58 <__gethex+0x12a>
 8008a92:	4633      	mov	r3, r6
 8008a94:	7818      	ldrb	r0, [r3, #0]
 8008a96:	2830      	cmp	r0, #48	; 0x30
 8008a98:	461f      	mov	r7, r3
 8008a9a:	f103 0301 	add.w	r3, r3, #1
 8008a9e:	d0f9      	beq.n	8008a94 <__gethex+0x66>
 8008aa0:	f7ff ffb0 	bl	8008a04 <__hexdig_fun>
 8008aa4:	fab0 f580 	clz	r5, r0
 8008aa8:	096d      	lsrs	r5, r5, #5
 8008aaa:	4634      	mov	r4, r6
 8008aac:	f04f 0b01 	mov.w	fp, #1
 8008ab0:	463a      	mov	r2, r7
 8008ab2:	4616      	mov	r6, r2
 8008ab4:	3201      	adds	r2, #1
 8008ab6:	7830      	ldrb	r0, [r6, #0]
 8008ab8:	f7ff ffa4 	bl	8008a04 <__hexdig_fun>
 8008abc:	2800      	cmp	r0, #0
 8008abe:	d1f8      	bne.n	8008ab2 <__gethex+0x84>
 8008ac0:	9a01      	ldr	r2, [sp, #4]
 8008ac2:	9903      	ldr	r1, [sp, #12]
 8008ac4:	4630      	mov	r0, r6
 8008ac6:	f001 fc1b 	bl	800a300 <strncmp>
 8008aca:	b950      	cbnz	r0, 8008ae2 <__gethex+0xb4>
 8008acc:	b954      	cbnz	r4, 8008ae4 <__gethex+0xb6>
 8008ace:	9b01      	ldr	r3, [sp, #4]
 8008ad0:	18f4      	adds	r4, r6, r3
 8008ad2:	4622      	mov	r2, r4
 8008ad4:	4616      	mov	r6, r2
 8008ad6:	3201      	adds	r2, #1
 8008ad8:	7830      	ldrb	r0, [r6, #0]
 8008ada:	f7ff ff93 	bl	8008a04 <__hexdig_fun>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	d1f8      	bne.n	8008ad4 <__gethex+0xa6>
 8008ae2:	b10c      	cbz	r4, 8008ae8 <__gethex+0xba>
 8008ae4:	1ba4      	subs	r4, r4, r6
 8008ae6:	00a4      	lsls	r4, r4, #2
 8008ae8:	7833      	ldrb	r3, [r6, #0]
 8008aea:	2b50      	cmp	r3, #80	; 0x50
 8008aec:	d001      	beq.n	8008af2 <__gethex+0xc4>
 8008aee:	2b70      	cmp	r3, #112	; 0x70
 8008af0:	d140      	bne.n	8008b74 <__gethex+0x146>
 8008af2:	7873      	ldrb	r3, [r6, #1]
 8008af4:	2b2b      	cmp	r3, #43	; 0x2b
 8008af6:	d031      	beq.n	8008b5c <__gethex+0x12e>
 8008af8:	2b2d      	cmp	r3, #45	; 0x2d
 8008afa:	d033      	beq.n	8008b64 <__gethex+0x136>
 8008afc:	1c71      	adds	r1, r6, #1
 8008afe:	f04f 0900 	mov.w	r9, #0
 8008b02:	7808      	ldrb	r0, [r1, #0]
 8008b04:	f7ff ff7e 	bl	8008a04 <__hexdig_fun>
 8008b08:	1e43      	subs	r3, r0, #1
 8008b0a:	b2db      	uxtb	r3, r3
 8008b0c:	2b18      	cmp	r3, #24
 8008b0e:	d831      	bhi.n	8008b74 <__gethex+0x146>
 8008b10:	f1a0 0210 	sub.w	r2, r0, #16
 8008b14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008b18:	f7ff ff74 	bl	8008a04 <__hexdig_fun>
 8008b1c:	1e43      	subs	r3, r0, #1
 8008b1e:	b2db      	uxtb	r3, r3
 8008b20:	2b18      	cmp	r3, #24
 8008b22:	d922      	bls.n	8008b6a <__gethex+0x13c>
 8008b24:	f1b9 0f00 	cmp.w	r9, #0
 8008b28:	d000      	beq.n	8008b2c <__gethex+0xfe>
 8008b2a:	4252      	negs	r2, r2
 8008b2c:	4414      	add	r4, r2
 8008b2e:	f8ca 1000 	str.w	r1, [sl]
 8008b32:	b30d      	cbz	r5, 8008b78 <__gethex+0x14a>
 8008b34:	f1bb 0f00 	cmp.w	fp, #0
 8008b38:	bf0c      	ite	eq
 8008b3a:	2706      	moveq	r7, #6
 8008b3c:	2700      	movne	r7, #0
 8008b3e:	4638      	mov	r0, r7
 8008b40:	b00b      	add	sp, #44	; 0x2c
 8008b42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b46:	f10b 0b01 	add.w	fp, fp, #1
 8008b4a:	e78a      	b.n	8008a62 <__gethex+0x34>
 8008b4c:	2500      	movs	r5, #0
 8008b4e:	462c      	mov	r4, r5
 8008b50:	e7ae      	b.n	8008ab0 <__gethex+0x82>
 8008b52:	463e      	mov	r6, r7
 8008b54:	2501      	movs	r5, #1
 8008b56:	e7c7      	b.n	8008ae8 <__gethex+0xba>
 8008b58:	4604      	mov	r4, r0
 8008b5a:	e7fb      	b.n	8008b54 <__gethex+0x126>
 8008b5c:	f04f 0900 	mov.w	r9, #0
 8008b60:	1cb1      	adds	r1, r6, #2
 8008b62:	e7ce      	b.n	8008b02 <__gethex+0xd4>
 8008b64:	f04f 0901 	mov.w	r9, #1
 8008b68:	e7fa      	b.n	8008b60 <__gethex+0x132>
 8008b6a:	230a      	movs	r3, #10
 8008b6c:	fb03 0202 	mla	r2, r3, r2, r0
 8008b70:	3a10      	subs	r2, #16
 8008b72:	e7cf      	b.n	8008b14 <__gethex+0xe6>
 8008b74:	4631      	mov	r1, r6
 8008b76:	e7da      	b.n	8008b2e <__gethex+0x100>
 8008b78:	1bf3      	subs	r3, r6, r7
 8008b7a:	3b01      	subs	r3, #1
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	2b07      	cmp	r3, #7
 8008b80:	dc49      	bgt.n	8008c16 <__gethex+0x1e8>
 8008b82:	9802      	ldr	r0, [sp, #8]
 8008b84:	f000 fa71 	bl	800906a <_Balloc>
 8008b88:	9b01      	ldr	r3, [sp, #4]
 8008b8a:	f100 0914 	add.w	r9, r0, #20
 8008b8e:	f04f 0b00 	mov.w	fp, #0
 8008b92:	f1c3 0301 	rsb	r3, r3, #1
 8008b96:	4605      	mov	r5, r0
 8008b98:	f8cd 9010 	str.w	r9, [sp, #16]
 8008b9c:	46da      	mov	sl, fp
 8008b9e:	9308      	str	r3, [sp, #32]
 8008ba0:	42b7      	cmp	r7, r6
 8008ba2:	d33b      	bcc.n	8008c1c <__gethex+0x1ee>
 8008ba4:	9804      	ldr	r0, [sp, #16]
 8008ba6:	f840 ab04 	str.w	sl, [r0], #4
 8008baa:	eba0 0009 	sub.w	r0, r0, r9
 8008bae:	1080      	asrs	r0, r0, #2
 8008bb0:	6128      	str	r0, [r5, #16]
 8008bb2:	0147      	lsls	r7, r0, #5
 8008bb4:	4650      	mov	r0, sl
 8008bb6:	f000 fb1c 	bl	80091f2 <__hi0bits>
 8008bba:	f8d8 6000 	ldr.w	r6, [r8]
 8008bbe:	1a3f      	subs	r7, r7, r0
 8008bc0:	42b7      	cmp	r7, r6
 8008bc2:	dd64      	ble.n	8008c8e <__gethex+0x260>
 8008bc4:	1bbf      	subs	r7, r7, r6
 8008bc6:	4639      	mov	r1, r7
 8008bc8:	4628      	mov	r0, r5
 8008bca:	f000 fe2b 	bl	8009824 <__any_on>
 8008bce:	4682      	mov	sl, r0
 8008bd0:	b178      	cbz	r0, 8008bf2 <__gethex+0x1c4>
 8008bd2:	1e7b      	subs	r3, r7, #1
 8008bd4:	1159      	asrs	r1, r3, #5
 8008bd6:	f003 021f 	and.w	r2, r3, #31
 8008bda:	f04f 0a01 	mov.w	sl, #1
 8008bde:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008be2:	fa0a f202 	lsl.w	r2, sl, r2
 8008be6:	420a      	tst	r2, r1
 8008be8:	d003      	beq.n	8008bf2 <__gethex+0x1c4>
 8008bea:	4553      	cmp	r3, sl
 8008bec:	dc46      	bgt.n	8008c7c <__gethex+0x24e>
 8008bee:	f04f 0a02 	mov.w	sl, #2
 8008bf2:	4639      	mov	r1, r7
 8008bf4:	4628      	mov	r0, r5
 8008bf6:	f7ff fecb 	bl	8008990 <rshift>
 8008bfa:	443c      	add	r4, r7
 8008bfc:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008c00:	42a3      	cmp	r3, r4
 8008c02:	da52      	bge.n	8008caa <__gethex+0x27c>
 8008c04:	4629      	mov	r1, r5
 8008c06:	9802      	ldr	r0, [sp, #8]
 8008c08:	f000 fa63 	bl	80090d2 <_Bfree>
 8008c0c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c0e:	2300      	movs	r3, #0
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	27a3      	movs	r7, #163	; 0xa3
 8008c14:	e793      	b.n	8008b3e <__gethex+0x110>
 8008c16:	3101      	adds	r1, #1
 8008c18:	105b      	asrs	r3, r3, #1
 8008c1a:	e7b0      	b.n	8008b7e <__gethex+0x150>
 8008c1c:	1e73      	subs	r3, r6, #1
 8008c1e:	9305      	str	r3, [sp, #20]
 8008c20:	9a07      	ldr	r2, [sp, #28]
 8008c22:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008c26:	4293      	cmp	r3, r2
 8008c28:	d018      	beq.n	8008c5c <__gethex+0x22e>
 8008c2a:	f1bb 0f20 	cmp.w	fp, #32
 8008c2e:	d107      	bne.n	8008c40 <__gethex+0x212>
 8008c30:	9b04      	ldr	r3, [sp, #16]
 8008c32:	f8c3 a000 	str.w	sl, [r3]
 8008c36:	3304      	adds	r3, #4
 8008c38:	f04f 0a00 	mov.w	sl, #0
 8008c3c:	9304      	str	r3, [sp, #16]
 8008c3e:	46d3      	mov	fp, sl
 8008c40:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008c44:	f7ff fede 	bl	8008a04 <__hexdig_fun>
 8008c48:	f000 000f 	and.w	r0, r0, #15
 8008c4c:	fa00 f00b 	lsl.w	r0, r0, fp
 8008c50:	ea4a 0a00 	orr.w	sl, sl, r0
 8008c54:	f10b 0b04 	add.w	fp, fp, #4
 8008c58:	9b05      	ldr	r3, [sp, #20]
 8008c5a:	e00d      	b.n	8008c78 <__gethex+0x24a>
 8008c5c:	9b05      	ldr	r3, [sp, #20]
 8008c5e:	9a08      	ldr	r2, [sp, #32]
 8008c60:	4413      	add	r3, r2
 8008c62:	42bb      	cmp	r3, r7
 8008c64:	d3e1      	bcc.n	8008c2a <__gethex+0x1fc>
 8008c66:	4618      	mov	r0, r3
 8008c68:	9a01      	ldr	r2, [sp, #4]
 8008c6a:	9903      	ldr	r1, [sp, #12]
 8008c6c:	9309      	str	r3, [sp, #36]	; 0x24
 8008c6e:	f001 fb47 	bl	800a300 <strncmp>
 8008c72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c74:	2800      	cmp	r0, #0
 8008c76:	d1d8      	bne.n	8008c2a <__gethex+0x1fc>
 8008c78:	461e      	mov	r6, r3
 8008c7a:	e791      	b.n	8008ba0 <__gethex+0x172>
 8008c7c:	1eb9      	subs	r1, r7, #2
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 fdd0 	bl	8009824 <__any_on>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	d0b2      	beq.n	8008bee <__gethex+0x1c0>
 8008c88:	f04f 0a03 	mov.w	sl, #3
 8008c8c:	e7b1      	b.n	8008bf2 <__gethex+0x1c4>
 8008c8e:	da09      	bge.n	8008ca4 <__gethex+0x276>
 8008c90:	1bf7      	subs	r7, r6, r7
 8008c92:	4629      	mov	r1, r5
 8008c94:	463a      	mov	r2, r7
 8008c96:	9802      	ldr	r0, [sp, #8]
 8008c98:	f000 fbe6 	bl	8009468 <__lshift>
 8008c9c:	1be4      	subs	r4, r4, r7
 8008c9e:	4605      	mov	r5, r0
 8008ca0:	f100 0914 	add.w	r9, r0, #20
 8008ca4:	f04f 0a00 	mov.w	sl, #0
 8008ca8:	e7a8      	b.n	8008bfc <__gethex+0x1ce>
 8008caa:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008cae:	42a0      	cmp	r0, r4
 8008cb0:	dd6a      	ble.n	8008d88 <__gethex+0x35a>
 8008cb2:	1b04      	subs	r4, r0, r4
 8008cb4:	42a6      	cmp	r6, r4
 8008cb6:	dc2e      	bgt.n	8008d16 <__gethex+0x2e8>
 8008cb8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cbc:	2b02      	cmp	r3, #2
 8008cbe:	d022      	beq.n	8008d06 <__gethex+0x2d8>
 8008cc0:	2b03      	cmp	r3, #3
 8008cc2:	d024      	beq.n	8008d0e <__gethex+0x2e0>
 8008cc4:	2b01      	cmp	r3, #1
 8008cc6:	d115      	bne.n	8008cf4 <__gethex+0x2c6>
 8008cc8:	42a6      	cmp	r6, r4
 8008cca:	d113      	bne.n	8008cf4 <__gethex+0x2c6>
 8008ccc:	2e01      	cmp	r6, #1
 8008cce:	dc0b      	bgt.n	8008ce8 <__gethex+0x2ba>
 8008cd0:	9a06      	ldr	r2, [sp, #24]
 8008cd2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008cd6:	6013      	str	r3, [r2, #0]
 8008cd8:	2301      	movs	r3, #1
 8008cda:	612b      	str	r3, [r5, #16]
 8008cdc:	f8c9 3000 	str.w	r3, [r9]
 8008ce0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008ce2:	2762      	movs	r7, #98	; 0x62
 8008ce4:	601d      	str	r5, [r3, #0]
 8008ce6:	e72a      	b.n	8008b3e <__gethex+0x110>
 8008ce8:	1e71      	subs	r1, r6, #1
 8008cea:	4628      	mov	r0, r5
 8008cec:	f000 fd9a 	bl	8009824 <__any_on>
 8008cf0:	2800      	cmp	r0, #0
 8008cf2:	d1ed      	bne.n	8008cd0 <__gethex+0x2a2>
 8008cf4:	4629      	mov	r1, r5
 8008cf6:	9802      	ldr	r0, [sp, #8]
 8008cf8:	f000 f9eb 	bl	80090d2 <_Bfree>
 8008cfc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008cfe:	2300      	movs	r3, #0
 8008d00:	6013      	str	r3, [r2, #0]
 8008d02:	2750      	movs	r7, #80	; 0x50
 8008d04:	e71b      	b.n	8008b3e <__gethex+0x110>
 8008d06:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d0e1      	beq.n	8008cd0 <__gethex+0x2a2>
 8008d0c:	e7f2      	b.n	8008cf4 <__gethex+0x2c6>
 8008d0e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1dd      	bne.n	8008cd0 <__gethex+0x2a2>
 8008d14:	e7ee      	b.n	8008cf4 <__gethex+0x2c6>
 8008d16:	1e67      	subs	r7, r4, #1
 8008d18:	f1ba 0f00 	cmp.w	sl, #0
 8008d1c:	d131      	bne.n	8008d82 <__gethex+0x354>
 8008d1e:	b127      	cbz	r7, 8008d2a <__gethex+0x2fc>
 8008d20:	4639      	mov	r1, r7
 8008d22:	4628      	mov	r0, r5
 8008d24:	f000 fd7e 	bl	8009824 <__any_on>
 8008d28:	4682      	mov	sl, r0
 8008d2a:	117a      	asrs	r2, r7, #5
 8008d2c:	2301      	movs	r3, #1
 8008d2e:	f007 071f 	and.w	r7, r7, #31
 8008d32:	fa03 f707 	lsl.w	r7, r3, r7
 8008d36:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8008d3a:	4621      	mov	r1, r4
 8008d3c:	421f      	tst	r7, r3
 8008d3e:	4628      	mov	r0, r5
 8008d40:	bf18      	it	ne
 8008d42:	f04a 0a02 	orrne.w	sl, sl, #2
 8008d46:	1b36      	subs	r6, r6, r4
 8008d48:	f7ff fe22 	bl	8008990 <rshift>
 8008d4c:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8008d50:	2702      	movs	r7, #2
 8008d52:	f1ba 0f00 	cmp.w	sl, #0
 8008d56:	d048      	beq.n	8008dea <__gethex+0x3bc>
 8008d58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008d5c:	2b02      	cmp	r3, #2
 8008d5e:	d015      	beq.n	8008d8c <__gethex+0x35e>
 8008d60:	2b03      	cmp	r3, #3
 8008d62:	d017      	beq.n	8008d94 <__gethex+0x366>
 8008d64:	2b01      	cmp	r3, #1
 8008d66:	d109      	bne.n	8008d7c <__gethex+0x34e>
 8008d68:	f01a 0f02 	tst.w	sl, #2
 8008d6c:	d006      	beq.n	8008d7c <__gethex+0x34e>
 8008d6e:	f8d9 3000 	ldr.w	r3, [r9]
 8008d72:	ea4a 0a03 	orr.w	sl, sl, r3
 8008d76:	f01a 0f01 	tst.w	sl, #1
 8008d7a:	d10e      	bne.n	8008d9a <__gethex+0x36c>
 8008d7c:	f047 0710 	orr.w	r7, r7, #16
 8008d80:	e033      	b.n	8008dea <__gethex+0x3bc>
 8008d82:	f04f 0a01 	mov.w	sl, #1
 8008d86:	e7d0      	b.n	8008d2a <__gethex+0x2fc>
 8008d88:	2701      	movs	r7, #1
 8008d8a:	e7e2      	b.n	8008d52 <__gethex+0x324>
 8008d8c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d8e:	f1c3 0301 	rsb	r3, r3, #1
 8008d92:	9315      	str	r3, [sp, #84]	; 0x54
 8008d94:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d0f0      	beq.n	8008d7c <__gethex+0x34e>
 8008d9a:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8008d9e:	f105 0314 	add.w	r3, r5, #20
 8008da2:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 8008da6:	eb03 010a 	add.w	r1, r3, sl
 8008daa:	f04f 0c00 	mov.w	ip, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008db4:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008db8:	d01c      	beq.n	8008df4 <__gethex+0x3c6>
 8008dba:	3201      	adds	r2, #1
 8008dbc:	6002      	str	r2, [r0, #0]
 8008dbe:	2f02      	cmp	r7, #2
 8008dc0:	f105 0314 	add.w	r3, r5, #20
 8008dc4:	d138      	bne.n	8008e38 <__gethex+0x40a>
 8008dc6:	f8d8 2000 	ldr.w	r2, [r8]
 8008dca:	3a01      	subs	r2, #1
 8008dcc:	42b2      	cmp	r2, r6
 8008dce:	d10a      	bne.n	8008de6 <__gethex+0x3b8>
 8008dd0:	1171      	asrs	r1, r6, #5
 8008dd2:	2201      	movs	r2, #1
 8008dd4:	f006 061f 	and.w	r6, r6, #31
 8008dd8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008ddc:	fa02 f606 	lsl.w	r6, r2, r6
 8008de0:	421e      	tst	r6, r3
 8008de2:	bf18      	it	ne
 8008de4:	4617      	movne	r7, r2
 8008de6:	f047 0720 	orr.w	r7, r7, #32
 8008dea:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008dec:	601d      	str	r5, [r3, #0]
 8008dee:	9b06      	ldr	r3, [sp, #24]
 8008df0:	601c      	str	r4, [r3, #0]
 8008df2:	e6a4      	b.n	8008b3e <__gethex+0x110>
 8008df4:	4299      	cmp	r1, r3
 8008df6:	f843 cc04 	str.w	ip, [r3, #-4]
 8008dfa:	d8d8      	bhi.n	8008dae <__gethex+0x380>
 8008dfc:	68ab      	ldr	r3, [r5, #8]
 8008dfe:	4599      	cmp	r9, r3
 8008e00:	db12      	blt.n	8008e28 <__gethex+0x3fa>
 8008e02:	6869      	ldr	r1, [r5, #4]
 8008e04:	9802      	ldr	r0, [sp, #8]
 8008e06:	3101      	adds	r1, #1
 8008e08:	f000 f92f 	bl	800906a <_Balloc>
 8008e0c:	692a      	ldr	r2, [r5, #16]
 8008e0e:	3202      	adds	r2, #2
 8008e10:	f105 010c 	add.w	r1, r5, #12
 8008e14:	4683      	mov	fp, r0
 8008e16:	0092      	lsls	r2, r2, #2
 8008e18:	300c      	adds	r0, #12
 8008e1a:	f000 f91b 	bl	8009054 <memcpy>
 8008e1e:	4629      	mov	r1, r5
 8008e20:	9802      	ldr	r0, [sp, #8]
 8008e22:	f000 f956 	bl	80090d2 <_Bfree>
 8008e26:	465d      	mov	r5, fp
 8008e28:	692b      	ldr	r3, [r5, #16]
 8008e2a:	1c5a      	adds	r2, r3, #1
 8008e2c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008e30:	612a      	str	r2, [r5, #16]
 8008e32:	2201      	movs	r2, #1
 8008e34:	615a      	str	r2, [r3, #20]
 8008e36:	e7c2      	b.n	8008dbe <__gethex+0x390>
 8008e38:	692a      	ldr	r2, [r5, #16]
 8008e3a:	454a      	cmp	r2, r9
 8008e3c:	dd0b      	ble.n	8008e56 <__gethex+0x428>
 8008e3e:	2101      	movs	r1, #1
 8008e40:	4628      	mov	r0, r5
 8008e42:	f7ff fda5 	bl	8008990 <rshift>
 8008e46:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008e4a:	3401      	adds	r4, #1
 8008e4c:	42a3      	cmp	r3, r4
 8008e4e:	f6ff aed9 	blt.w	8008c04 <__gethex+0x1d6>
 8008e52:	2701      	movs	r7, #1
 8008e54:	e7c7      	b.n	8008de6 <__gethex+0x3b8>
 8008e56:	f016 061f 	ands.w	r6, r6, #31
 8008e5a:	d0fa      	beq.n	8008e52 <__gethex+0x424>
 8008e5c:	449a      	add	sl, r3
 8008e5e:	f1c6 0620 	rsb	r6, r6, #32
 8008e62:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8008e66:	f000 f9c4 	bl	80091f2 <__hi0bits>
 8008e6a:	42b0      	cmp	r0, r6
 8008e6c:	dbe7      	blt.n	8008e3e <__gethex+0x410>
 8008e6e:	e7f0      	b.n	8008e52 <__gethex+0x424>

08008e70 <L_shift>:
 8008e70:	f1c2 0208 	rsb	r2, r2, #8
 8008e74:	0092      	lsls	r2, r2, #2
 8008e76:	b570      	push	{r4, r5, r6, lr}
 8008e78:	f1c2 0620 	rsb	r6, r2, #32
 8008e7c:	6843      	ldr	r3, [r0, #4]
 8008e7e:	6804      	ldr	r4, [r0, #0]
 8008e80:	fa03 f506 	lsl.w	r5, r3, r6
 8008e84:	432c      	orrs	r4, r5
 8008e86:	40d3      	lsrs	r3, r2
 8008e88:	6004      	str	r4, [r0, #0]
 8008e8a:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e8e:	4288      	cmp	r0, r1
 8008e90:	d3f4      	bcc.n	8008e7c <L_shift+0xc>
 8008e92:	bd70      	pop	{r4, r5, r6, pc}

08008e94 <__match>:
 8008e94:	b530      	push	{r4, r5, lr}
 8008e96:	6803      	ldr	r3, [r0, #0]
 8008e98:	3301      	adds	r3, #1
 8008e9a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e9e:	b914      	cbnz	r4, 8008ea6 <__match+0x12>
 8008ea0:	6003      	str	r3, [r0, #0]
 8008ea2:	2001      	movs	r0, #1
 8008ea4:	bd30      	pop	{r4, r5, pc}
 8008ea6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008eaa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008eae:	2d19      	cmp	r5, #25
 8008eb0:	bf98      	it	ls
 8008eb2:	3220      	addls	r2, #32
 8008eb4:	42a2      	cmp	r2, r4
 8008eb6:	d0f0      	beq.n	8008e9a <__match+0x6>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e7f3      	b.n	8008ea4 <__match+0x10>

08008ebc <__hexnan>:
 8008ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ec0:	680b      	ldr	r3, [r1, #0]
 8008ec2:	6801      	ldr	r1, [r0, #0]
 8008ec4:	115f      	asrs	r7, r3, #5
 8008ec6:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8008eca:	f013 031f 	ands.w	r3, r3, #31
 8008ece:	b087      	sub	sp, #28
 8008ed0:	bf18      	it	ne
 8008ed2:	3704      	addne	r7, #4
 8008ed4:	2500      	movs	r5, #0
 8008ed6:	1f3e      	subs	r6, r7, #4
 8008ed8:	4682      	mov	sl, r0
 8008eda:	4690      	mov	r8, r2
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	f847 5c04 	str.w	r5, [r7, #-4]
 8008ee2:	46b1      	mov	r9, r6
 8008ee4:	4634      	mov	r4, r6
 8008ee6:	9502      	str	r5, [sp, #8]
 8008ee8:	46ab      	mov	fp, r5
 8008eea:	784a      	ldrb	r2, [r1, #1]
 8008eec:	1c4b      	adds	r3, r1, #1
 8008eee:	9303      	str	r3, [sp, #12]
 8008ef0:	b342      	cbz	r2, 8008f44 <__hexnan+0x88>
 8008ef2:	4610      	mov	r0, r2
 8008ef4:	9105      	str	r1, [sp, #20]
 8008ef6:	9204      	str	r2, [sp, #16]
 8008ef8:	f7ff fd84 	bl	8008a04 <__hexdig_fun>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d143      	bne.n	8008f88 <__hexnan+0xcc>
 8008f00:	9a04      	ldr	r2, [sp, #16]
 8008f02:	9905      	ldr	r1, [sp, #20]
 8008f04:	2a20      	cmp	r2, #32
 8008f06:	d818      	bhi.n	8008f3a <__hexnan+0x7e>
 8008f08:	9b02      	ldr	r3, [sp, #8]
 8008f0a:	459b      	cmp	fp, r3
 8008f0c:	dd13      	ble.n	8008f36 <__hexnan+0x7a>
 8008f0e:	454c      	cmp	r4, r9
 8008f10:	d206      	bcs.n	8008f20 <__hexnan+0x64>
 8008f12:	2d07      	cmp	r5, #7
 8008f14:	dc04      	bgt.n	8008f20 <__hexnan+0x64>
 8008f16:	462a      	mov	r2, r5
 8008f18:	4649      	mov	r1, r9
 8008f1a:	4620      	mov	r0, r4
 8008f1c:	f7ff ffa8 	bl	8008e70 <L_shift>
 8008f20:	4544      	cmp	r4, r8
 8008f22:	d944      	bls.n	8008fae <__hexnan+0xf2>
 8008f24:	2300      	movs	r3, #0
 8008f26:	f1a4 0904 	sub.w	r9, r4, #4
 8008f2a:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f2e:	f8cd b008 	str.w	fp, [sp, #8]
 8008f32:	464c      	mov	r4, r9
 8008f34:	461d      	mov	r5, r3
 8008f36:	9903      	ldr	r1, [sp, #12]
 8008f38:	e7d7      	b.n	8008eea <__hexnan+0x2e>
 8008f3a:	2a29      	cmp	r2, #41	; 0x29
 8008f3c:	d14a      	bne.n	8008fd4 <__hexnan+0x118>
 8008f3e:	3102      	adds	r1, #2
 8008f40:	f8ca 1000 	str.w	r1, [sl]
 8008f44:	f1bb 0f00 	cmp.w	fp, #0
 8008f48:	d044      	beq.n	8008fd4 <__hexnan+0x118>
 8008f4a:	454c      	cmp	r4, r9
 8008f4c:	d206      	bcs.n	8008f5c <__hexnan+0xa0>
 8008f4e:	2d07      	cmp	r5, #7
 8008f50:	dc04      	bgt.n	8008f5c <__hexnan+0xa0>
 8008f52:	462a      	mov	r2, r5
 8008f54:	4649      	mov	r1, r9
 8008f56:	4620      	mov	r0, r4
 8008f58:	f7ff ff8a 	bl	8008e70 <L_shift>
 8008f5c:	4544      	cmp	r4, r8
 8008f5e:	d928      	bls.n	8008fb2 <__hexnan+0xf6>
 8008f60:	4643      	mov	r3, r8
 8008f62:	f854 2b04 	ldr.w	r2, [r4], #4
 8008f66:	f843 2b04 	str.w	r2, [r3], #4
 8008f6a:	42a6      	cmp	r6, r4
 8008f6c:	d2f9      	bcs.n	8008f62 <__hexnan+0xa6>
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f843 2b04 	str.w	r2, [r3], #4
 8008f74:	429e      	cmp	r6, r3
 8008f76:	d2fb      	bcs.n	8008f70 <__hexnan+0xb4>
 8008f78:	6833      	ldr	r3, [r6, #0]
 8008f7a:	b91b      	cbnz	r3, 8008f84 <__hexnan+0xc8>
 8008f7c:	4546      	cmp	r6, r8
 8008f7e:	d127      	bne.n	8008fd0 <__hexnan+0x114>
 8008f80:	2301      	movs	r3, #1
 8008f82:	6033      	str	r3, [r6, #0]
 8008f84:	2005      	movs	r0, #5
 8008f86:	e026      	b.n	8008fd6 <__hexnan+0x11a>
 8008f88:	3501      	adds	r5, #1
 8008f8a:	2d08      	cmp	r5, #8
 8008f8c:	f10b 0b01 	add.w	fp, fp, #1
 8008f90:	dd06      	ble.n	8008fa0 <__hexnan+0xe4>
 8008f92:	4544      	cmp	r4, r8
 8008f94:	d9cf      	bls.n	8008f36 <__hexnan+0x7a>
 8008f96:	2300      	movs	r3, #0
 8008f98:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f9c:	2501      	movs	r5, #1
 8008f9e:	3c04      	subs	r4, #4
 8008fa0:	6822      	ldr	r2, [r4, #0]
 8008fa2:	f000 000f 	and.w	r0, r0, #15
 8008fa6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008faa:	6020      	str	r0, [r4, #0]
 8008fac:	e7c3      	b.n	8008f36 <__hexnan+0x7a>
 8008fae:	2508      	movs	r5, #8
 8008fb0:	e7c1      	b.n	8008f36 <__hexnan+0x7a>
 8008fb2:	9b01      	ldr	r3, [sp, #4]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d0df      	beq.n	8008f78 <__hexnan+0xbc>
 8008fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8008fbc:	f1c3 0320 	rsb	r3, r3, #32
 8008fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8008fc4:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8008fc8:	401a      	ands	r2, r3
 8008fca:	f847 2c04 	str.w	r2, [r7, #-4]
 8008fce:	e7d3      	b.n	8008f78 <__hexnan+0xbc>
 8008fd0:	3e04      	subs	r6, #4
 8008fd2:	e7d1      	b.n	8008f78 <__hexnan+0xbc>
 8008fd4:	2004      	movs	r0, #4
 8008fd6:	b007      	add	sp, #28
 8008fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008fdc <__locale_ctype_ptr_l>:
 8008fdc:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8008fe0:	4770      	bx	lr
	...

08008fe4 <__locale_ctype_ptr>:
 8008fe4:	4b04      	ldr	r3, [pc, #16]	; (8008ff8 <__locale_ctype_ptr+0x14>)
 8008fe6:	4a05      	ldr	r2, [pc, #20]	; (8008ffc <__locale_ctype_ptr+0x18>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	6a1b      	ldr	r3, [r3, #32]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	bf08      	it	eq
 8008ff0:	4613      	moveq	r3, r2
 8008ff2:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8008ff6:	4770      	bx	lr
 8008ff8:	20000014 	.word	0x20000014
 8008ffc:	20000078 	.word	0x20000078

08009000 <__localeconv_l>:
 8009000:	30f0      	adds	r0, #240	; 0xf0
 8009002:	4770      	bx	lr

08009004 <_localeconv_r>:
 8009004:	4b04      	ldr	r3, [pc, #16]	; (8009018 <_localeconv_r+0x14>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	6a18      	ldr	r0, [r3, #32]
 800900a:	4b04      	ldr	r3, [pc, #16]	; (800901c <_localeconv_r+0x18>)
 800900c:	2800      	cmp	r0, #0
 800900e:	bf08      	it	eq
 8009010:	4618      	moveq	r0, r3
 8009012:	30f0      	adds	r0, #240	; 0xf0
 8009014:	4770      	bx	lr
 8009016:	bf00      	nop
 8009018:	20000014 	.word	0x20000014
 800901c:	20000078 	.word	0x20000078

08009020 <malloc>:
 8009020:	4b02      	ldr	r3, [pc, #8]	; (800902c <malloc+0xc>)
 8009022:	4601      	mov	r1, r0
 8009024:	6818      	ldr	r0, [r3, #0]
 8009026:	f000 bc7b 	b.w	8009920 <_malloc_r>
 800902a:	bf00      	nop
 800902c:	20000014 	.word	0x20000014

08009030 <__ascii_mbtowc>:
 8009030:	b082      	sub	sp, #8
 8009032:	b901      	cbnz	r1, 8009036 <__ascii_mbtowc+0x6>
 8009034:	a901      	add	r1, sp, #4
 8009036:	b142      	cbz	r2, 800904a <__ascii_mbtowc+0x1a>
 8009038:	b14b      	cbz	r3, 800904e <__ascii_mbtowc+0x1e>
 800903a:	7813      	ldrb	r3, [r2, #0]
 800903c:	600b      	str	r3, [r1, #0]
 800903e:	7812      	ldrb	r2, [r2, #0]
 8009040:	1c10      	adds	r0, r2, #0
 8009042:	bf18      	it	ne
 8009044:	2001      	movne	r0, #1
 8009046:	b002      	add	sp, #8
 8009048:	4770      	bx	lr
 800904a:	4610      	mov	r0, r2
 800904c:	e7fb      	b.n	8009046 <__ascii_mbtowc+0x16>
 800904e:	f06f 0001 	mvn.w	r0, #1
 8009052:	e7f8      	b.n	8009046 <__ascii_mbtowc+0x16>

08009054 <memcpy>:
 8009054:	b510      	push	{r4, lr}
 8009056:	1e43      	subs	r3, r0, #1
 8009058:	440a      	add	r2, r1
 800905a:	4291      	cmp	r1, r2
 800905c:	d100      	bne.n	8009060 <memcpy+0xc>
 800905e:	bd10      	pop	{r4, pc}
 8009060:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009064:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009068:	e7f7      	b.n	800905a <memcpy+0x6>

0800906a <_Balloc>:
 800906a:	b570      	push	{r4, r5, r6, lr}
 800906c:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800906e:	4604      	mov	r4, r0
 8009070:	460e      	mov	r6, r1
 8009072:	b93d      	cbnz	r5, 8009084 <_Balloc+0x1a>
 8009074:	2010      	movs	r0, #16
 8009076:	f7ff ffd3 	bl	8009020 <malloc>
 800907a:	6260      	str	r0, [r4, #36]	; 0x24
 800907c:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009080:	6005      	str	r5, [r0, #0]
 8009082:	60c5      	str	r5, [r0, #12]
 8009084:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009086:	68eb      	ldr	r3, [r5, #12]
 8009088:	b183      	cbz	r3, 80090ac <_Balloc+0x42>
 800908a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8009092:	b9b8      	cbnz	r0, 80090c4 <_Balloc+0x5a>
 8009094:	2101      	movs	r1, #1
 8009096:	fa01 f506 	lsl.w	r5, r1, r6
 800909a:	1d6a      	adds	r2, r5, #5
 800909c:	0092      	lsls	r2, r2, #2
 800909e:	4620      	mov	r0, r4
 80090a0:	f000 fbe1 	bl	8009866 <_calloc_r>
 80090a4:	b160      	cbz	r0, 80090c0 <_Balloc+0x56>
 80090a6:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80090aa:	e00e      	b.n	80090ca <_Balloc+0x60>
 80090ac:	2221      	movs	r2, #33	; 0x21
 80090ae:	2104      	movs	r1, #4
 80090b0:	4620      	mov	r0, r4
 80090b2:	f000 fbd8 	bl	8009866 <_calloc_r>
 80090b6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090b8:	60e8      	str	r0, [r5, #12]
 80090ba:	68db      	ldr	r3, [r3, #12]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1e4      	bne.n	800908a <_Balloc+0x20>
 80090c0:	2000      	movs	r0, #0
 80090c2:	bd70      	pop	{r4, r5, r6, pc}
 80090c4:	6802      	ldr	r2, [r0, #0]
 80090c6:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80090ca:	2300      	movs	r3, #0
 80090cc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090d0:	e7f7      	b.n	80090c2 <_Balloc+0x58>

080090d2 <_Bfree>:
 80090d2:	b570      	push	{r4, r5, r6, lr}
 80090d4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80090d6:	4606      	mov	r6, r0
 80090d8:	460d      	mov	r5, r1
 80090da:	b93c      	cbnz	r4, 80090ec <_Bfree+0x1a>
 80090dc:	2010      	movs	r0, #16
 80090de:	f7ff ff9f 	bl	8009020 <malloc>
 80090e2:	6270      	str	r0, [r6, #36]	; 0x24
 80090e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80090e8:	6004      	str	r4, [r0, #0]
 80090ea:	60c4      	str	r4, [r0, #12]
 80090ec:	b13d      	cbz	r5, 80090fe <_Bfree+0x2c>
 80090ee:	6a73      	ldr	r3, [r6, #36]	; 0x24
 80090f0:	686a      	ldr	r2, [r5, #4]
 80090f2:	68db      	ldr	r3, [r3, #12]
 80090f4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090f8:	6029      	str	r1, [r5, #0]
 80090fa:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 80090fe:	bd70      	pop	{r4, r5, r6, pc}

08009100 <__multadd>:
 8009100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009104:	690d      	ldr	r5, [r1, #16]
 8009106:	461f      	mov	r7, r3
 8009108:	4606      	mov	r6, r0
 800910a:	460c      	mov	r4, r1
 800910c:	f101 0c14 	add.w	ip, r1, #20
 8009110:	2300      	movs	r3, #0
 8009112:	f8dc 0000 	ldr.w	r0, [ip]
 8009116:	b281      	uxth	r1, r0
 8009118:	fb02 7101 	mla	r1, r2, r1, r7
 800911c:	0c0f      	lsrs	r7, r1, #16
 800911e:	0c00      	lsrs	r0, r0, #16
 8009120:	fb02 7000 	mla	r0, r2, r0, r7
 8009124:	b289      	uxth	r1, r1
 8009126:	3301      	adds	r3, #1
 8009128:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800912c:	429d      	cmp	r5, r3
 800912e:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8009132:	f84c 1b04 	str.w	r1, [ip], #4
 8009136:	dcec      	bgt.n	8009112 <__multadd+0x12>
 8009138:	b1d7      	cbz	r7, 8009170 <__multadd+0x70>
 800913a:	68a3      	ldr	r3, [r4, #8]
 800913c:	42ab      	cmp	r3, r5
 800913e:	dc12      	bgt.n	8009166 <__multadd+0x66>
 8009140:	6861      	ldr	r1, [r4, #4]
 8009142:	4630      	mov	r0, r6
 8009144:	3101      	adds	r1, #1
 8009146:	f7ff ff90 	bl	800906a <_Balloc>
 800914a:	6922      	ldr	r2, [r4, #16]
 800914c:	3202      	adds	r2, #2
 800914e:	f104 010c 	add.w	r1, r4, #12
 8009152:	4680      	mov	r8, r0
 8009154:	0092      	lsls	r2, r2, #2
 8009156:	300c      	adds	r0, #12
 8009158:	f7ff ff7c 	bl	8009054 <memcpy>
 800915c:	4621      	mov	r1, r4
 800915e:	4630      	mov	r0, r6
 8009160:	f7ff ffb7 	bl	80090d2 <_Bfree>
 8009164:	4644      	mov	r4, r8
 8009166:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800916a:	3501      	adds	r5, #1
 800916c:	615f      	str	r7, [r3, #20]
 800916e:	6125      	str	r5, [r4, #16]
 8009170:	4620      	mov	r0, r4
 8009172:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009176 <__s2b>:
 8009176:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800917a:	460c      	mov	r4, r1
 800917c:	4615      	mov	r5, r2
 800917e:	461f      	mov	r7, r3
 8009180:	2209      	movs	r2, #9
 8009182:	3308      	adds	r3, #8
 8009184:	4606      	mov	r6, r0
 8009186:	fb93 f3f2 	sdiv	r3, r3, r2
 800918a:	2100      	movs	r1, #0
 800918c:	2201      	movs	r2, #1
 800918e:	429a      	cmp	r2, r3
 8009190:	db20      	blt.n	80091d4 <__s2b+0x5e>
 8009192:	4630      	mov	r0, r6
 8009194:	f7ff ff69 	bl	800906a <_Balloc>
 8009198:	9b08      	ldr	r3, [sp, #32]
 800919a:	6143      	str	r3, [r0, #20]
 800919c:	2d09      	cmp	r5, #9
 800919e:	f04f 0301 	mov.w	r3, #1
 80091a2:	6103      	str	r3, [r0, #16]
 80091a4:	dd19      	ble.n	80091da <__s2b+0x64>
 80091a6:	f104 0809 	add.w	r8, r4, #9
 80091aa:	46c1      	mov	r9, r8
 80091ac:	442c      	add	r4, r5
 80091ae:	f819 3b01 	ldrb.w	r3, [r9], #1
 80091b2:	4601      	mov	r1, r0
 80091b4:	3b30      	subs	r3, #48	; 0x30
 80091b6:	220a      	movs	r2, #10
 80091b8:	4630      	mov	r0, r6
 80091ba:	f7ff ffa1 	bl	8009100 <__multadd>
 80091be:	45a1      	cmp	r9, r4
 80091c0:	d1f5      	bne.n	80091ae <__s2b+0x38>
 80091c2:	eb08 0405 	add.w	r4, r8, r5
 80091c6:	3c08      	subs	r4, #8
 80091c8:	1b2d      	subs	r5, r5, r4
 80091ca:	1963      	adds	r3, r4, r5
 80091cc:	42bb      	cmp	r3, r7
 80091ce:	db07      	blt.n	80091e0 <__s2b+0x6a>
 80091d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091d4:	0052      	lsls	r2, r2, #1
 80091d6:	3101      	adds	r1, #1
 80091d8:	e7d9      	b.n	800918e <__s2b+0x18>
 80091da:	340a      	adds	r4, #10
 80091dc:	2509      	movs	r5, #9
 80091de:	e7f3      	b.n	80091c8 <__s2b+0x52>
 80091e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80091e4:	4601      	mov	r1, r0
 80091e6:	3b30      	subs	r3, #48	; 0x30
 80091e8:	220a      	movs	r2, #10
 80091ea:	4630      	mov	r0, r6
 80091ec:	f7ff ff88 	bl	8009100 <__multadd>
 80091f0:	e7eb      	b.n	80091ca <__s2b+0x54>

080091f2 <__hi0bits>:
 80091f2:	0c02      	lsrs	r2, r0, #16
 80091f4:	0412      	lsls	r2, r2, #16
 80091f6:	4603      	mov	r3, r0
 80091f8:	b9b2      	cbnz	r2, 8009228 <__hi0bits+0x36>
 80091fa:	0403      	lsls	r3, r0, #16
 80091fc:	2010      	movs	r0, #16
 80091fe:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009202:	bf04      	itt	eq
 8009204:	021b      	lsleq	r3, r3, #8
 8009206:	3008      	addeq	r0, #8
 8009208:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800920c:	bf04      	itt	eq
 800920e:	011b      	lsleq	r3, r3, #4
 8009210:	3004      	addeq	r0, #4
 8009212:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009216:	bf04      	itt	eq
 8009218:	009b      	lsleq	r3, r3, #2
 800921a:	3002      	addeq	r0, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	db06      	blt.n	800922e <__hi0bits+0x3c>
 8009220:	005b      	lsls	r3, r3, #1
 8009222:	d503      	bpl.n	800922c <__hi0bits+0x3a>
 8009224:	3001      	adds	r0, #1
 8009226:	4770      	bx	lr
 8009228:	2000      	movs	r0, #0
 800922a:	e7e8      	b.n	80091fe <__hi0bits+0xc>
 800922c:	2020      	movs	r0, #32
 800922e:	4770      	bx	lr

08009230 <__lo0bits>:
 8009230:	6803      	ldr	r3, [r0, #0]
 8009232:	f013 0207 	ands.w	r2, r3, #7
 8009236:	4601      	mov	r1, r0
 8009238:	d00b      	beq.n	8009252 <__lo0bits+0x22>
 800923a:	07da      	lsls	r2, r3, #31
 800923c:	d423      	bmi.n	8009286 <__lo0bits+0x56>
 800923e:	0798      	lsls	r0, r3, #30
 8009240:	bf49      	itett	mi
 8009242:	085b      	lsrmi	r3, r3, #1
 8009244:	089b      	lsrpl	r3, r3, #2
 8009246:	2001      	movmi	r0, #1
 8009248:	600b      	strmi	r3, [r1, #0]
 800924a:	bf5c      	itt	pl
 800924c:	600b      	strpl	r3, [r1, #0]
 800924e:	2002      	movpl	r0, #2
 8009250:	4770      	bx	lr
 8009252:	b298      	uxth	r0, r3
 8009254:	b9a8      	cbnz	r0, 8009282 <__lo0bits+0x52>
 8009256:	0c1b      	lsrs	r3, r3, #16
 8009258:	2010      	movs	r0, #16
 800925a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800925e:	bf04      	itt	eq
 8009260:	0a1b      	lsreq	r3, r3, #8
 8009262:	3008      	addeq	r0, #8
 8009264:	071a      	lsls	r2, r3, #28
 8009266:	bf04      	itt	eq
 8009268:	091b      	lsreq	r3, r3, #4
 800926a:	3004      	addeq	r0, #4
 800926c:	079a      	lsls	r2, r3, #30
 800926e:	bf04      	itt	eq
 8009270:	089b      	lsreq	r3, r3, #2
 8009272:	3002      	addeq	r0, #2
 8009274:	07da      	lsls	r2, r3, #31
 8009276:	d402      	bmi.n	800927e <__lo0bits+0x4e>
 8009278:	085b      	lsrs	r3, r3, #1
 800927a:	d006      	beq.n	800928a <__lo0bits+0x5a>
 800927c:	3001      	adds	r0, #1
 800927e:	600b      	str	r3, [r1, #0]
 8009280:	4770      	bx	lr
 8009282:	4610      	mov	r0, r2
 8009284:	e7e9      	b.n	800925a <__lo0bits+0x2a>
 8009286:	2000      	movs	r0, #0
 8009288:	4770      	bx	lr
 800928a:	2020      	movs	r0, #32
 800928c:	4770      	bx	lr

0800928e <__i2b>:
 800928e:	b510      	push	{r4, lr}
 8009290:	460c      	mov	r4, r1
 8009292:	2101      	movs	r1, #1
 8009294:	f7ff fee9 	bl	800906a <_Balloc>
 8009298:	2201      	movs	r2, #1
 800929a:	6144      	str	r4, [r0, #20]
 800929c:	6102      	str	r2, [r0, #16]
 800929e:	bd10      	pop	{r4, pc}

080092a0 <__multiply>:
 80092a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a4:	4614      	mov	r4, r2
 80092a6:	690a      	ldr	r2, [r1, #16]
 80092a8:	6923      	ldr	r3, [r4, #16]
 80092aa:	429a      	cmp	r2, r3
 80092ac:	bfb8      	it	lt
 80092ae:	460b      	movlt	r3, r1
 80092b0:	4688      	mov	r8, r1
 80092b2:	bfbc      	itt	lt
 80092b4:	46a0      	movlt	r8, r4
 80092b6:	461c      	movlt	r4, r3
 80092b8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80092bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80092c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80092c4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80092c8:	eb07 0609 	add.w	r6, r7, r9
 80092cc:	42b3      	cmp	r3, r6
 80092ce:	bfb8      	it	lt
 80092d0:	3101      	addlt	r1, #1
 80092d2:	f7ff feca 	bl	800906a <_Balloc>
 80092d6:	f100 0514 	add.w	r5, r0, #20
 80092da:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80092de:	462b      	mov	r3, r5
 80092e0:	2200      	movs	r2, #0
 80092e2:	4573      	cmp	r3, lr
 80092e4:	d316      	bcc.n	8009314 <__multiply+0x74>
 80092e6:	f104 0214 	add.w	r2, r4, #20
 80092ea:	f108 0114 	add.w	r1, r8, #20
 80092ee:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 80092f2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 80092f6:	9300      	str	r3, [sp, #0]
 80092f8:	9b00      	ldr	r3, [sp, #0]
 80092fa:	9201      	str	r2, [sp, #4]
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d80c      	bhi.n	800931a <__multiply+0x7a>
 8009300:	2e00      	cmp	r6, #0
 8009302:	dd03      	ble.n	800930c <__multiply+0x6c>
 8009304:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009308:	2b00      	cmp	r3, #0
 800930a:	d05d      	beq.n	80093c8 <__multiply+0x128>
 800930c:	6106      	str	r6, [r0, #16]
 800930e:	b003      	add	sp, #12
 8009310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009314:	f843 2b04 	str.w	r2, [r3], #4
 8009318:	e7e3      	b.n	80092e2 <__multiply+0x42>
 800931a:	f8b2 b000 	ldrh.w	fp, [r2]
 800931e:	f1bb 0f00 	cmp.w	fp, #0
 8009322:	d023      	beq.n	800936c <__multiply+0xcc>
 8009324:	4689      	mov	r9, r1
 8009326:	46ac      	mov	ip, r5
 8009328:	f04f 0800 	mov.w	r8, #0
 800932c:	f859 4b04 	ldr.w	r4, [r9], #4
 8009330:	f8dc a000 	ldr.w	sl, [ip]
 8009334:	b2a3      	uxth	r3, r4
 8009336:	fa1f fa8a 	uxth.w	sl, sl
 800933a:	fb0b a303 	mla	r3, fp, r3, sl
 800933e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009342:	f8dc 4000 	ldr.w	r4, [ip]
 8009346:	4443      	add	r3, r8
 8009348:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800934c:	fb0b 840a 	mla	r4, fp, sl, r8
 8009350:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009354:	46e2      	mov	sl, ip
 8009356:	b29b      	uxth	r3, r3
 8009358:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800935c:	454f      	cmp	r7, r9
 800935e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009362:	f84a 3b04 	str.w	r3, [sl], #4
 8009366:	d82b      	bhi.n	80093c0 <__multiply+0x120>
 8009368:	f8cc 8004 	str.w	r8, [ip, #4]
 800936c:	9b01      	ldr	r3, [sp, #4]
 800936e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009372:	3204      	adds	r2, #4
 8009374:	f1ba 0f00 	cmp.w	sl, #0
 8009378:	d020      	beq.n	80093bc <__multiply+0x11c>
 800937a:	682b      	ldr	r3, [r5, #0]
 800937c:	4689      	mov	r9, r1
 800937e:	46a8      	mov	r8, r5
 8009380:	f04f 0b00 	mov.w	fp, #0
 8009384:	f8b9 c000 	ldrh.w	ip, [r9]
 8009388:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800938c:	fb0a 440c 	mla	r4, sl, ip, r4
 8009390:	445c      	add	r4, fp
 8009392:	46c4      	mov	ip, r8
 8009394:	b29b      	uxth	r3, r3
 8009396:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800939a:	f84c 3b04 	str.w	r3, [ip], #4
 800939e:	f859 3b04 	ldr.w	r3, [r9], #4
 80093a2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80093a6:	0c1b      	lsrs	r3, r3, #16
 80093a8:	fb0a b303 	mla	r3, sl, r3, fp
 80093ac:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80093b0:	454f      	cmp	r7, r9
 80093b2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80093b6:	d805      	bhi.n	80093c4 <__multiply+0x124>
 80093b8:	f8c8 3004 	str.w	r3, [r8, #4]
 80093bc:	3504      	adds	r5, #4
 80093be:	e79b      	b.n	80092f8 <__multiply+0x58>
 80093c0:	46d4      	mov	ip, sl
 80093c2:	e7b3      	b.n	800932c <__multiply+0x8c>
 80093c4:	46e0      	mov	r8, ip
 80093c6:	e7dd      	b.n	8009384 <__multiply+0xe4>
 80093c8:	3e01      	subs	r6, #1
 80093ca:	e799      	b.n	8009300 <__multiply+0x60>

080093cc <__pow5mult>:
 80093cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093d0:	4615      	mov	r5, r2
 80093d2:	f012 0203 	ands.w	r2, r2, #3
 80093d6:	4606      	mov	r6, r0
 80093d8:	460f      	mov	r7, r1
 80093da:	d007      	beq.n	80093ec <__pow5mult+0x20>
 80093dc:	3a01      	subs	r2, #1
 80093de:	4c21      	ldr	r4, [pc, #132]	; (8009464 <__pow5mult+0x98>)
 80093e0:	2300      	movs	r3, #0
 80093e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093e6:	f7ff fe8b 	bl	8009100 <__multadd>
 80093ea:	4607      	mov	r7, r0
 80093ec:	10ad      	asrs	r5, r5, #2
 80093ee:	d035      	beq.n	800945c <__pow5mult+0x90>
 80093f0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093f2:	b93c      	cbnz	r4, 8009404 <__pow5mult+0x38>
 80093f4:	2010      	movs	r0, #16
 80093f6:	f7ff fe13 	bl	8009020 <malloc>
 80093fa:	6270      	str	r0, [r6, #36]	; 0x24
 80093fc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009400:	6004      	str	r4, [r0, #0]
 8009402:	60c4      	str	r4, [r0, #12]
 8009404:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009408:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800940c:	b94c      	cbnz	r4, 8009422 <__pow5mult+0x56>
 800940e:	f240 2171 	movw	r1, #625	; 0x271
 8009412:	4630      	mov	r0, r6
 8009414:	f7ff ff3b 	bl	800928e <__i2b>
 8009418:	2300      	movs	r3, #0
 800941a:	f8c8 0008 	str.w	r0, [r8, #8]
 800941e:	4604      	mov	r4, r0
 8009420:	6003      	str	r3, [r0, #0]
 8009422:	f04f 0800 	mov.w	r8, #0
 8009426:	07eb      	lsls	r3, r5, #31
 8009428:	d50a      	bpl.n	8009440 <__pow5mult+0x74>
 800942a:	4639      	mov	r1, r7
 800942c:	4622      	mov	r2, r4
 800942e:	4630      	mov	r0, r6
 8009430:	f7ff ff36 	bl	80092a0 <__multiply>
 8009434:	4639      	mov	r1, r7
 8009436:	4681      	mov	r9, r0
 8009438:	4630      	mov	r0, r6
 800943a:	f7ff fe4a 	bl	80090d2 <_Bfree>
 800943e:	464f      	mov	r7, r9
 8009440:	106d      	asrs	r5, r5, #1
 8009442:	d00b      	beq.n	800945c <__pow5mult+0x90>
 8009444:	6820      	ldr	r0, [r4, #0]
 8009446:	b938      	cbnz	r0, 8009458 <__pow5mult+0x8c>
 8009448:	4622      	mov	r2, r4
 800944a:	4621      	mov	r1, r4
 800944c:	4630      	mov	r0, r6
 800944e:	f7ff ff27 	bl	80092a0 <__multiply>
 8009452:	6020      	str	r0, [r4, #0]
 8009454:	f8c0 8000 	str.w	r8, [r0]
 8009458:	4604      	mov	r4, r0
 800945a:	e7e4      	b.n	8009426 <__pow5mult+0x5a>
 800945c:	4638      	mov	r0, r7
 800945e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009462:	bf00      	nop
 8009464:	0800a788 	.word	0x0800a788

08009468 <__lshift>:
 8009468:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800946c:	460c      	mov	r4, r1
 800946e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009472:	6923      	ldr	r3, [r4, #16]
 8009474:	6849      	ldr	r1, [r1, #4]
 8009476:	eb0a 0903 	add.w	r9, sl, r3
 800947a:	68a3      	ldr	r3, [r4, #8]
 800947c:	4607      	mov	r7, r0
 800947e:	4616      	mov	r6, r2
 8009480:	f109 0501 	add.w	r5, r9, #1
 8009484:	42ab      	cmp	r3, r5
 8009486:	db32      	blt.n	80094ee <__lshift+0x86>
 8009488:	4638      	mov	r0, r7
 800948a:	f7ff fdee 	bl	800906a <_Balloc>
 800948e:	2300      	movs	r3, #0
 8009490:	4680      	mov	r8, r0
 8009492:	f100 0114 	add.w	r1, r0, #20
 8009496:	461a      	mov	r2, r3
 8009498:	4553      	cmp	r3, sl
 800949a:	db2b      	blt.n	80094f4 <__lshift+0x8c>
 800949c:	6920      	ldr	r0, [r4, #16]
 800949e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094a2:	f104 0314 	add.w	r3, r4, #20
 80094a6:	f016 021f 	ands.w	r2, r6, #31
 80094aa:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094ae:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80094b2:	d025      	beq.n	8009500 <__lshift+0x98>
 80094b4:	f1c2 0e20 	rsb	lr, r2, #32
 80094b8:	2000      	movs	r0, #0
 80094ba:	681e      	ldr	r6, [r3, #0]
 80094bc:	468a      	mov	sl, r1
 80094be:	4096      	lsls	r6, r2
 80094c0:	4330      	orrs	r0, r6
 80094c2:	f84a 0b04 	str.w	r0, [sl], #4
 80094c6:	f853 0b04 	ldr.w	r0, [r3], #4
 80094ca:	459c      	cmp	ip, r3
 80094cc:	fa20 f00e 	lsr.w	r0, r0, lr
 80094d0:	d814      	bhi.n	80094fc <__lshift+0x94>
 80094d2:	6048      	str	r0, [r1, #4]
 80094d4:	b108      	cbz	r0, 80094da <__lshift+0x72>
 80094d6:	f109 0502 	add.w	r5, r9, #2
 80094da:	3d01      	subs	r5, #1
 80094dc:	4638      	mov	r0, r7
 80094de:	f8c8 5010 	str.w	r5, [r8, #16]
 80094e2:	4621      	mov	r1, r4
 80094e4:	f7ff fdf5 	bl	80090d2 <_Bfree>
 80094e8:	4640      	mov	r0, r8
 80094ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094ee:	3101      	adds	r1, #1
 80094f0:	005b      	lsls	r3, r3, #1
 80094f2:	e7c7      	b.n	8009484 <__lshift+0x1c>
 80094f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80094f8:	3301      	adds	r3, #1
 80094fa:	e7cd      	b.n	8009498 <__lshift+0x30>
 80094fc:	4651      	mov	r1, sl
 80094fe:	e7dc      	b.n	80094ba <__lshift+0x52>
 8009500:	3904      	subs	r1, #4
 8009502:	f853 2b04 	ldr.w	r2, [r3], #4
 8009506:	f841 2f04 	str.w	r2, [r1, #4]!
 800950a:	459c      	cmp	ip, r3
 800950c:	d8f9      	bhi.n	8009502 <__lshift+0x9a>
 800950e:	e7e4      	b.n	80094da <__lshift+0x72>

08009510 <__mcmp>:
 8009510:	6903      	ldr	r3, [r0, #16]
 8009512:	690a      	ldr	r2, [r1, #16]
 8009514:	1a9b      	subs	r3, r3, r2
 8009516:	b530      	push	{r4, r5, lr}
 8009518:	d10c      	bne.n	8009534 <__mcmp+0x24>
 800951a:	0092      	lsls	r2, r2, #2
 800951c:	3014      	adds	r0, #20
 800951e:	3114      	adds	r1, #20
 8009520:	1884      	adds	r4, r0, r2
 8009522:	4411      	add	r1, r2
 8009524:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009528:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800952c:	4295      	cmp	r5, r2
 800952e:	d003      	beq.n	8009538 <__mcmp+0x28>
 8009530:	d305      	bcc.n	800953e <__mcmp+0x2e>
 8009532:	2301      	movs	r3, #1
 8009534:	4618      	mov	r0, r3
 8009536:	bd30      	pop	{r4, r5, pc}
 8009538:	42a0      	cmp	r0, r4
 800953a:	d3f3      	bcc.n	8009524 <__mcmp+0x14>
 800953c:	e7fa      	b.n	8009534 <__mcmp+0x24>
 800953e:	f04f 33ff 	mov.w	r3, #4294967295
 8009542:	e7f7      	b.n	8009534 <__mcmp+0x24>

08009544 <__mdiff>:
 8009544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009548:	460d      	mov	r5, r1
 800954a:	4607      	mov	r7, r0
 800954c:	4611      	mov	r1, r2
 800954e:	4628      	mov	r0, r5
 8009550:	4614      	mov	r4, r2
 8009552:	f7ff ffdd 	bl	8009510 <__mcmp>
 8009556:	1e06      	subs	r6, r0, #0
 8009558:	d108      	bne.n	800956c <__mdiff+0x28>
 800955a:	4631      	mov	r1, r6
 800955c:	4638      	mov	r0, r7
 800955e:	f7ff fd84 	bl	800906a <_Balloc>
 8009562:	2301      	movs	r3, #1
 8009564:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009568:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800956c:	bfa4      	itt	ge
 800956e:	4623      	movge	r3, r4
 8009570:	462c      	movge	r4, r5
 8009572:	4638      	mov	r0, r7
 8009574:	6861      	ldr	r1, [r4, #4]
 8009576:	bfa6      	itte	ge
 8009578:	461d      	movge	r5, r3
 800957a:	2600      	movge	r6, #0
 800957c:	2601      	movlt	r6, #1
 800957e:	f7ff fd74 	bl	800906a <_Balloc>
 8009582:	692b      	ldr	r3, [r5, #16]
 8009584:	60c6      	str	r6, [r0, #12]
 8009586:	6926      	ldr	r6, [r4, #16]
 8009588:	f105 0914 	add.w	r9, r5, #20
 800958c:	f104 0214 	add.w	r2, r4, #20
 8009590:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8009594:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8009598:	f100 0514 	add.w	r5, r0, #20
 800959c:	f04f 0e00 	mov.w	lr, #0
 80095a0:	f852 ab04 	ldr.w	sl, [r2], #4
 80095a4:	f859 4b04 	ldr.w	r4, [r9], #4
 80095a8:	fa1e f18a 	uxtah	r1, lr, sl
 80095ac:	b2a3      	uxth	r3, r4
 80095ae:	1ac9      	subs	r1, r1, r3
 80095b0:	0c23      	lsrs	r3, r4, #16
 80095b2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80095b6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80095ba:	b289      	uxth	r1, r1
 80095bc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80095c0:	45c8      	cmp	r8, r9
 80095c2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80095c6:	4694      	mov	ip, r2
 80095c8:	f845 3b04 	str.w	r3, [r5], #4
 80095cc:	d8e8      	bhi.n	80095a0 <__mdiff+0x5c>
 80095ce:	45bc      	cmp	ip, r7
 80095d0:	d304      	bcc.n	80095dc <__mdiff+0x98>
 80095d2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80095d6:	b183      	cbz	r3, 80095fa <__mdiff+0xb6>
 80095d8:	6106      	str	r6, [r0, #16]
 80095da:	e7c5      	b.n	8009568 <__mdiff+0x24>
 80095dc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80095e0:	fa1e f381 	uxtah	r3, lr, r1
 80095e4:	141a      	asrs	r2, r3, #16
 80095e6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80095ea:	b29b      	uxth	r3, r3
 80095ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095f0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 80095f4:	f845 3b04 	str.w	r3, [r5], #4
 80095f8:	e7e9      	b.n	80095ce <__mdiff+0x8a>
 80095fa:	3e01      	subs	r6, #1
 80095fc:	e7e9      	b.n	80095d2 <__mdiff+0x8e>
	...

08009600 <__ulp>:
 8009600:	4b12      	ldr	r3, [pc, #72]	; (800964c <__ulp+0x4c>)
 8009602:	ee10 2a90 	vmov	r2, s1
 8009606:	401a      	ands	r2, r3
 8009608:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800960c:	2b00      	cmp	r3, #0
 800960e:	dd04      	ble.n	800961a <__ulp+0x1a>
 8009610:	2000      	movs	r0, #0
 8009612:	4619      	mov	r1, r3
 8009614:	ec41 0b10 	vmov	d0, r0, r1
 8009618:	4770      	bx	lr
 800961a:	425b      	negs	r3, r3
 800961c:	151b      	asrs	r3, r3, #20
 800961e:	2b13      	cmp	r3, #19
 8009620:	f04f 0000 	mov.w	r0, #0
 8009624:	f04f 0100 	mov.w	r1, #0
 8009628:	dc04      	bgt.n	8009634 <__ulp+0x34>
 800962a:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800962e:	fa42 f103 	asr.w	r1, r2, r3
 8009632:	e7ef      	b.n	8009614 <__ulp+0x14>
 8009634:	3b14      	subs	r3, #20
 8009636:	2b1e      	cmp	r3, #30
 8009638:	f04f 0201 	mov.w	r2, #1
 800963c:	bfda      	itte	le
 800963e:	f1c3 031f 	rsble	r3, r3, #31
 8009642:	fa02 f303 	lslle.w	r3, r2, r3
 8009646:	4613      	movgt	r3, r2
 8009648:	4618      	mov	r0, r3
 800964a:	e7e3      	b.n	8009614 <__ulp+0x14>
 800964c:	7ff00000 	.word	0x7ff00000

08009650 <__b2d>:
 8009650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009652:	6905      	ldr	r5, [r0, #16]
 8009654:	f100 0714 	add.w	r7, r0, #20
 8009658:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800965c:	1f2e      	subs	r6, r5, #4
 800965e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009662:	4620      	mov	r0, r4
 8009664:	f7ff fdc5 	bl	80091f2 <__hi0bits>
 8009668:	f1c0 0320 	rsb	r3, r0, #32
 800966c:	280a      	cmp	r0, #10
 800966e:	600b      	str	r3, [r1, #0]
 8009670:	f8df c074 	ldr.w	ip, [pc, #116]	; 80096e8 <__b2d+0x98>
 8009674:	dc14      	bgt.n	80096a0 <__b2d+0x50>
 8009676:	f1c0 0e0b 	rsb	lr, r0, #11
 800967a:	fa24 f10e 	lsr.w	r1, r4, lr
 800967e:	42b7      	cmp	r7, r6
 8009680:	ea41 030c 	orr.w	r3, r1, ip
 8009684:	bf34      	ite	cc
 8009686:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800968a:	2100      	movcs	r1, #0
 800968c:	3015      	adds	r0, #21
 800968e:	fa04 f000 	lsl.w	r0, r4, r0
 8009692:	fa21 f10e 	lsr.w	r1, r1, lr
 8009696:	ea40 0201 	orr.w	r2, r0, r1
 800969a:	ec43 2b10 	vmov	d0, r2, r3
 800969e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80096a0:	42b7      	cmp	r7, r6
 80096a2:	bf3a      	itte	cc
 80096a4:	f1a5 0608 	subcc.w	r6, r5, #8
 80096a8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80096ac:	2100      	movcs	r1, #0
 80096ae:	380b      	subs	r0, #11
 80096b0:	d015      	beq.n	80096de <__b2d+0x8e>
 80096b2:	4084      	lsls	r4, r0
 80096b4:	f1c0 0520 	rsb	r5, r0, #32
 80096b8:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 80096bc:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 80096c0:	42be      	cmp	r6, r7
 80096c2:	fa21 fc05 	lsr.w	ip, r1, r5
 80096c6:	ea44 030c 	orr.w	r3, r4, ip
 80096ca:	bf8c      	ite	hi
 80096cc:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 80096d0:	2400      	movls	r4, #0
 80096d2:	fa01 f000 	lsl.w	r0, r1, r0
 80096d6:	40ec      	lsrs	r4, r5
 80096d8:	ea40 0204 	orr.w	r2, r0, r4
 80096dc:	e7dd      	b.n	800969a <__b2d+0x4a>
 80096de:	ea44 030c 	orr.w	r3, r4, ip
 80096e2:	460a      	mov	r2, r1
 80096e4:	e7d9      	b.n	800969a <__b2d+0x4a>
 80096e6:	bf00      	nop
 80096e8:	3ff00000 	.word	0x3ff00000

080096ec <__d2b>:
 80096ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80096f0:	460e      	mov	r6, r1
 80096f2:	2101      	movs	r1, #1
 80096f4:	ec59 8b10 	vmov	r8, r9, d0
 80096f8:	4615      	mov	r5, r2
 80096fa:	f7ff fcb6 	bl	800906a <_Balloc>
 80096fe:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009702:	4607      	mov	r7, r0
 8009704:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009708:	bb34      	cbnz	r4, 8009758 <__d2b+0x6c>
 800970a:	9301      	str	r3, [sp, #4]
 800970c:	f1b8 0300 	subs.w	r3, r8, #0
 8009710:	d027      	beq.n	8009762 <__d2b+0x76>
 8009712:	a802      	add	r0, sp, #8
 8009714:	f840 3d08 	str.w	r3, [r0, #-8]!
 8009718:	f7ff fd8a 	bl	8009230 <__lo0bits>
 800971c:	9900      	ldr	r1, [sp, #0]
 800971e:	b1f0      	cbz	r0, 800975e <__d2b+0x72>
 8009720:	9a01      	ldr	r2, [sp, #4]
 8009722:	f1c0 0320 	rsb	r3, r0, #32
 8009726:	fa02 f303 	lsl.w	r3, r2, r3
 800972a:	430b      	orrs	r3, r1
 800972c:	40c2      	lsrs	r2, r0
 800972e:	617b      	str	r3, [r7, #20]
 8009730:	9201      	str	r2, [sp, #4]
 8009732:	9b01      	ldr	r3, [sp, #4]
 8009734:	61bb      	str	r3, [r7, #24]
 8009736:	2b00      	cmp	r3, #0
 8009738:	bf14      	ite	ne
 800973a:	2102      	movne	r1, #2
 800973c:	2101      	moveq	r1, #1
 800973e:	6139      	str	r1, [r7, #16]
 8009740:	b1c4      	cbz	r4, 8009774 <__d2b+0x88>
 8009742:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009746:	4404      	add	r4, r0
 8009748:	6034      	str	r4, [r6, #0]
 800974a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800974e:	6028      	str	r0, [r5, #0]
 8009750:	4638      	mov	r0, r7
 8009752:	b003      	add	sp, #12
 8009754:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009758:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800975c:	e7d5      	b.n	800970a <__d2b+0x1e>
 800975e:	6179      	str	r1, [r7, #20]
 8009760:	e7e7      	b.n	8009732 <__d2b+0x46>
 8009762:	a801      	add	r0, sp, #4
 8009764:	f7ff fd64 	bl	8009230 <__lo0bits>
 8009768:	9b01      	ldr	r3, [sp, #4]
 800976a:	617b      	str	r3, [r7, #20]
 800976c:	2101      	movs	r1, #1
 800976e:	6139      	str	r1, [r7, #16]
 8009770:	3020      	adds	r0, #32
 8009772:	e7e5      	b.n	8009740 <__d2b+0x54>
 8009774:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8009778:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800977c:	6030      	str	r0, [r6, #0]
 800977e:	6918      	ldr	r0, [r3, #16]
 8009780:	f7ff fd37 	bl	80091f2 <__hi0bits>
 8009784:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8009788:	e7e1      	b.n	800974e <__d2b+0x62>

0800978a <__ratio>:
 800978a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800978e:	4688      	mov	r8, r1
 8009790:	4669      	mov	r1, sp
 8009792:	4681      	mov	r9, r0
 8009794:	f7ff ff5c 	bl	8009650 <__b2d>
 8009798:	a901      	add	r1, sp, #4
 800979a:	4640      	mov	r0, r8
 800979c:	ec57 6b10 	vmov	r6, r7, d0
 80097a0:	f7ff ff56 	bl	8009650 <__b2d>
 80097a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80097a8:	f8d8 2010 	ldr.w	r2, [r8, #16]
 80097ac:	eba3 0c02 	sub.w	ip, r3, r2
 80097b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80097b4:	1a9b      	subs	r3, r3, r2
 80097b6:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80097ba:	ec5b ab10 	vmov	sl, fp, d0
 80097be:	2b00      	cmp	r3, #0
 80097c0:	bfce      	itee	gt
 80097c2:	463a      	movgt	r2, r7
 80097c4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80097c8:	465a      	movle	r2, fp
 80097ca:	4659      	mov	r1, fp
 80097cc:	463d      	mov	r5, r7
 80097ce:	bfd4      	ite	le
 80097d0:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 80097d4:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 80097d8:	4630      	mov	r0, r6
 80097da:	ee10 2a10 	vmov	r2, s0
 80097de:	460b      	mov	r3, r1
 80097e0:	4629      	mov	r1, r5
 80097e2:	f7f7 f843 	bl	800086c <__aeabi_ddiv>
 80097e6:	ec41 0b10 	vmov	d0, r0, r1
 80097ea:	b003      	add	sp, #12
 80097ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080097f0 <__copybits>:
 80097f0:	3901      	subs	r1, #1
 80097f2:	b510      	push	{r4, lr}
 80097f4:	1149      	asrs	r1, r1, #5
 80097f6:	6914      	ldr	r4, [r2, #16]
 80097f8:	3101      	adds	r1, #1
 80097fa:	f102 0314 	add.w	r3, r2, #20
 80097fe:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009802:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009806:	42a3      	cmp	r3, r4
 8009808:	4602      	mov	r2, r0
 800980a:	d303      	bcc.n	8009814 <__copybits+0x24>
 800980c:	2300      	movs	r3, #0
 800980e:	428a      	cmp	r2, r1
 8009810:	d305      	bcc.n	800981e <__copybits+0x2e>
 8009812:	bd10      	pop	{r4, pc}
 8009814:	f853 2b04 	ldr.w	r2, [r3], #4
 8009818:	f840 2b04 	str.w	r2, [r0], #4
 800981c:	e7f3      	b.n	8009806 <__copybits+0x16>
 800981e:	f842 3b04 	str.w	r3, [r2], #4
 8009822:	e7f4      	b.n	800980e <__copybits+0x1e>

08009824 <__any_on>:
 8009824:	f100 0214 	add.w	r2, r0, #20
 8009828:	6900      	ldr	r0, [r0, #16]
 800982a:	114b      	asrs	r3, r1, #5
 800982c:	4298      	cmp	r0, r3
 800982e:	b510      	push	{r4, lr}
 8009830:	db11      	blt.n	8009856 <__any_on+0x32>
 8009832:	dd0a      	ble.n	800984a <__any_on+0x26>
 8009834:	f011 011f 	ands.w	r1, r1, #31
 8009838:	d007      	beq.n	800984a <__any_on+0x26>
 800983a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800983e:	fa24 f001 	lsr.w	r0, r4, r1
 8009842:	fa00 f101 	lsl.w	r1, r0, r1
 8009846:	428c      	cmp	r4, r1
 8009848:	d10b      	bne.n	8009862 <__any_on+0x3e>
 800984a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800984e:	4293      	cmp	r3, r2
 8009850:	d803      	bhi.n	800985a <__any_on+0x36>
 8009852:	2000      	movs	r0, #0
 8009854:	bd10      	pop	{r4, pc}
 8009856:	4603      	mov	r3, r0
 8009858:	e7f7      	b.n	800984a <__any_on+0x26>
 800985a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800985e:	2900      	cmp	r1, #0
 8009860:	d0f5      	beq.n	800984e <__any_on+0x2a>
 8009862:	2001      	movs	r0, #1
 8009864:	e7f6      	b.n	8009854 <__any_on+0x30>

08009866 <_calloc_r>:
 8009866:	b538      	push	{r3, r4, r5, lr}
 8009868:	fb02 f401 	mul.w	r4, r2, r1
 800986c:	4621      	mov	r1, r4
 800986e:	f000 f857 	bl	8009920 <_malloc_r>
 8009872:	4605      	mov	r5, r0
 8009874:	b118      	cbz	r0, 800987e <_calloc_r+0x18>
 8009876:	4622      	mov	r2, r4
 8009878:	2100      	movs	r1, #0
 800987a:	f7fc fcfd 	bl	8006278 <memset>
 800987e:	4628      	mov	r0, r5
 8009880:	bd38      	pop	{r3, r4, r5, pc}
	...

08009884 <_free_r>:
 8009884:	b538      	push	{r3, r4, r5, lr}
 8009886:	4605      	mov	r5, r0
 8009888:	2900      	cmp	r1, #0
 800988a:	d045      	beq.n	8009918 <_free_r+0x94>
 800988c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009890:	1f0c      	subs	r4, r1, #4
 8009892:	2b00      	cmp	r3, #0
 8009894:	bfb8      	it	lt
 8009896:	18e4      	addlt	r4, r4, r3
 8009898:	f000 fe30 	bl	800a4fc <__malloc_lock>
 800989c:	4a1f      	ldr	r2, [pc, #124]	; (800991c <_free_r+0x98>)
 800989e:	6813      	ldr	r3, [r2, #0]
 80098a0:	4610      	mov	r0, r2
 80098a2:	b933      	cbnz	r3, 80098b2 <_free_r+0x2e>
 80098a4:	6063      	str	r3, [r4, #4]
 80098a6:	6014      	str	r4, [r2, #0]
 80098a8:	4628      	mov	r0, r5
 80098aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80098ae:	f000 be26 	b.w	800a4fe <__malloc_unlock>
 80098b2:	42a3      	cmp	r3, r4
 80098b4:	d90c      	bls.n	80098d0 <_free_r+0x4c>
 80098b6:	6821      	ldr	r1, [r4, #0]
 80098b8:	1862      	adds	r2, r4, r1
 80098ba:	4293      	cmp	r3, r2
 80098bc:	bf04      	itt	eq
 80098be:	681a      	ldreq	r2, [r3, #0]
 80098c0:	685b      	ldreq	r3, [r3, #4]
 80098c2:	6063      	str	r3, [r4, #4]
 80098c4:	bf04      	itt	eq
 80098c6:	1852      	addeq	r2, r2, r1
 80098c8:	6022      	streq	r2, [r4, #0]
 80098ca:	6004      	str	r4, [r0, #0]
 80098cc:	e7ec      	b.n	80098a8 <_free_r+0x24>
 80098ce:	4613      	mov	r3, r2
 80098d0:	685a      	ldr	r2, [r3, #4]
 80098d2:	b10a      	cbz	r2, 80098d8 <_free_r+0x54>
 80098d4:	42a2      	cmp	r2, r4
 80098d6:	d9fa      	bls.n	80098ce <_free_r+0x4a>
 80098d8:	6819      	ldr	r1, [r3, #0]
 80098da:	1858      	adds	r0, r3, r1
 80098dc:	42a0      	cmp	r0, r4
 80098de:	d10b      	bne.n	80098f8 <_free_r+0x74>
 80098e0:	6820      	ldr	r0, [r4, #0]
 80098e2:	4401      	add	r1, r0
 80098e4:	1858      	adds	r0, r3, r1
 80098e6:	4282      	cmp	r2, r0
 80098e8:	6019      	str	r1, [r3, #0]
 80098ea:	d1dd      	bne.n	80098a8 <_free_r+0x24>
 80098ec:	6810      	ldr	r0, [r2, #0]
 80098ee:	6852      	ldr	r2, [r2, #4]
 80098f0:	605a      	str	r2, [r3, #4]
 80098f2:	4401      	add	r1, r0
 80098f4:	6019      	str	r1, [r3, #0]
 80098f6:	e7d7      	b.n	80098a8 <_free_r+0x24>
 80098f8:	d902      	bls.n	8009900 <_free_r+0x7c>
 80098fa:	230c      	movs	r3, #12
 80098fc:	602b      	str	r3, [r5, #0]
 80098fe:	e7d3      	b.n	80098a8 <_free_r+0x24>
 8009900:	6820      	ldr	r0, [r4, #0]
 8009902:	1821      	adds	r1, r4, r0
 8009904:	428a      	cmp	r2, r1
 8009906:	bf04      	itt	eq
 8009908:	6811      	ldreq	r1, [r2, #0]
 800990a:	6852      	ldreq	r2, [r2, #4]
 800990c:	6062      	str	r2, [r4, #4]
 800990e:	bf04      	itt	eq
 8009910:	1809      	addeq	r1, r1, r0
 8009912:	6021      	streq	r1, [r4, #0]
 8009914:	605c      	str	r4, [r3, #4]
 8009916:	e7c7      	b.n	80098a8 <_free_r+0x24>
 8009918:	bd38      	pop	{r3, r4, r5, pc}
 800991a:	bf00      	nop
 800991c:	20000264 	.word	0x20000264

08009920 <_malloc_r>:
 8009920:	b570      	push	{r4, r5, r6, lr}
 8009922:	1ccd      	adds	r5, r1, #3
 8009924:	f025 0503 	bic.w	r5, r5, #3
 8009928:	3508      	adds	r5, #8
 800992a:	2d0c      	cmp	r5, #12
 800992c:	bf38      	it	cc
 800992e:	250c      	movcc	r5, #12
 8009930:	2d00      	cmp	r5, #0
 8009932:	4606      	mov	r6, r0
 8009934:	db01      	blt.n	800993a <_malloc_r+0x1a>
 8009936:	42a9      	cmp	r1, r5
 8009938:	d903      	bls.n	8009942 <_malloc_r+0x22>
 800993a:	230c      	movs	r3, #12
 800993c:	6033      	str	r3, [r6, #0]
 800993e:	2000      	movs	r0, #0
 8009940:	bd70      	pop	{r4, r5, r6, pc}
 8009942:	f000 fddb 	bl	800a4fc <__malloc_lock>
 8009946:	4a21      	ldr	r2, [pc, #132]	; (80099cc <_malloc_r+0xac>)
 8009948:	6814      	ldr	r4, [r2, #0]
 800994a:	4621      	mov	r1, r4
 800994c:	b991      	cbnz	r1, 8009974 <_malloc_r+0x54>
 800994e:	4c20      	ldr	r4, [pc, #128]	; (80099d0 <_malloc_r+0xb0>)
 8009950:	6823      	ldr	r3, [r4, #0]
 8009952:	b91b      	cbnz	r3, 800995c <_malloc_r+0x3c>
 8009954:	4630      	mov	r0, r6
 8009956:	f000 fc91 	bl	800a27c <_sbrk_r>
 800995a:	6020      	str	r0, [r4, #0]
 800995c:	4629      	mov	r1, r5
 800995e:	4630      	mov	r0, r6
 8009960:	f000 fc8c 	bl	800a27c <_sbrk_r>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d124      	bne.n	80099b2 <_malloc_r+0x92>
 8009968:	230c      	movs	r3, #12
 800996a:	6033      	str	r3, [r6, #0]
 800996c:	4630      	mov	r0, r6
 800996e:	f000 fdc6 	bl	800a4fe <__malloc_unlock>
 8009972:	e7e4      	b.n	800993e <_malloc_r+0x1e>
 8009974:	680b      	ldr	r3, [r1, #0]
 8009976:	1b5b      	subs	r3, r3, r5
 8009978:	d418      	bmi.n	80099ac <_malloc_r+0x8c>
 800997a:	2b0b      	cmp	r3, #11
 800997c:	d90f      	bls.n	800999e <_malloc_r+0x7e>
 800997e:	600b      	str	r3, [r1, #0]
 8009980:	50cd      	str	r5, [r1, r3]
 8009982:	18cc      	adds	r4, r1, r3
 8009984:	4630      	mov	r0, r6
 8009986:	f000 fdba 	bl	800a4fe <__malloc_unlock>
 800998a:	f104 000b 	add.w	r0, r4, #11
 800998e:	1d23      	adds	r3, r4, #4
 8009990:	f020 0007 	bic.w	r0, r0, #7
 8009994:	1ac3      	subs	r3, r0, r3
 8009996:	d0d3      	beq.n	8009940 <_malloc_r+0x20>
 8009998:	425a      	negs	r2, r3
 800999a:	50e2      	str	r2, [r4, r3]
 800999c:	e7d0      	b.n	8009940 <_malloc_r+0x20>
 800999e:	428c      	cmp	r4, r1
 80099a0:	684b      	ldr	r3, [r1, #4]
 80099a2:	bf16      	itet	ne
 80099a4:	6063      	strne	r3, [r4, #4]
 80099a6:	6013      	streq	r3, [r2, #0]
 80099a8:	460c      	movne	r4, r1
 80099aa:	e7eb      	b.n	8009984 <_malloc_r+0x64>
 80099ac:	460c      	mov	r4, r1
 80099ae:	6849      	ldr	r1, [r1, #4]
 80099b0:	e7cc      	b.n	800994c <_malloc_r+0x2c>
 80099b2:	1cc4      	adds	r4, r0, #3
 80099b4:	f024 0403 	bic.w	r4, r4, #3
 80099b8:	42a0      	cmp	r0, r4
 80099ba:	d005      	beq.n	80099c8 <_malloc_r+0xa8>
 80099bc:	1a21      	subs	r1, r4, r0
 80099be:	4630      	mov	r0, r6
 80099c0:	f000 fc5c 	bl	800a27c <_sbrk_r>
 80099c4:	3001      	adds	r0, #1
 80099c6:	d0cf      	beq.n	8009968 <_malloc_r+0x48>
 80099c8:	6025      	str	r5, [r4, #0]
 80099ca:	e7db      	b.n	8009984 <_malloc_r+0x64>
 80099cc:	20000264 	.word	0x20000264
 80099d0:	20000268 	.word	0x20000268

080099d4 <__ssputs_r>:
 80099d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d8:	688e      	ldr	r6, [r1, #8]
 80099da:	429e      	cmp	r6, r3
 80099dc:	4682      	mov	sl, r0
 80099de:	460c      	mov	r4, r1
 80099e0:	4690      	mov	r8, r2
 80099e2:	4699      	mov	r9, r3
 80099e4:	d837      	bhi.n	8009a56 <__ssputs_r+0x82>
 80099e6:	898a      	ldrh	r2, [r1, #12]
 80099e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80099ec:	d031      	beq.n	8009a52 <__ssputs_r+0x7e>
 80099ee:	6825      	ldr	r5, [r4, #0]
 80099f0:	6909      	ldr	r1, [r1, #16]
 80099f2:	1a6f      	subs	r7, r5, r1
 80099f4:	6965      	ldr	r5, [r4, #20]
 80099f6:	2302      	movs	r3, #2
 80099f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099fc:	fb95 f5f3 	sdiv	r5, r5, r3
 8009a00:	f109 0301 	add.w	r3, r9, #1
 8009a04:	443b      	add	r3, r7
 8009a06:	429d      	cmp	r5, r3
 8009a08:	bf38      	it	cc
 8009a0a:	461d      	movcc	r5, r3
 8009a0c:	0553      	lsls	r3, r2, #21
 8009a0e:	d530      	bpl.n	8009a72 <__ssputs_r+0x9e>
 8009a10:	4629      	mov	r1, r5
 8009a12:	f7ff ff85 	bl	8009920 <_malloc_r>
 8009a16:	4606      	mov	r6, r0
 8009a18:	b950      	cbnz	r0, 8009a30 <__ssputs_r+0x5c>
 8009a1a:	230c      	movs	r3, #12
 8009a1c:	f8ca 3000 	str.w	r3, [sl]
 8009a20:	89a3      	ldrh	r3, [r4, #12]
 8009a22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	f04f 30ff 	mov.w	r0, #4294967295
 8009a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a30:	463a      	mov	r2, r7
 8009a32:	6921      	ldr	r1, [r4, #16]
 8009a34:	f7ff fb0e 	bl	8009054 <memcpy>
 8009a38:	89a3      	ldrh	r3, [r4, #12]
 8009a3a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009a3e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a42:	81a3      	strh	r3, [r4, #12]
 8009a44:	6126      	str	r6, [r4, #16]
 8009a46:	6165      	str	r5, [r4, #20]
 8009a48:	443e      	add	r6, r7
 8009a4a:	1bed      	subs	r5, r5, r7
 8009a4c:	6026      	str	r6, [r4, #0]
 8009a4e:	60a5      	str	r5, [r4, #8]
 8009a50:	464e      	mov	r6, r9
 8009a52:	454e      	cmp	r6, r9
 8009a54:	d900      	bls.n	8009a58 <__ssputs_r+0x84>
 8009a56:	464e      	mov	r6, r9
 8009a58:	4632      	mov	r2, r6
 8009a5a:	4641      	mov	r1, r8
 8009a5c:	6820      	ldr	r0, [r4, #0]
 8009a5e:	f000 fd34 	bl	800a4ca <memmove>
 8009a62:	68a3      	ldr	r3, [r4, #8]
 8009a64:	1b9b      	subs	r3, r3, r6
 8009a66:	60a3      	str	r3, [r4, #8]
 8009a68:	6823      	ldr	r3, [r4, #0]
 8009a6a:	441e      	add	r6, r3
 8009a6c:	6026      	str	r6, [r4, #0]
 8009a6e:	2000      	movs	r0, #0
 8009a70:	e7dc      	b.n	8009a2c <__ssputs_r+0x58>
 8009a72:	462a      	mov	r2, r5
 8009a74:	f000 fd44 	bl	800a500 <_realloc_r>
 8009a78:	4606      	mov	r6, r0
 8009a7a:	2800      	cmp	r0, #0
 8009a7c:	d1e2      	bne.n	8009a44 <__ssputs_r+0x70>
 8009a7e:	6921      	ldr	r1, [r4, #16]
 8009a80:	4650      	mov	r0, sl
 8009a82:	f7ff feff 	bl	8009884 <_free_r>
 8009a86:	e7c8      	b.n	8009a1a <__ssputs_r+0x46>

08009a88 <_svfiprintf_r>:
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	461d      	mov	r5, r3
 8009a8e:	898b      	ldrh	r3, [r1, #12]
 8009a90:	061f      	lsls	r7, r3, #24
 8009a92:	b09d      	sub	sp, #116	; 0x74
 8009a94:	4680      	mov	r8, r0
 8009a96:	460c      	mov	r4, r1
 8009a98:	4616      	mov	r6, r2
 8009a9a:	d50f      	bpl.n	8009abc <_svfiprintf_r+0x34>
 8009a9c:	690b      	ldr	r3, [r1, #16]
 8009a9e:	b96b      	cbnz	r3, 8009abc <_svfiprintf_r+0x34>
 8009aa0:	2140      	movs	r1, #64	; 0x40
 8009aa2:	f7ff ff3d 	bl	8009920 <_malloc_r>
 8009aa6:	6020      	str	r0, [r4, #0]
 8009aa8:	6120      	str	r0, [r4, #16]
 8009aaa:	b928      	cbnz	r0, 8009ab8 <_svfiprintf_r+0x30>
 8009aac:	230c      	movs	r3, #12
 8009aae:	f8c8 3000 	str.w	r3, [r8]
 8009ab2:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab6:	e0c8      	b.n	8009c4a <_svfiprintf_r+0x1c2>
 8009ab8:	2340      	movs	r3, #64	; 0x40
 8009aba:	6163      	str	r3, [r4, #20]
 8009abc:	2300      	movs	r3, #0
 8009abe:	9309      	str	r3, [sp, #36]	; 0x24
 8009ac0:	2320      	movs	r3, #32
 8009ac2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009ac6:	2330      	movs	r3, #48	; 0x30
 8009ac8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009acc:	9503      	str	r5, [sp, #12]
 8009ace:	f04f 0b01 	mov.w	fp, #1
 8009ad2:	4637      	mov	r7, r6
 8009ad4:	463d      	mov	r5, r7
 8009ad6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009ada:	b10b      	cbz	r3, 8009ae0 <_svfiprintf_r+0x58>
 8009adc:	2b25      	cmp	r3, #37	; 0x25
 8009ade:	d13e      	bne.n	8009b5e <_svfiprintf_r+0xd6>
 8009ae0:	ebb7 0a06 	subs.w	sl, r7, r6
 8009ae4:	d00b      	beq.n	8009afe <_svfiprintf_r+0x76>
 8009ae6:	4653      	mov	r3, sl
 8009ae8:	4632      	mov	r2, r6
 8009aea:	4621      	mov	r1, r4
 8009aec:	4640      	mov	r0, r8
 8009aee:	f7ff ff71 	bl	80099d4 <__ssputs_r>
 8009af2:	3001      	adds	r0, #1
 8009af4:	f000 80a4 	beq.w	8009c40 <_svfiprintf_r+0x1b8>
 8009af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009afa:	4453      	add	r3, sl
 8009afc:	9309      	str	r3, [sp, #36]	; 0x24
 8009afe:	783b      	ldrb	r3, [r7, #0]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	f000 809d 	beq.w	8009c40 <_svfiprintf_r+0x1b8>
 8009b06:	2300      	movs	r3, #0
 8009b08:	f04f 32ff 	mov.w	r2, #4294967295
 8009b0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	9307      	str	r3, [sp, #28]
 8009b14:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009b18:	931a      	str	r3, [sp, #104]	; 0x68
 8009b1a:	462f      	mov	r7, r5
 8009b1c:	2205      	movs	r2, #5
 8009b1e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8009b22:	4850      	ldr	r0, [pc, #320]	; (8009c64 <_svfiprintf_r+0x1dc>)
 8009b24:	f7f6 fb6c 	bl	8000200 <memchr>
 8009b28:	9b04      	ldr	r3, [sp, #16]
 8009b2a:	b9d0      	cbnz	r0, 8009b62 <_svfiprintf_r+0xda>
 8009b2c:	06d9      	lsls	r1, r3, #27
 8009b2e:	bf44      	itt	mi
 8009b30:	2220      	movmi	r2, #32
 8009b32:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b36:	071a      	lsls	r2, r3, #28
 8009b38:	bf44      	itt	mi
 8009b3a:	222b      	movmi	r2, #43	; 0x2b
 8009b3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009b40:	782a      	ldrb	r2, [r5, #0]
 8009b42:	2a2a      	cmp	r2, #42	; 0x2a
 8009b44:	d015      	beq.n	8009b72 <_svfiprintf_r+0xea>
 8009b46:	9a07      	ldr	r2, [sp, #28]
 8009b48:	462f      	mov	r7, r5
 8009b4a:	2000      	movs	r0, #0
 8009b4c:	250a      	movs	r5, #10
 8009b4e:	4639      	mov	r1, r7
 8009b50:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b54:	3b30      	subs	r3, #48	; 0x30
 8009b56:	2b09      	cmp	r3, #9
 8009b58:	d94d      	bls.n	8009bf6 <_svfiprintf_r+0x16e>
 8009b5a:	b1b8      	cbz	r0, 8009b8c <_svfiprintf_r+0x104>
 8009b5c:	e00f      	b.n	8009b7e <_svfiprintf_r+0xf6>
 8009b5e:	462f      	mov	r7, r5
 8009b60:	e7b8      	b.n	8009ad4 <_svfiprintf_r+0x4c>
 8009b62:	4a40      	ldr	r2, [pc, #256]	; (8009c64 <_svfiprintf_r+0x1dc>)
 8009b64:	1a80      	subs	r0, r0, r2
 8009b66:	fa0b f000 	lsl.w	r0, fp, r0
 8009b6a:	4318      	orrs	r0, r3
 8009b6c:	9004      	str	r0, [sp, #16]
 8009b6e:	463d      	mov	r5, r7
 8009b70:	e7d3      	b.n	8009b1a <_svfiprintf_r+0x92>
 8009b72:	9a03      	ldr	r2, [sp, #12]
 8009b74:	1d11      	adds	r1, r2, #4
 8009b76:	6812      	ldr	r2, [r2, #0]
 8009b78:	9103      	str	r1, [sp, #12]
 8009b7a:	2a00      	cmp	r2, #0
 8009b7c:	db01      	blt.n	8009b82 <_svfiprintf_r+0xfa>
 8009b7e:	9207      	str	r2, [sp, #28]
 8009b80:	e004      	b.n	8009b8c <_svfiprintf_r+0x104>
 8009b82:	4252      	negs	r2, r2
 8009b84:	f043 0302 	orr.w	r3, r3, #2
 8009b88:	9207      	str	r2, [sp, #28]
 8009b8a:	9304      	str	r3, [sp, #16]
 8009b8c:	783b      	ldrb	r3, [r7, #0]
 8009b8e:	2b2e      	cmp	r3, #46	; 0x2e
 8009b90:	d10c      	bne.n	8009bac <_svfiprintf_r+0x124>
 8009b92:	787b      	ldrb	r3, [r7, #1]
 8009b94:	2b2a      	cmp	r3, #42	; 0x2a
 8009b96:	d133      	bne.n	8009c00 <_svfiprintf_r+0x178>
 8009b98:	9b03      	ldr	r3, [sp, #12]
 8009b9a:	1d1a      	adds	r2, r3, #4
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	9203      	str	r2, [sp, #12]
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	bfb8      	it	lt
 8009ba4:	f04f 33ff 	movlt.w	r3, #4294967295
 8009ba8:	3702      	adds	r7, #2
 8009baa:	9305      	str	r3, [sp, #20]
 8009bac:	4d2e      	ldr	r5, [pc, #184]	; (8009c68 <_svfiprintf_r+0x1e0>)
 8009bae:	7839      	ldrb	r1, [r7, #0]
 8009bb0:	2203      	movs	r2, #3
 8009bb2:	4628      	mov	r0, r5
 8009bb4:	f7f6 fb24 	bl	8000200 <memchr>
 8009bb8:	b138      	cbz	r0, 8009bca <_svfiprintf_r+0x142>
 8009bba:	2340      	movs	r3, #64	; 0x40
 8009bbc:	1b40      	subs	r0, r0, r5
 8009bbe:	fa03 f000 	lsl.w	r0, r3, r0
 8009bc2:	9b04      	ldr	r3, [sp, #16]
 8009bc4:	4303      	orrs	r3, r0
 8009bc6:	3701      	adds	r7, #1
 8009bc8:	9304      	str	r3, [sp, #16]
 8009bca:	7839      	ldrb	r1, [r7, #0]
 8009bcc:	4827      	ldr	r0, [pc, #156]	; (8009c6c <_svfiprintf_r+0x1e4>)
 8009bce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009bd2:	2206      	movs	r2, #6
 8009bd4:	1c7e      	adds	r6, r7, #1
 8009bd6:	f7f6 fb13 	bl	8000200 <memchr>
 8009bda:	2800      	cmp	r0, #0
 8009bdc:	d038      	beq.n	8009c50 <_svfiprintf_r+0x1c8>
 8009bde:	4b24      	ldr	r3, [pc, #144]	; (8009c70 <_svfiprintf_r+0x1e8>)
 8009be0:	bb13      	cbnz	r3, 8009c28 <_svfiprintf_r+0x1a0>
 8009be2:	9b03      	ldr	r3, [sp, #12]
 8009be4:	3307      	adds	r3, #7
 8009be6:	f023 0307 	bic.w	r3, r3, #7
 8009bea:	3308      	adds	r3, #8
 8009bec:	9303      	str	r3, [sp, #12]
 8009bee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bf0:	444b      	add	r3, r9
 8009bf2:	9309      	str	r3, [sp, #36]	; 0x24
 8009bf4:	e76d      	b.n	8009ad2 <_svfiprintf_r+0x4a>
 8009bf6:	fb05 3202 	mla	r2, r5, r2, r3
 8009bfa:	2001      	movs	r0, #1
 8009bfc:	460f      	mov	r7, r1
 8009bfe:	e7a6      	b.n	8009b4e <_svfiprintf_r+0xc6>
 8009c00:	2300      	movs	r3, #0
 8009c02:	3701      	adds	r7, #1
 8009c04:	9305      	str	r3, [sp, #20]
 8009c06:	4619      	mov	r1, r3
 8009c08:	250a      	movs	r5, #10
 8009c0a:	4638      	mov	r0, r7
 8009c0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c10:	3a30      	subs	r2, #48	; 0x30
 8009c12:	2a09      	cmp	r2, #9
 8009c14:	d903      	bls.n	8009c1e <_svfiprintf_r+0x196>
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d0c8      	beq.n	8009bac <_svfiprintf_r+0x124>
 8009c1a:	9105      	str	r1, [sp, #20]
 8009c1c:	e7c6      	b.n	8009bac <_svfiprintf_r+0x124>
 8009c1e:	fb05 2101 	mla	r1, r5, r1, r2
 8009c22:	2301      	movs	r3, #1
 8009c24:	4607      	mov	r7, r0
 8009c26:	e7f0      	b.n	8009c0a <_svfiprintf_r+0x182>
 8009c28:	ab03      	add	r3, sp, #12
 8009c2a:	9300      	str	r3, [sp, #0]
 8009c2c:	4622      	mov	r2, r4
 8009c2e:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <_svfiprintf_r+0x1ec>)
 8009c30:	a904      	add	r1, sp, #16
 8009c32:	4640      	mov	r0, r8
 8009c34:	f7fc fbbc 	bl	80063b0 <_printf_float>
 8009c38:	f1b0 3fff 	cmp.w	r0, #4294967295
 8009c3c:	4681      	mov	r9, r0
 8009c3e:	d1d6      	bne.n	8009bee <_svfiprintf_r+0x166>
 8009c40:	89a3      	ldrh	r3, [r4, #12]
 8009c42:	065b      	lsls	r3, r3, #25
 8009c44:	f53f af35 	bmi.w	8009ab2 <_svfiprintf_r+0x2a>
 8009c48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c4a:	b01d      	add	sp, #116	; 0x74
 8009c4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c50:	ab03      	add	r3, sp, #12
 8009c52:	9300      	str	r3, [sp, #0]
 8009c54:	4622      	mov	r2, r4
 8009c56:	4b07      	ldr	r3, [pc, #28]	; (8009c74 <_svfiprintf_r+0x1ec>)
 8009c58:	a904      	add	r1, sp, #16
 8009c5a:	4640      	mov	r0, r8
 8009c5c:	f7fc fe5e 	bl	800691c <_printf_i>
 8009c60:	e7ea      	b.n	8009c38 <_svfiprintf_r+0x1b0>
 8009c62:	bf00      	nop
 8009c64:	0800a794 	.word	0x0800a794
 8009c68:	0800a79a 	.word	0x0800a79a
 8009c6c:	0800a79e 	.word	0x0800a79e
 8009c70:	080063b1 	.word	0x080063b1
 8009c74:	080099d5 	.word	0x080099d5

08009c78 <_sungetc_r>:
 8009c78:	b538      	push	{r3, r4, r5, lr}
 8009c7a:	1c4b      	adds	r3, r1, #1
 8009c7c:	4614      	mov	r4, r2
 8009c7e:	d103      	bne.n	8009c88 <_sungetc_r+0x10>
 8009c80:	f04f 35ff 	mov.w	r5, #4294967295
 8009c84:	4628      	mov	r0, r5
 8009c86:	bd38      	pop	{r3, r4, r5, pc}
 8009c88:	8993      	ldrh	r3, [r2, #12]
 8009c8a:	f023 0320 	bic.w	r3, r3, #32
 8009c8e:	8193      	strh	r3, [r2, #12]
 8009c90:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009c92:	6852      	ldr	r2, [r2, #4]
 8009c94:	b2cd      	uxtb	r5, r1
 8009c96:	b18b      	cbz	r3, 8009cbc <_sungetc_r+0x44>
 8009c98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	dd08      	ble.n	8009cb0 <_sungetc_r+0x38>
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	1e5a      	subs	r2, r3, #1
 8009ca2:	6022      	str	r2, [r4, #0]
 8009ca4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009ca8:	6863      	ldr	r3, [r4, #4]
 8009caa:	3301      	adds	r3, #1
 8009cac:	6063      	str	r3, [r4, #4]
 8009cae:	e7e9      	b.n	8009c84 <_sungetc_r+0xc>
 8009cb0:	4621      	mov	r1, r4
 8009cb2:	f000 fbc3 	bl	800a43c <__submore>
 8009cb6:	2800      	cmp	r0, #0
 8009cb8:	d0f1      	beq.n	8009c9e <_sungetc_r+0x26>
 8009cba:	e7e1      	b.n	8009c80 <_sungetc_r+0x8>
 8009cbc:	6921      	ldr	r1, [r4, #16]
 8009cbe:	6823      	ldr	r3, [r4, #0]
 8009cc0:	b151      	cbz	r1, 8009cd8 <_sungetc_r+0x60>
 8009cc2:	4299      	cmp	r1, r3
 8009cc4:	d208      	bcs.n	8009cd8 <_sungetc_r+0x60>
 8009cc6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8009cca:	42a9      	cmp	r1, r5
 8009ccc:	d104      	bne.n	8009cd8 <_sungetc_r+0x60>
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	3201      	adds	r2, #1
 8009cd2:	6023      	str	r3, [r4, #0]
 8009cd4:	6062      	str	r2, [r4, #4]
 8009cd6:	e7d5      	b.n	8009c84 <_sungetc_r+0xc>
 8009cd8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009cdc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009ce0:	6363      	str	r3, [r4, #52]	; 0x34
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	63a3      	str	r3, [r4, #56]	; 0x38
 8009ce6:	4623      	mov	r3, r4
 8009ce8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e7dc      	b.n	8009cac <_sungetc_r+0x34>

08009cf2 <__ssrefill_r>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009cf8:	b169      	cbz	r1, 8009d16 <__ssrefill_r+0x24>
 8009cfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009cfe:	4299      	cmp	r1, r3
 8009d00:	d001      	beq.n	8009d06 <__ssrefill_r+0x14>
 8009d02:	f7ff fdbf 	bl	8009884 <_free_r>
 8009d06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009d08:	6063      	str	r3, [r4, #4]
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	6360      	str	r0, [r4, #52]	; 0x34
 8009d0e:	b113      	cbz	r3, 8009d16 <__ssrefill_r+0x24>
 8009d10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	6923      	ldr	r3, [r4, #16]
 8009d18:	6023      	str	r3, [r4, #0]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	6063      	str	r3, [r4, #4]
 8009d1e:	89a3      	ldrh	r3, [r4, #12]
 8009d20:	f043 0320 	orr.w	r3, r3, #32
 8009d24:	81a3      	strh	r3, [r4, #12]
 8009d26:	f04f 30ff 	mov.w	r0, #4294967295
 8009d2a:	e7f3      	b.n	8009d14 <__ssrefill_r+0x22>

08009d2c <__ssvfiscanf_r>:
 8009d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d30:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 8009d34:	460c      	mov	r4, r1
 8009d36:	2100      	movs	r1, #0
 8009d38:	9144      	str	r1, [sp, #272]	; 0x110
 8009d3a:	9145      	str	r1, [sp, #276]	; 0x114
 8009d3c:	499f      	ldr	r1, [pc, #636]	; (8009fbc <__ssvfiscanf_r+0x290>)
 8009d3e:	91a0      	str	r1, [sp, #640]	; 0x280
 8009d40:	f10d 0804 	add.w	r8, sp, #4
 8009d44:	499e      	ldr	r1, [pc, #632]	; (8009fc0 <__ssvfiscanf_r+0x294>)
 8009d46:	f8df 927c 	ldr.w	r9, [pc, #636]	; 8009fc4 <__ssvfiscanf_r+0x298>
 8009d4a:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8009d4e:	4606      	mov	r6, r0
 8009d50:	4692      	mov	sl, r2
 8009d52:	91a1      	str	r1, [sp, #644]	; 0x284
 8009d54:	9300      	str	r3, [sp, #0]
 8009d56:	270a      	movs	r7, #10
 8009d58:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	f000 812a 	beq.w	8009fb6 <__ssvfiscanf_r+0x28a>
 8009d62:	4655      	mov	r5, sl
 8009d64:	f7ff f93e 	bl	8008fe4 <__locale_ctype_ptr>
 8009d68:	f815 bb01 	ldrb.w	fp, [r5], #1
 8009d6c:	4458      	add	r0, fp
 8009d6e:	7843      	ldrb	r3, [r0, #1]
 8009d70:	f013 0308 	ands.w	r3, r3, #8
 8009d74:	d01c      	beq.n	8009db0 <__ssvfiscanf_r+0x84>
 8009d76:	6863      	ldr	r3, [r4, #4]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	dd12      	ble.n	8009da2 <__ssvfiscanf_r+0x76>
 8009d7c:	f7ff f932 	bl	8008fe4 <__locale_ctype_ptr>
 8009d80:	6823      	ldr	r3, [r4, #0]
 8009d82:	781a      	ldrb	r2, [r3, #0]
 8009d84:	4410      	add	r0, r2
 8009d86:	7842      	ldrb	r2, [r0, #1]
 8009d88:	0712      	lsls	r2, r2, #28
 8009d8a:	d401      	bmi.n	8009d90 <__ssvfiscanf_r+0x64>
 8009d8c:	46aa      	mov	sl, r5
 8009d8e:	e7e3      	b.n	8009d58 <__ssvfiscanf_r+0x2c>
 8009d90:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009d92:	3201      	adds	r2, #1
 8009d94:	9245      	str	r2, [sp, #276]	; 0x114
 8009d96:	6862      	ldr	r2, [r4, #4]
 8009d98:	3301      	adds	r3, #1
 8009d9a:	3a01      	subs	r2, #1
 8009d9c:	6062      	str	r2, [r4, #4]
 8009d9e:	6023      	str	r3, [r4, #0]
 8009da0:	e7e9      	b.n	8009d76 <__ssvfiscanf_r+0x4a>
 8009da2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009da4:	4621      	mov	r1, r4
 8009da6:	4630      	mov	r0, r6
 8009da8:	4798      	blx	r3
 8009daa:	2800      	cmp	r0, #0
 8009dac:	d0e6      	beq.n	8009d7c <__ssvfiscanf_r+0x50>
 8009dae:	e7ed      	b.n	8009d8c <__ssvfiscanf_r+0x60>
 8009db0:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 8009db4:	f040 8082 	bne.w	8009ebc <__ssvfiscanf_r+0x190>
 8009db8:	9343      	str	r3, [sp, #268]	; 0x10c
 8009dba:	9341      	str	r3, [sp, #260]	; 0x104
 8009dbc:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8009dc0:	2b2a      	cmp	r3, #42	; 0x2a
 8009dc2:	d103      	bne.n	8009dcc <__ssvfiscanf_r+0xa0>
 8009dc4:	2310      	movs	r3, #16
 8009dc6:	9341      	str	r3, [sp, #260]	; 0x104
 8009dc8:	f10a 0502 	add.w	r5, sl, #2
 8009dcc:	46aa      	mov	sl, r5
 8009dce:	f815 1b01 	ldrb.w	r1, [r5], #1
 8009dd2:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009dd6:	2a09      	cmp	r2, #9
 8009dd8:	d922      	bls.n	8009e20 <__ssvfiscanf_r+0xf4>
 8009dda:	2203      	movs	r2, #3
 8009ddc:	4879      	ldr	r0, [pc, #484]	; (8009fc4 <__ssvfiscanf_r+0x298>)
 8009dde:	f7f6 fa0f 	bl	8000200 <memchr>
 8009de2:	b138      	cbz	r0, 8009df4 <__ssvfiscanf_r+0xc8>
 8009de4:	eba0 0309 	sub.w	r3, r0, r9
 8009de8:	2001      	movs	r0, #1
 8009dea:	4098      	lsls	r0, r3
 8009dec:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009dee:	4318      	orrs	r0, r3
 8009df0:	9041      	str	r0, [sp, #260]	; 0x104
 8009df2:	46aa      	mov	sl, r5
 8009df4:	f89a 3000 	ldrb.w	r3, [sl]
 8009df8:	2b67      	cmp	r3, #103	; 0x67
 8009dfa:	f10a 0501 	add.w	r5, sl, #1
 8009dfe:	d82b      	bhi.n	8009e58 <__ssvfiscanf_r+0x12c>
 8009e00:	2b65      	cmp	r3, #101	; 0x65
 8009e02:	f080 809f 	bcs.w	8009f44 <__ssvfiscanf_r+0x218>
 8009e06:	2b47      	cmp	r3, #71	; 0x47
 8009e08:	d810      	bhi.n	8009e2c <__ssvfiscanf_r+0x100>
 8009e0a:	2b45      	cmp	r3, #69	; 0x45
 8009e0c:	f080 809a 	bcs.w	8009f44 <__ssvfiscanf_r+0x218>
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d06c      	beq.n	8009eee <__ssvfiscanf_r+0x1c2>
 8009e14:	2b25      	cmp	r3, #37	; 0x25
 8009e16:	d051      	beq.n	8009ebc <__ssvfiscanf_r+0x190>
 8009e18:	2303      	movs	r3, #3
 8009e1a:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e1c:	9742      	str	r7, [sp, #264]	; 0x108
 8009e1e:	e027      	b.n	8009e70 <__ssvfiscanf_r+0x144>
 8009e20:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8009e22:	fb07 1303 	mla	r3, r7, r3, r1
 8009e26:	3b30      	subs	r3, #48	; 0x30
 8009e28:	9343      	str	r3, [sp, #268]	; 0x10c
 8009e2a:	e7cf      	b.n	8009dcc <__ssvfiscanf_r+0xa0>
 8009e2c:	2b5b      	cmp	r3, #91	; 0x5b
 8009e2e:	d06a      	beq.n	8009f06 <__ssvfiscanf_r+0x1da>
 8009e30:	d80c      	bhi.n	8009e4c <__ssvfiscanf_r+0x120>
 8009e32:	2b58      	cmp	r3, #88	; 0x58
 8009e34:	d1f0      	bne.n	8009e18 <__ssvfiscanf_r+0xec>
 8009e36:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009e38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e3c:	9241      	str	r2, [sp, #260]	; 0x104
 8009e3e:	2210      	movs	r2, #16
 8009e40:	9242      	str	r2, [sp, #264]	; 0x108
 8009e42:	2b6e      	cmp	r3, #110	; 0x6e
 8009e44:	bf8c      	ite	hi
 8009e46:	2304      	movhi	r3, #4
 8009e48:	2303      	movls	r3, #3
 8009e4a:	e010      	b.n	8009e6e <__ssvfiscanf_r+0x142>
 8009e4c:	2b63      	cmp	r3, #99	; 0x63
 8009e4e:	d065      	beq.n	8009f1c <__ssvfiscanf_r+0x1f0>
 8009e50:	2b64      	cmp	r3, #100	; 0x64
 8009e52:	d1e1      	bne.n	8009e18 <__ssvfiscanf_r+0xec>
 8009e54:	9742      	str	r7, [sp, #264]	; 0x108
 8009e56:	e7f4      	b.n	8009e42 <__ssvfiscanf_r+0x116>
 8009e58:	2b70      	cmp	r3, #112	; 0x70
 8009e5a:	d04b      	beq.n	8009ef4 <__ssvfiscanf_r+0x1c8>
 8009e5c:	d826      	bhi.n	8009eac <__ssvfiscanf_r+0x180>
 8009e5e:	2b6e      	cmp	r3, #110	; 0x6e
 8009e60:	d062      	beq.n	8009f28 <__ssvfiscanf_r+0x1fc>
 8009e62:	d84c      	bhi.n	8009efe <__ssvfiscanf_r+0x1d2>
 8009e64:	2b69      	cmp	r3, #105	; 0x69
 8009e66:	d1d7      	bne.n	8009e18 <__ssvfiscanf_r+0xec>
 8009e68:	2300      	movs	r3, #0
 8009e6a:	9342      	str	r3, [sp, #264]	; 0x108
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8009e70:	6863      	ldr	r3, [r4, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	dd68      	ble.n	8009f48 <__ssvfiscanf_r+0x21c>
 8009e76:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009e78:	0659      	lsls	r1, r3, #25
 8009e7a:	d407      	bmi.n	8009e8c <__ssvfiscanf_r+0x160>
 8009e7c:	f7ff f8b2 	bl	8008fe4 <__locale_ctype_ptr>
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	781a      	ldrb	r2, [r3, #0]
 8009e84:	4410      	add	r0, r2
 8009e86:	7842      	ldrb	r2, [r0, #1]
 8009e88:	0712      	lsls	r2, r2, #28
 8009e8a:	d464      	bmi.n	8009f56 <__ssvfiscanf_r+0x22a>
 8009e8c:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	dc73      	bgt.n	8009f7a <__ssvfiscanf_r+0x24e>
 8009e92:	466b      	mov	r3, sp
 8009e94:	4622      	mov	r2, r4
 8009e96:	a941      	add	r1, sp, #260	; 0x104
 8009e98:	4630      	mov	r0, r6
 8009e9a:	f000 f897 	bl	8009fcc <_scanf_chars>
 8009e9e:	2801      	cmp	r0, #1
 8009ea0:	f000 8089 	beq.w	8009fb6 <__ssvfiscanf_r+0x28a>
 8009ea4:	2802      	cmp	r0, #2
 8009ea6:	f47f af71 	bne.w	8009d8c <__ssvfiscanf_r+0x60>
 8009eaa:	e01d      	b.n	8009ee8 <__ssvfiscanf_r+0x1bc>
 8009eac:	2b75      	cmp	r3, #117	; 0x75
 8009eae:	d0d1      	beq.n	8009e54 <__ssvfiscanf_r+0x128>
 8009eb0:	2b78      	cmp	r3, #120	; 0x78
 8009eb2:	d0c0      	beq.n	8009e36 <__ssvfiscanf_r+0x10a>
 8009eb4:	2b73      	cmp	r3, #115	; 0x73
 8009eb6:	d1af      	bne.n	8009e18 <__ssvfiscanf_r+0xec>
 8009eb8:	2302      	movs	r3, #2
 8009eba:	e7d8      	b.n	8009e6e <__ssvfiscanf_r+0x142>
 8009ebc:	6863      	ldr	r3, [r4, #4]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd0c      	ble.n	8009edc <__ssvfiscanf_r+0x1b0>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	781a      	ldrb	r2, [r3, #0]
 8009ec6:	455a      	cmp	r2, fp
 8009ec8:	d175      	bne.n	8009fb6 <__ssvfiscanf_r+0x28a>
 8009eca:	3301      	adds	r3, #1
 8009ecc:	6862      	ldr	r2, [r4, #4]
 8009ece:	6023      	str	r3, [r4, #0]
 8009ed0:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009ed2:	3a01      	subs	r2, #1
 8009ed4:	3301      	adds	r3, #1
 8009ed6:	6062      	str	r2, [r4, #4]
 8009ed8:	9345      	str	r3, [sp, #276]	; 0x114
 8009eda:	e757      	b.n	8009d8c <__ssvfiscanf_r+0x60>
 8009edc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009ede:	4621      	mov	r1, r4
 8009ee0:	4630      	mov	r0, r6
 8009ee2:	4798      	blx	r3
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	d0ec      	beq.n	8009ec2 <__ssvfiscanf_r+0x196>
 8009ee8:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009eea:	2800      	cmp	r0, #0
 8009eec:	d159      	bne.n	8009fa2 <__ssvfiscanf_r+0x276>
 8009eee:	f04f 30ff 	mov.w	r0, #4294967295
 8009ef2:	e05c      	b.n	8009fae <__ssvfiscanf_r+0x282>
 8009ef4:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009ef6:	f042 0220 	orr.w	r2, r2, #32
 8009efa:	9241      	str	r2, [sp, #260]	; 0x104
 8009efc:	e79b      	b.n	8009e36 <__ssvfiscanf_r+0x10a>
 8009efe:	2308      	movs	r3, #8
 8009f00:	9342      	str	r3, [sp, #264]	; 0x108
 8009f02:	2304      	movs	r3, #4
 8009f04:	e7b3      	b.n	8009e6e <__ssvfiscanf_r+0x142>
 8009f06:	4629      	mov	r1, r5
 8009f08:	4640      	mov	r0, r8
 8009f0a:	f000 f9c7 	bl	800a29c <__sccl>
 8009f0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f14:	9341      	str	r3, [sp, #260]	; 0x104
 8009f16:	4605      	mov	r5, r0
 8009f18:	2301      	movs	r3, #1
 8009f1a:	e7a8      	b.n	8009e6e <__ssvfiscanf_r+0x142>
 8009f1c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009f1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009f22:	9341      	str	r3, [sp, #260]	; 0x104
 8009f24:	2300      	movs	r3, #0
 8009f26:	e7a2      	b.n	8009e6e <__ssvfiscanf_r+0x142>
 8009f28:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009f2a:	06c3      	lsls	r3, r0, #27
 8009f2c:	f53f af2e 	bmi.w	8009d8c <__ssvfiscanf_r+0x60>
 8009f30:	9b00      	ldr	r3, [sp, #0]
 8009f32:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f34:	1d19      	adds	r1, r3, #4
 8009f36:	9100      	str	r1, [sp, #0]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	07c0      	lsls	r0, r0, #31
 8009f3c:	bf4c      	ite	mi
 8009f3e:	801a      	strhmi	r2, [r3, #0]
 8009f40:	601a      	strpl	r2, [r3, #0]
 8009f42:	e723      	b.n	8009d8c <__ssvfiscanf_r+0x60>
 8009f44:	2305      	movs	r3, #5
 8009f46:	e792      	b.n	8009e6e <__ssvfiscanf_r+0x142>
 8009f48:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f4a:	4621      	mov	r1, r4
 8009f4c:	4630      	mov	r0, r6
 8009f4e:	4798      	blx	r3
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d090      	beq.n	8009e76 <__ssvfiscanf_r+0x14a>
 8009f54:	e7c8      	b.n	8009ee8 <__ssvfiscanf_r+0x1bc>
 8009f56:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009f58:	3201      	adds	r2, #1
 8009f5a:	9245      	str	r2, [sp, #276]	; 0x114
 8009f5c:	6862      	ldr	r2, [r4, #4]
 8009f5e:	3a01      	subs	r2, #1
 8009f60:	2a00      	cmp	r2, #0
 8009f62:	6062      	str	r2, [r4, #4]
 8009f64:	dd02      	ble.n	8009f6c <__ssvfiscanf_r+0x240>
 8009f66:	3301      	adds	r3, #1
 8009f68:	6023      	str	r3, [r4, #0]
 8009f6a:	e787      	b.n	8009e7c <__ssvfiscanf_r+0x150>
 8009f6c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009f6e:	4621      	mov	r1, r4
 8009f70:	4630      	mov	r0, r6
 8009f72:	4798      	blx	r3
 8009f74:	2800      	cmp	r0, #0
 8009f76:	d081      	beq.n	8009e7c <__ssvfiscanf_r+0x150>
 8009f78:	e7b6      	b.n	8009ee8 <__ssvfiscanf_r+0x1bc>
 8009f7a:	2b04      	cmp	r3, #4
 8009f7c:	dc06      	bgt.n	8009f8c <__ssvfiscanf_r+0x260>
 8009f7e:	466b      	mov	r3, sp
 8009f80:	4622      	mov	r2, r4
 8009f82:	a941      	add	r1, sp, #260	; 0x104
 8009f84:	4630      	mov	r0, r6
 8009f86:	f000 f885 	bl	800a094 <_scanf_i>
 8009f8a:	e788      	b.n	8009e9e <__ssvfiscanf_r+0x172>
 8009f8c:	4b0e      	ldr	r3, [pc, #56]	; (8009fc8 <__ssvfiscanf_r+0x29c>)
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	f43f aefc 	beq.w	8009d8c <__ssvfiscanf_r+0x60>
 8009f94:	466b      	mov	r3, sp
 8009f96:	4622      	mov	r2, r4
 8009f98:	a941      	add	r1, sp, #260	; 0x104
 8009f9a:	4630      	mov	r0, r6
 8009f9c:	f7fc fdd0 	bl	8006b40 <_scanf_float>
 8009fa0:	e77d      	b.n	8009e9e <__ssvfiscanf_r+0x172>
 8009fa2:	89a3      	ldrh	r3, [r4, #12]
 8009fa4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009fa8:	bf18      	it	ne
 8009faa:	f04f 30ff 	movne.w	r0, #4294967295
 8009fae:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 8009fb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fb6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009fb8:	e7f9      	b.n	8009fae <__ssvfiscanf_r+0x282>
 8009fba:	bf00      	nop
 8009fbc:	08009c79 	.word	0x08009c79
 8009fc0:	08009cf3 	.word	0x08009cf3
 8009fc4:	0800a79a 	.word	0x0800a79a
 8009fc8:	08006b41 	.word	0x08006b41

08009fcc <_scanf_chars>:
 8009fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd0:	4615      	mov	r5, r2
 8009fd2:	688a      	ldr	r2, [r1, #8]
 8009fd4:	4680      	mov	r8, r0
 8009fd6:	460c      	mov	r4, r1
 8009fd8:	b932      	cbnz	r2, 8009fe8 <_scanf_chars+0x1c>
 8009fda:	698a      	ldr	r2, [r1, #24]
 8009fdc:	2a00      	cmp	r2, #0
 8009fde:	bf14      	ite	ne
 8009fe0:	f04f 32ff 	movne.w	r2, #4294967295
 8009fe4:	2201      	moveq	r2, #1
 8009fe6:	608a      	str	r2, [r1, #8]
 8009fe8:	6822      	ldr	r2, [r4, #0]
 8009fea:	06d1      	lsls	r1, r2, #27
 8009fec:	bf5f      	itttt	pl
 8009fee:	681a      	ldrpl	r2, [r3, #0]
 8009ff0:	1d11      	addpl	r1, r2, #4
 8009ff2:	6019      	strpl	r1, [r3, #0]
 8009ff4:	6817      	ldrpl	r7, [r2, #0]
 8009ff6:	2600      	movs	r6, #0
 8009ff8:	69a3      	ldr	r3, [r4, #24]
 8009ffa:	b1db      	cbz	r3, 800a034 <_scanf_chars+0x68>
 8009ffc:	2b01      	cmp	r3, #1
 8009ffe:	d107      	bne.n	800a010 <_scanf_chars+0x44>
 800a000:	682b      	ldr	r3, [r5, #0]
 800a002:	6962      	ldr	r2, [r4, #20]
 800a004:	781b      	ldrb	r3, [r3, #0]
 800a006:	5cd3      	ldrb	r3, [r2, r3]
 800a008:	b9a3      	cbnz	r3, 800a034 <_scanf_chars+0x68>
 800a00a:	2e00      	cmp	r6, #0
 800a00c:	d132      	bne.n	800a074 <_scanf_chars+0xa8>
 800a00e:	e006      	b.n	800a01e <_scanf_chars+0x52>
 800a010:	2b02      	cmp	r3, #2
 800a012:	d007      	beq.n	800a024 <_scanf_chars+0x58>
 800a014:	2e00      	cmp	r6, #0
 800a016:	d12d      	bne.n	800a074 <_scanf_chars+0xa8>
 800a018:	69a3      	ldr	r3, [r4, #24]
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d12a      	bne.n	800a074 <_scanf_chars+0xa8>
 800a01e:	2001      	movs	r0, #1
 800a020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a024:	f7fe ffde 	bl	8008fe4 <__locale_ctype_ptr>
 800a028:	682b      	ldr	r3, [r5, #0]
 800a02a:	781b      	ldrb	r3, [r3, #0]
 800a02c:	4418      	add	r0, r3
 800a02e:	7843      	ldrb	r3, [r0, #1]
 800a030:	071b      	lsls	r3, r3, #28
 800a032:	d4ef      	bmi.n	800a014 <_scanf_chars+0x48>
 800a034:	6823      	ldr	r3, [r4, #0]
 800a036:	06da      	lsls	r2, r3, #27
 800a038:	bf5e      	ittt	pl
 800a03a:	682b      	ldrpl	r3, [r5, #0]
 800a03c:	781b      	ldrbpl	r3, [r3, #0]
 800a03e:	703b      	strbpl	r3, [r7, #0]
 800a040:	682a      	ldr	r2, [r5, #0]
 800a042:	686b      	ldr	r3, [r5, #4]
 800a044:	f102 0201 	add.w	r2, r2, #1
 800a048:	602a      	str	r2, [r5, #0]
 800a04a:	68a2      	ldr	r2, [r4, #8]
 800a04c:	f103 33ff 	add.w	r3, r3, #4294967295
 800a050:	f102 32ff 	add.w	r2, r2, #4294967295
 800a054:	606b      	str	r3, [r5, #4]
 800a056:	f106 0601 	add.w	r6, r6, #1
 800a05a:	bf58      	it	pl
 800a05c:	3701      	addpl	r7, #1
 800a05e:	60a2      	str	r2, [r4, #8]
 800a060:	b142      	cbz	r2, 800a074 <_scanf_chars+0xa8>
 800a062:	2b00      	cmp	r3, #0
 800a064:	dcc8      	bgt.n	8009ff8 <_scanf_chars+0x2c>
 800a066:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a06a:	4629      	mov	r1, r5
 800a06c:	4640      	mov	r0, r8
 800a06e:	4798      	blx	r3
 800a070:	2800      	cmp	r0, #0
 800a072:	d0c1      	beq.n	8009ff8 <_scanf_chars+0x2c>
 800a074:	6823      	ldr	r3, [r4, #0]
 800a076:	f013 0310 	ands.w	r3, r3, #16
 800a07a:	d105      	bne.n	800a088 <_scanf_chars+0xbc>
 800a07c:	68e2      	ldr	r2, [r4, #12]
 800a07e:	3201      	adds	r2, #1
 800a080:	60e2      	str	r2, [r4, #12]
 800a082:	69a2      	ldr	r2, [r4, #24]
 800a084:	b102      	cbz	r2, 800a088 <_scanf_chars+0xbc>
 800a086:	703b      	strb	r3, [r7, #0]
 800a088:	6923      	ldr	r3, [r4, #16]
 800a08a:	441e      	add	r6, r3
 800a08c:	6126      	str	r6, [r4, #16]
 800a08e:	2000      	movs	r0, #0
 800a090:	e7c6      	b.n	800a020 <_scanf_chars+0x54>
	...

0800a094 <_scanf_i>:
 800a094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a098:	469a      	mov	sl, r3
 800a09a:	4b74      	ldr	r3, [pc, #464]	; (800a26c <_scanf_i+0x1d8>)
 800a09c:	460c      	mov	r4, r1
 800a09e:	4683      	mov	fp, r0
 800a0a0:	4616      	mov	r6, r2
 800a0a2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	ab03      	add	r3, sp, #12
 800a0aa:	68a7      	ldr	r7, [r4, #8]
 800a0ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0b0:	4b6f      	ldr	r3, [pc, #444]	; (800a270 <_scanf_i+0x1dc>)
 800a0b2:	69a1      	ldr	r1, [r4, #24]
 800a0b4:	4a6f      	ldr	r2, [pc, #444]	; (800a274 <_scanf_i+0x1e0>)
 800a0b6:	2903      	cmp	r1, #3
 800a0b8:	bf08      	it	eq
 800a0ba:	461a      	moveq	r2, r3
 800a0bc:	1e7b      	subs	r3, r7, #1
 800a0be:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800a0c2:	bf84      	itt	hi
 800a0c4:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a0c8:	60a3      	strhi	r3, [r4, #8]
 800a0ca:	6823      	ldr	r3, [r4, #0]
 800a0cc:	9200      	str	r2, [sp, #0]
 800a0ce:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a0d2:	bf88      	it	hi
 800a0d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a0d8:	f104 091c 	add.w	r9, r4, #28
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	bf8c      	ite	hi
 800a0e0:	197f      	addhi	r7, r7, r5
 800a0e2:	2700      	movls	r7, #0
 800a0e4:	464b      	mov	r3, r9
 800a0e6:	f04f 0800 	mov.w	r8, #0
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	6831      	ldr	r1, [r6, #0]
 800a0ee:	ab03      	add	r3, sp, #12
 800a0f0:	2202      	movs	r2, #2
 800a0f2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800a0f6:	7809      	ldrb	r1, [r1, #0]
 800a0f8:	f7f6 f882 	bl	8000200 <memchr>
 800a0fc:	9b01      	ldr	r3, [sp, #4]
 800a0fe:	b330      	cbz	r0, 800a14e <_scanf_i+0xba>
 800a100:	f1b8 0f01 	cmp.w	r8, #1
 800a104:	d15a      	bne.n	800a1bc <_scanf_i+0x128>
 800a106:	6862      	ldr	r2, [r4, #4]
 800a108:	b92a      	cbnz	r2, 800a116 <_scanf_i+0x82>
 800a10a:	6822      	ldr	r2, [r4, #0]
 800a10c:	2108      	movs	r1, #8
 800a10e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a112:	6061      	str	r1, [r4, #4]
 800a114:	6022      	str	r2, [r4, #0]
 800a116:	6822      	ldr	r2, [r4, #0]
 800a118:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a11c:	6022      	str	r2, [r4, #0]
 800a11e:	68a2      	ldr	r2, [r4, #8]
 800a120:	1e51      	subs	r1, r2, #1
 800a122:	60a1      	str	r1, [r4, #8]
 800a124:	b19a      	cbz	r2, 800a14e <_scanf_i+0xba>
 800a126:	6832      	ldr	r2, [r6, #0]
 800a128:	1c51      	adds	r1, r2, #1
 800a12a:	6031      	str	r1, [r6, #0]
 800a12c:	7812      	ldrb	r2, [r2, #0]
 800a12e:	701a      	strb	r2, [r3, #0]
 800a130:	1c5d      	adds	r5, r3, #1
 800a132:	6873      	ldr	r3, [r6, #4]
 800a134:	3b01      	subs	r3, #1
 800a136:	2b00      	cmp	r3, #0
 800a138:	6073      	str	r3, [r6, #4]
 800a13a:	dc07      	bgt.n	800a14c <_scanf_i+0xb8>
 800a13c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a140:	4631      	mov	r1, r6
 800a142:	4658      	mov	r0, fp
 800a144:	4798      	blx	r3
 800a146:	2800      	cmp	r0, #0
 800a148:	f040 8086 	bne.w	800a258 <_scanf_i+0x1c4>
 800a14c:	462b      	mov	r3, r5
 800a14e:	f108 0801 	add.w	r8, r8, #1
 800a152:	f1b8 0f03 	cmp.w	r8, #3
 800a156:	d1c8      	bne.n	800a0ea <_scanf_i+0x56>
 800a158:	6862      	ldr	r2, [r4, #4]
 800a15a:	b90a      	cbnz	r2, 800a160 <_scanf_i+0xcc>
 800a15c:	220a      	movs	r2, #10
 800a15e:	6062      	str	r2, [r4, #4]
 800a160:	6862      	ldr	r2, [r4, #4]
 800a162:	4945      	ldr	r1, [pc, #276]	; (800a278 <_scanf_i+0x1e4>)
 800a164:	6960      	ldr	r0, [r4, #20]
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	1a89      	subs	r1, r1, r2
 800a16a:	f000 f897 	bl	800a29c <__sccl>
 800a16e:	9b01      	ldr	r3, [sp, #4]
 800a170:	f04f 0800 	mov.w	r8, #0
 800a174:	461d      	mov	r5, r3
 800a176:	68a3      	ldr	r3, [r4, #8]
 800a178:	6822      	ldr	r2, [r4, #0]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d03a      	beq.n	800a1f4 <_scanf_i+0x160>
 800a17e:	6831      	ldr	r1, [r6, #0]
 800a180:	6960      	ldr	r0, [r4, #20]
 800a182:	f891 c000 	ldrb.w	ip, [r1]
 800a186:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a18a:	2800      	cmp	r0, #0
 800a18c:	d032      	beq.n	800a1f4 <_scanf_i+0x160>
 800a18e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a192:	d121      	bne.n	800a1d8 <_scanf_i+0x144>
 800a194:	0510      	lsls	r0, r2, #20
 800a196:	d51f      	bpl.n	800a1d8 <_scanf_i+0x144>
 800a198:	f108 0801 	add.w	r8, r8, #1
 800a19c:	b117      	cbz	r7, 800a1a4 <_scanf_i+0x110>
 800a19e:	3301      	adds	r3, #1
 800a1a0:	3f01      	subs	r7, #1
 800a1a2:	60a3      	str	r3, [r4, #8]
 800a1a4:	6873      	ldr	r3, [r6, #4]
 800a1a6:	3b01      	subs	r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	6073      	str	r3, [r6, #4]
 800a1ac:	dd1b      	ble.n	800a1e6 <_scanf_i+0x152>
 800a1ae:	6833      	ldr	r3, [r6, #0]
 800a1b0:	3301      	adds	r3, #1
 800a1b2:	6033      	str	r3, [r6, #0]
 800a1b4:	68a3      	ldr	r3, [r4, #8]
 800a1b6:	3b01      	subs	r3, #1
 800a1b8:	60a3      	str	r3, [r4, #8]
 800a1ba:	e7dc      	b.n	800a176 <_scanf_i+0xe2>
 800a1bc:	f1b8 0f02 	cmp.w	r8, #2
 800a1c0:	d1ad      	bne.n	800a11e <_scanf_i+0x8a>
 800a1c2:	6822      	ldr	r2, [r4, #0]
 800a1c4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a1c8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a1cc:	d1bf      	bne.n	800a14e <_scanf_i+0xba>
 800a1ce:	2110      	movs	r1, #16
 800a1d0:	6061      	str	r1, [r4, #4]
 800a1d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a1d6:	e7a1      	b.n	800a11c <_scanf_i+0x88>
 800a1d8:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a1dc:	6022      	str	r2, [r4, #0]
 800a1de:	780b      	ldrb	r3, [r1, #0]
 800a1e0:	702b      	strb	r3, [r5, #0]
 800a1e2:	3501      	adds	r5, #1
 800a1e4:	e7de      	b.n	800a1a4 <_scanf_i+0x110>
 800a1e6:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a1ea:	4631      	mov	r1, r6
 800a1ec:	4658      	mov	r0, fp
 800a1ee:	4798      	blx	r3
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	d0df      	beq.n	800a1b4 <_scanf_i+0x120>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	05d9      	lsls	r1, r3, #23
 800a1f8:	d50c      	bpl.n	800a214 <_scanf_i+0x180>
 800a1fa:	454d      	cmp	r5, r9
 800a1fc:	d908      	bls.n	800a210 <_scanf_i+0x17c>
 800a1fe:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a206:	4632      	mov	r2, r6
 800a208:	4658      	mov	r0, fp
 800a20a:	4798      	blx	r3
 800a20c:	1e6f      	subs	r7, r5, #1
 800a20e:	463d      	mov	r5, r7
 800a210:	454d      	cmp	r5, r9
 800a212:	d029      	beq.n	800a268 <_scanf_i+0x1d4>
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	f012 0210 	ands.w	r2, r2, #16
 800a21a:	d113      	bne.n	800a244 <_scanf_i+0x1b0>
 800a21c:	702a      	strb	r2, [r5, #0]
 800a21e:	6863      	ldr	r3, [r4, #4]
 800a220:	9e00      	ldr	r6, [sp, #0]
 800a222:	4649      	mov	r1, r9
 800a224:	4658      	mov	r0, fp
 800a226:	47b0      	blx	r6
 800a228:	f8da 3000 	ldr.w	r3, [sl]
 800a22c:	6821      	ldr	r1, [r4, #0]
 800a22e:	1d1a      	adds	r2, r3, #4
 800a230:	f8ca 2000 	str.w	r2, [sl]
 800a234:	f011 0f20 	tst.w	r1, #32
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	d010      	beq.n	800a25e <_scanf_i+0x1ca>
 800a23c:	6018      	str	r0, [r3, #0]
 800a23e:	68e3      	ldr	r3, [r4, #12]
 800a240:	3301      	adds	r3, #1
 800a242:	60e3      	str	r3, [r4, #12]
 800a244:	eba5 0509 	sub.w	r5, r5, r9
 800a248:	44a8      	add	r8, r5
 800a24a:	6925      	ldr	r5, [r4, #16]
 800a24c:	4445      	add	r5, r8
 800a24e:	6125      	str	r5, [r4, #16]
 800a250:	2000      	movs	r0, #0
 800a252:	b007      	add	sp, #28
 800a254:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a258:	f04f 0800 	mov.w	r8, #0
 800a25c:	e7ca      	b.n	800a1f4 <_scanf_i+0x160>
 800a25e:	07ca      	lsls	r2, r1, #31
 800a260:	bf4c      	ite	mi
 800a262:	8018      	strhmi	r0, [r3, #0]
 800a264:	6018      	strpl	r0, [r3, #0]
 800a266:	e7ea      	b.n	800a23e <_scanf_i+0x1aa>
 800a268:	2001      	movs	r0, #1
 800a26a:	e7f2      	b.n	800a252 <_scanf_i+0x1be>
 800a26c:	0800a5cc 	.word	0x0800a5cc
 800a270:	08007ce1 	.word	0x08007ce1
 800a274:	0800a419 	.word	0x0800a419
 800a278:	0800a7b5 	.word	0x0800a7b5

0800a27c <_sbrk_r>:
 800a27c:	b538      	push	{r3, r4, r5, lr}
 800a27e:	4c06      	ldr	r4, [pc, #24]	; (800a298 <_sbrk_r+0x1c>)
 800a280:	2300      	movs	r3, #0
 800a282:	4605      	mov	r5, r0
 800a284:	4608      	mov	r0, r1
 800a286:	6023      	str	r3, [r4, #0]
 800a288:	f7f8 fc2a 	bl	8002ae0 <_sbrk>
 800a28c:	1c43      	adds	r3, r0, #1
 800a28e:	d102      	bne.n	800a296 <_sbrk_r+0x1a>
 800a290:	6823      	ldr	r3, [r4, #0]
 800a292:	b103      	cbz	r3, 800a296 <_sbrk_r+0x1a>
 800a294:	602b      	str	r3, [r5, #0]
 800a296:	bd38      	pop	{r3, r4, r5, pc}
 800a298:	20000704 	.word	0x20000704

0800a29c <__sccl>:
 800a29c:	b570      	push	{r4, r5, r6, lr}
 800a29e:	780b      	ldrb	r3, [r1, #0]
 800a2a0:	2b5e      	cmp	r3, #94	; 0x5e
 800a2a2:	bf13      	iteet	ne
 800a2a4:	1c4a      	addne	r2, r1, #1
 800a2a6:	1c8a      	addeq	r2, r1, #2
 800a2a8:	784b      	ldrbeq	r3, [r1, #1]
 800a2aa:	2100      	movne	r1, #0
 800a2ac:	bf08      	it	eq
 800a2ae:	2101      	moveq	r1, #1
 800a2b0:	1e44      	subs	r4, r0, #1
 800a2b2:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 800a2b6:	f804 1f01 	strb.w	r1, [r4, #1]!
 800a2ba:	42ac      	cmp	r4, r5
 800a2bc:	d1fb      	bne.n	800a2b6 <__sccl+0x1a>
 800a2be:	b913      	cbnz	r3, 800a2c6 <__sccl+0x2a>
 800a2c0:	3a01      	subs	r2, #1
 800a2c2:	4610      	mov	r0, r2
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}
 800a2c6:	f081 0401 	eor.w	r4, r1, #1
 800a2ca:	54c4      	strb	r4, [r0, r3]
 800a2cc:	1c51      	adds	r1, r2, #1
 800a2ce:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800a2d2:	2d2d      	cmp	r5, #45	; 0x2d
 800a2d4:	f101 36ff 	add.w	r6, r1, #4294967295
 800a2d8:	460a      	mov	r2, r1
 800a2da:	d006      	beq.n	800a2ea <__sccl+0x4e>
 800a2dc:	2d5d      	cmp	r5, #93	; 0x5d
 800a2de:	d0f0      	beq.n	800a2c2 <__sccl+0x26>
 800a2e0:	b90d      	cbnz	r5, 800a2e6 <__sccl+0x4a>
 800a2e2:	4632      	mov	r2, r6
 800a2e4:	e7ed      	b.n	800a2c2 <__sccl+0x26>
 800a2e6:	462b      	mov	r3, r5
 800a2e8:	e7ef      	b.n	800a2ca <__sccl+0x2e>
 800a2ea:	780e      	ldrb	r6, [r1, #0]
 800a2ec:	2e5d      	cmp	r6, #93	; 0x5d
 800a2ee:	d0fa      	beq.n	800a2e6 <__sccl+0x4a>
 800a2f0:	42b3      	cmp	r3, r6
 800a2f2:	dcf8      	bgt.n	800a2e6 <__sccl+0x4a>
 800a2f4:	3301      	adds	r3, #1
 800a2f6:	429e      	cmp	r6, r3
 800a2f8:	54c4      	strb	r4, [r0, r3]
 800a2fa:	dcfb      	bgt.n	800a2f4 <__sccl+0x58>
 800a2fc:	3102      	adds	r1, #2
 800a2fe:	e7e6      	b.n	800a2ce <__sccl+0x32>

0800a300 <strncmp>:
 800a300:	b510      	push	{r4, lr}
 800a302:	b16a      	cbz	r2, 800a320 <strncmp+0x20>
 800a304:	3901      	subs	r1, #1
 800a306:	1884      	adds	r4, r0, r2
 800a308:	f810 3b01 	ldrb.w	r3, [r0], #1
 800a30c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800a310:	4293      	cmp	r3, r2
 800a312:	d103      	bne.n	800a31c <strncmp+0x1c>
 800a314:	42a0      	cmp	r0, r4
 800a316:	d001      	beq.n	800a31c <strncmp+0x1c>
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d1f5      	bne.n	800a308 <strncmp+0x8>
 800a31c:	1a98      	subs	r0, r3, r2
 800a31e:	bd10      	pop	{r4, pc}
 800a320:	4610      	mov	r0, r2
 800a322:	e7fc      	b.n	800a31e <strncmp+0x1e>

0800a324 <_strtoul_l.isra.0>:
 800a324:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a328:	4680      	mov	r8, r0
 800a32a:	4689      	mov	r9, r1
 800a32c:	4692      	mov	sl, r2
 800a32e:	461e      	mov	r6, r3
 800a330:	460f      	mov	r7, r1
 800a332:	463d      	mov	r5, r7
 800a334:	9808      	ldr	r0, [sp, #32]
 800a336:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a33a:	f7fe fe4f 	bl	8008fdc <__locale_ctype_ptr_l>
 800a33e:	4420      	add	r0, r4
 800a340:	7843      	ldrb	r3, [r0, #1]
 800a342:	f013 0308 	ands.w	r3, r3, #8
 800a346:	d130      	bne.n	800a3aa <_strtoul_l.isra.0+0x86>
 800a348:	2c2d      	cmp	r4, #45	; 0x2d
 800a34a:	d130      	bne.n	800a3ae <_strtoul_l.isra.0+0x8a>
 800a34c:	787c      	ldrb	r4, [r7, #1]
 800a34e:	1cbd      	adds	r5, r7, #2
 800a350:	2101      	movs	r1, #1
 800a352:	2e00      	cmp	r6, #0
 800a354:	d05c      	beq.n	800a410 <_strtoul_l.isra.0+0xec>
 800a356:	2e10      	cmp	r6, #16
 800a358:	d109      	bne.n	800a36e <_strtoul_l.isra.0+0x4a>
 800a35a:	2c30      	cmp	r4, #48	; 0x30
 800a35c:	d107      	bne.n	800a36e <_strtoul_l.isra.0+0x4a>
 800a35e:	782b      	ldrb	r3, [r5, #0]
 800a360:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a364:	2b58      	cmp	r3, #88	; 0x58
 800a366:	d14e      	bne.n	800a406 <_strtoul_l.isra.0+0xe2>
 800a368:	786c      	ldrb	r4, [r5, #1]
 800a36a:	2610      	movs	r6, #16
 800a36c:	3502      	adds	r5, #2
 800a36e:	f04f 32ff 	mov.w	r2, #4294967295
 800a372:	2300      	movs	r3, #0
 800a374:	fbb2 f2f6 	udiv	r2, r2, r6
 800a378:	fb06 fc02 	mul.w	ip, r6, r2
 800a37c:	ea6f 0c0c 	mvn.w	ip, ip
 800a380:	4618      	mov	r0, r3
 800a382:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800a386:	2f09      	cmp	r7, #9
 800a388:	d817      	bhi.n	800a3ba <_strtoul_l.isra.0+0x96>
 800a38a:	463c      	mov	r4, r7
 800a38c:	42a6      	cmp	r6, r4
 800a38e:	dd23      	ble.n	800a3d8 <_strtoul_l.isra.0+0xb4>
 800a390:	2b00      	cmp	r3, #0
 800a392:	db1e      	blt.n	800a3d2 <_strtoul_l.isra.0+0xae>
 800a394:	4282      	cmp	r2, r0
 800a396:	d31c      	bcc.n	800a3d2 <_strtoul_l.isra.0+0xae>
 800a398:	d101      	bne.n	800a39e <_strtoul_l.isra.0+0x7a>
 800a39a:	45a4      	cmp	ip, r4
 800a39c:	db19      	blt.n	800a3d2 <_strtoul_l.isra.0+0xae>
 800a39e:	fb00 4006 	mla	r0, r0, r6, r4
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3a8:	e7eb      	b.n	800a382 <_strtoul_l.isra.0+0x5e>
 800a3aa:	462f      	mov	r7, r5
 800a3ac:	e7c1      	b.n	800a332 <_strtoul_l.isra.0+0xe>
 800a3ae:	2c2b      	cmp	r4, #43	; 0x2b
 800a3b0:	bf04      	itt	eq
 800a3b2:	1cbd      	addeq	r5, r7, #2
 800a3b4:	787c      	ldrbeq	r4, [r7, #1]
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	e7cb      	b.n	800a352 <_strtoul_l.isra.0+0x2e>
 800a3ba:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800a3be:	2f19      	cmp	r7, #25
 800a3c0:	d801      	bhi.n	800a3c6 <_strtoul_l.isra.0+0xa2>
 800a3c2:	3c37      	subs	r4, #55	; 0x37
 800a3c4:	e7e2      	b.n	800a38c <_strtoul_l.isra.0+0x68>
 800a3c6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800a3ca:	2f19      	cmp	r7, #25
 800a3cc:	d804      	bhi.n	800a3d8 <_strtoul_l.isra.0+0xb4>
 800a3ce:	3c57      	subs	r4, #87	; 0x57
 800a3d0:	e7dc      	b.n	800a38c <_strtoul_l.isra.0+0x68>
 800a3d2:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d6:	e7e5      	b.n	800a3a4 <_strtoul_l.isra.0+0x80>
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	da09      	bge.n	800a3f0 <_strtoul_l.isra.0+0xcc>
 800a3dc:	2322      	movs	r3, #34	; 0x22
 800a3de:	f8c8 3000 	str.w	r3, [r8]
 800a3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e6:	f1ba 0f00 	cmp.w	sl, #0
 800a3ea:	d107      	bne.n	800a3fc <_strtoul_l.isra.0+0xd8>
 800a3ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3f0:	b101      	cbz	r1, 800a3f4 <_strtoul_l.isra.0+0xd0>
 800a3f2:	4240      	negs	r0, r0
 800a3f4:	f1ba 0f00 	cmp.w	sl, #0
 800a3f8:	d0f8      	beq.n	800a3ec <_strtoul_l.isra.0+0xc8>
 800a3fa:	b10b      	cbz	r3, 800a400 <_strtoul_l.isra.0+0xdc>
 800a3fc:	f105 39ff 	add.w	r9, r5, #4294967295
 800a400:	f8ca 9000 	str.w	r9, [sl]
 800a404:	e7f2      	b.n	800a3ec <_strtoul_l.isra.0+0xc8>
 800a406:	2430      	movs	r4, #48	; 0x30
 800a408:	2e00      	cmp	r6, #0
 800a40a:	d1b0      	bne.n	800a36e <_strtoul_l.isra.0+0x4a>
 800a40c:	2608      	movs	r6, #8
 800a40e:	e7ae      	b.n	800a36e <_strtoul_l.isra.0+0x4a>
 800a410:	2c30      	cmp	r4, #48	; 0x30
 800a412:	d0a4      	beq.n	800a35e <_strtoul_l.isra.0+0x3a>
 800a414:	260a      	movs	r6, #10
 800a416:	e7aa      	b.n	800a36e <_strtoul_l.isra.0+0x4a>

0800a418 <_strtoul_r>:
 800a418:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a41a:	4c06      	ldr	r4, [pc, #24]	; (800a434 <_strtoul_r+0x1c>)
 800a41c:	4d06      	ldr	r5, [pc, #24]	; (800a438 <_strtoul_r+0x20>)
 800a41e:	6824      	ldr	r4, [r4, #0]
 800a420:	6a24      	ldr	r4, [r4, #32]
 800a422:	2c00      	cmp	r4, #0
 800a424:	bf08      	it	eq
 800a426:	462c      	moveq	r4, r5
 800a428:	9400      	str	r4, [sp, #0]
 800a42a:	f7ff ff7b 	bl	800a324 <_strtoul_l.isra.0>
 800a42e:	b003      	add	sp, #12
 800a430:	bd30      	pop	{r4, r5, pc}
 800a432:	bf00      	nop
 800a434:	20000014 	.word	0x20000014
 800a438:	20000078 	.word	0x20000078

0800a43c <__submore>:
 800a43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a440:	460c      	mov	r4, r1
 800a442:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a444:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a448:	4299      	cmp	r1, r3
 800a44a:	d11d      	bne.n	800a488 <__submore+0x4c>
 800a44c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a450:	f7ff fa66 	bl	8009920 <_malloc_r>
 800a454:	b918      	cbnz	r0, 800a45e <__submore+0x22>
 800a456:	f04f 30ff 	mov.w	r0, #4294967295
 800a45a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a45e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a462:	63a3      	str	r3, [r4, #56]	; 0x38
 800a464:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a468:	6360      	str	r0, [r4, #52]	; 0x34
 800a46a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a46e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a472:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a476:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a47a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a47e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a482:	6020      	str	r0, [r4, #0]
 800a484:	2000      	movs	r0, #0
 800a486:	e7e8      	b.n	800a45a <__submore+0x1e>
 800a488:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a48a:	0077      	lsls	r7, r6, #1
 800a48c:	463a      	mov	r2, r7
 800a48e:	f000 f837 	bl	800a500 <_realloc_r>
 800a492:	4605      	mov	r5, r0
 800a494:	2800      	cmp	r0, #0
 800a496:	d0de      	beq.n	800a456 <__submore+0x1a>
 800a498:	eb00 0806 	add.w	r8, r0, r6
 800a49c:	4601      	mov	r1, r0
 800a49e:	4632      	mov	r2, r6
 800a4a0:	4640      	mov	r0, r8
 800a4a2:	f7fe fdd7 	bl	8009054 <memcpy>
 800a4a6:	f8c4 8000 	str.w	r8, [r4]
 800a4aa:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a4ae:	e7e9      	b.n	800a484 <__submore+0x48>

0800a4b0 <__ascii_wctomb>:
 800a4b0:	b149      	cbz	r1, 800a4c6 <__ascii_wctomb+0x16>
 800a4b2:	2aff      	cmp	r2, #255	; 0xff
 800a4b4:	bf85      	ittet	hi
 800a4b6:	238a      	movhi	r3, #138	; 0x8a
 800a4b8:	6003      	strhi	r3, [r0, #0]
 800a4ba:	700a      	strbls	r2, [r1, #0]
 800a4bc:	f04f 30ff 	movhi.w	r0, #4294967295
 800a4c0:	bf98      	it	ls
 800a4c2:	2001      	movls	r0, #1
 800a4c4:	4770      	bx	lr
 800a4c6:	4608      	mov	r0, r1
 800a4c8:	4770      	bx	lr

0800a4ca <memmove>:
 800a4ca:	4288      	cmp	r0, r1
 800a4cc:	b510      	push	{r4, lr}
 800a4ce:	eb01 0302 	add.w	r3, r1, r2
 800a4d2:	d807      	bhi.n	800a4e4 <memmove+0x1a>
 800a4d4:	1e42      	subs	r2, r0, #1
 800a4d6:	4299      	cmp	r1, r3
 800a4d8:	d00a      	beq.n	800a4f0 <memmove+0x26>
 800a4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4de:	f802 4f01 	strb.w	r4, [r2, #1]!
 800a4e2:	e7f8      	b.n	800a4d6 <memmove+0xc>
 800a4e4:	4283      	cmp	r3, r0
 800a4e6:	d9f5      	bls.n	800a4d4 <memmove+0xa>
 800a4e8:	1881      	adds	r1, r0, r2
 800a4ea:	1ad2      	subs	r2, r2, r3
 800a4ec:	42d3      	cmn	r3, r2
 800a4ee:	d100      	bne.n	800a4f2 <memmove+0x28>
 800a4f0:	bd10      	pop	{r4, pc}
 800a4f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4f6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800a4fa:	e7f7      	b.n	800a4ec <memmove+0x22>

0800a4fc <__malloc_lock>:
 800a4fc:	4770      	bx	lr

0800a4fe <__malloc_unlock>:
 800a4fe:	4770      	bx	lr

0800a500 <_realloc_r>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	4607      	mov	r7, r0
 800a504:	4614      	mov	r4, r2
 800a506:	460e      	mov	r6, r1
 800a508:	b921      	cbnz	r1, 800a514 <_realloc_r+0x14>
 800a50a:	4611      	mov	r1, r2
 800a50c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800a510:	f7ff ba06 	b.w	8009920 <_malloc_r>
 800a514:	b922      	cbnz	r2, 800a520 <_realloc_r+0x20>
 800a516:	f7ff f9b5 	bl	8009884 <_free_r>
 800a51a:	4625      	mov	r5, r4
 800a51c:	4628      	mov	r0, r5
 800a51e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a520:	f000 f814 	bl	800a54c <_malloc_usable_size_r>
 800a524:	42a0      	cmp	r0, r4
 800a526:	d20f      	bcs.n	800a548 <_realloc_r+0x48>
 800a528:	4621      	mov	r1, r4
 800a52a:	4638      	mov	r0, r7
 800a52c:	f7ff f9f8 	bl	8009920 <_malloc_r>
 800a530:	4605      	mov	r5, r0
 800a532:	2800      	cmp	r0, #0
 800a534:	d0f2      	beq.n	800a51c <_realloc_r+0x1c>
 800a536:	4631      	mov	r1, r6
 800a538:	4622      	mov	r2, r4
 800a53a:	f7fe fd8b 	bl	8009054 <memcpy>
 800a53e:	4631      	mov	r1, r6
 800a540:	4638      	mov	r0, r7
 800a542:	f7ff f99f 	bl	8009884 <_free_r>
 800a546:	e7e9      	b.n	800a51c <_realloc_r+0x1c>
 800a548:	4635      	mov	r5, r6
 800a54a:	e7e7      	b.n	800a51c <_realloc_r+0x1c>

0800a54c <_malloc_usable_size_r>:
 800a54c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a550:	1f18      	subs	r0, r3, #4
 800a552:	2b00      	cmp	r3, #0
 800a554:	bfbc      	itt	lt
 800a556:	580b      	ldrlt	r3, [r1, r0]
 800a558:	18c0      	addlt	r0, r0, r3
 800a55a:	4770      	bx	lr

0800a55c <_init>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	bf00      	nop
 800a560:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a562:	bc08      	pop	{r3}
 800a564:	469e      	mov	lr, r3
 800a566:	4770      	bx	lr

0800a568 <_fini>:
 800a568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a56a:	bf00      	nop
 800a56c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a56e:	bc08      	pop	{r3}
 800a570:	469e      	mov	lr, r3
 800a572:	4770      	bx	lr
